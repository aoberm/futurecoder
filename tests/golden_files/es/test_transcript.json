[
    {
        "page": "Introducci\u00f3n a la ventana de comandos",
        "program": [
            "'literally anything'"
        ],
        "response": {
            "message": "<p>Fabuloso, \u00a1est\u00e1s probando tus propios experimentos!\nEs una gran se\u00f1al. Sigue as\u00ed.\nS\u00f3lo te hago saber que al final tienes que escribir <code>1+2</code> para que la lecci\u00f3n avance.</p>",
            "passed": false,
            "result": [
                {
                    "text": "'literally anything'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_expression"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a la ventana de comandos",
        "program": [
            "1+2"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "3\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_expression"
    },
    {
        "page": "Introducci\u00f3n a la ventana de comandos",
        "program": [
            "3 x 4"
        ],
        "response": {
            "message": "<p>Observo una 'x'. Si est\u00e1s tratando de multiplicar, usa un asterisco, por ejemplo:</p>\n<pre><code class=\"codehilite\"><span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"mi\">4</span>\n</span></code></pre>",
            "passed": false,
            "result": [
                {
                    "friendly": "<p>Un <code>SyntaxError</code> ocurre cuando Python no puede entender tu c\u00f3digo.</p>\n<p>Actualmente, no puedo detectar la causa probable de este error.\nIntente examinar detenidamente la l\u00ednea indicada, as\u00ed como la l\u00ednea\ninmediatamente superior para ver si puede identificar alguna palabra mal escrita\no s\u00edmbolos que falten, como (, ), [, ], :, etc.</p>\n<p>A menos que su c\u00f3digo utilice anotaciones de tipo, que est\u00e1n fuera de nuestro alcance,\nsi cree que esto es algo que deber\u00eda ser manejado\npor friendly, por favor reporte este caso a\nhttps://github.com/friendly-traceback/friendly-traceback/issues</p>",
                    "text": "    3 x 4\n      ^\nSyntaxError: invalid syntax\nen la l\u00ednea 1\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "more_calculation"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a la ventana de comandos",
        "program": [
            "5 - 6"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "-1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "more_calculation"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las Cadenas",
        "program": [
            "'hola'"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'hola'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_string"
    },
    {
        "get_solution": "program",
        "page": "Uniendo cadenas",
        "program": [
            "'hola' + 'mundo'"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'holamundo'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_world_concat"
    },
    {
        "page": "Uniendo cadenas",
        "program": [
            "'hola mundo'"
        ],
        "response": {
            "message": "<p>Todav\u00eda hay que sumar dos o m\u00e1s cadenas.</p>",
            "passed": false,
            "result": [
                {
                    "text": "'hola mundo'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_world_space"
    },
    {
        "get_solution": "program",
        "page": "Uniendo cadenas",
        "program": [
            "'hola ' + 'mundo'"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'hola mundo'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_world_space"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las Variables",
        "program": [
            "palabra = 'Hola'"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "word_assign"
    },
    {
        "page": "Introducci\u00f3n a las Variables",
        "program": [
            "palabra = 2"
        ],
        "response": {
            "message": "<p>Oops, necesitas establecer <code>palabra = 'Hola'</code> antes de que podamos continuar.</p>",
            "passed": false,
            "result": []
        },
        "step": "word_check"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las Variables",
        "program": [
            "palabra"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'Hola'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_check"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las Variables",
        "program": [
            "'palabra'"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "'palabra'",
                "choices": [
                    "palabra",
                    "'palabra'",
                    "Hola",
                    "'Hola'",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "'palabra'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_string_check"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las Variables",
        "program": [
            "sol"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Error",
                "choices": [
                    "sol",
                    "'sol'",
                    "Hola",
                    "'Hola'",
                    "Error"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "name 'sol' is not defined",
                                "type": "NameError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"n n-ExecutingNode\">sol</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>Una excepci\u00f3n <code>NameError</code> indica que una variable o\nnombre de funci\u00f3n no es conocido por Python.\nLa mayor\u00eda de las veces, esto se debe a un error ortogr\u00e1fico.\nSin embargo, a veces es porque el nombre se utiliza\nantes de ser definido o de recibir un valor.</p>\n<p>En su programa, no existe ning\u00fan objeto con el nombre <code>sol</code>.\nNo tengo informaci\u00f3n adicional para usted.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | sol",
                        "           ^^^",
                        "",
                        "NameError: name 'sol' is not defined"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "sunshine_undefined_check"
    },
    {
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "foo = 3"
        ],
        "response": {
            "message": "<p>Pon <code>tu_nombre</code> antes del <code>=</code> para crear una variable llamada <code>tu_nombre</code>.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "tu_nombre = ''"
        ],
        "response": {
            "message": "<p>Para este ejercicio, elige una cadena no vac\u00eda.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "tu_nombre = 3"
        ],
        "response": {
            "message": "<p>Tienes correcta la parte de <code>tu_nombre =</code>, ahora pon una cadena (usa comillas) a la derecha del <code>=</code>.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "tu_nombre = ' Alex'"
        ],
        "response": {
            "message": "<p>Para este ejercicio, elige un nombre que no comience con un espacio.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "get_solution": "program",
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "tu_nombre = 'Alex'"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "get_solution": "program",
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "'Hola ' + tu_nombre"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'Hola Alex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_plus_name"
    },
    {
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "palabra = 2"
        ],
        "response": {
            "message": "<p>Oops, necesitas establecer <code>palabra = 'Hola'</code> antes de que podamos continuar.</p>",
            "passed": false,
            "result": []
        },
        "step": "word_plus_name"
    },
    {
        "get_solution": "program",
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "palabra + tu_nombre"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'HolaAlex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_plus_name"
    },
    {
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "palabra = 2"
        ],
        "response": {
            "message": "<p>Oops, necesitas establecer <code>palabra = 'Hola'</code> antes de que podamos continuar.</p>",
            "passed": false,
            "result": []
        },
        "step": "word_plus_name_with_space"
    },
    {
        "get_solution": "program",
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "palabra + ' ' + tu_nombre"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'Hola Alex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_plus_name_with_space"
    },
    {
        "get_solution": "program",
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "palabra = 'Adi\u00f3s'"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "word_assign_goodbye"
    },
    {
        "get_solution": "program",
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "palabra + ' ' + tu_nombre"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'Adi\u00f3s Alex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "goodbye_plus_name"
    },
    {
        "get_solution": "program",
        "page": "Usando Variables y <code>print()</code>",
        "program": [
            "print(palabra + ' ' + tu_nombre)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Adi\u00f3s Alex\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_print"
    },
    {
        "get_solution": "program",
        "page": "Escribiendo Programas",
        "program": [
            "palabra = 'Hola'",
            "nombre = 'Mundo'",
            "print(palabra + ' ' + nombre)",
            "palabra = 'Adi\u00f3s'",
            "print(palabra + ' ' + nombre)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Hola Mundo\nAdi\u00f3s Mundo\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "editor_hello_world"
    },
    {
        "get_solution": "program",
        "page": "Almacenando c\u00e1lculos en variables",
        "program": [
            "palabra = 'Hola'",
            "nombre = 'Mundo'",
            "frase = palabra + ' ' + nombre",
            "print(frase)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Hola Mundo",
                "choices": [
                    "frase",
                    "palabra + ' ' + nombre",
                    "Hola + ' ' + Mundo",
                    "'Hola' + ' ' + 'Mundo'",
                    "Hola Mundo",
                    "'Hola Mundo'",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hola Mundo\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sentence_equals_word_plus_name"
    },
    {
        "get_solution": "program",
        "page": "Almacenando c\u00e1lculos en variables",
        "program": [
            "palabra = 'Hola'",
            "nombre = 'Mundo'",
            "frase = palabra + ' ' + nombre",
            "print(frase)",
            "palabra = 'Adi\u00f3s'",
            "print(frase)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Hola Mundo\nHola Mundo",
                "choices": [
                    "Hola Mundo\nHola Mundo",
                    "Hola Mundo\nAdi\u00f3s Mundo",
                    "Adi\u00f3s Mundo\nAdi\u00f3s Mundo",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hola Mundo\nHola Mundo\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sentence_doesnt_change"
    },
    {
        "get_solution": "program",
        "page": "Introduci\u00f3n a los Bucles For",
        "program": [
            "nombre = 'Mundo'",
            "for caracter in nombre: print(caracter)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "M\nu\nn\nd\no\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_for_loop"
    },
    {
        "get_solution": "program",
        "page": "Indentaci\u00f3n",
        "program": [
            "for caracter in nombre:",
            "print(caracter)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Un <code>IndentationError</code> ocurre cuando una l\u00ednea de c\u00f3digo dada no est\u00e1\ncon la indentaci\u00f3n (alineada verticalmente con otras l\u00edneas) que se espera.</p>\n<p>Se esperaba que la l\u00ednea <code>2</code> identificada anteriormente comenzara un nuevo bloque indentado.</p>",
                    "text": "    print(caracter)\n    ^^^^^\nIndentationError: expected an indented block after 'for' statement on line 1\nen la l\u00ednea 2\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "missing_indentation"
    },
    {
        "get_solution": "program",
        "page": "Indentaci\u00f3n",
        "program": [
            "nombre = 'Mundo'",
            "",
            "for caracter in nombre:",
            "    print(caracter)",
            "    print('---')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "M\n---\nu\n---\nn\n---\nd\n---\no\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "two_indented_lines"
    },
    {
        "get_solution": "program",
        "page": "Indentaci\u00f3n",
        "program": [
            "nombre = 'Mundo'",
            "",
            "for caracter in nombre:",
            "    print(caracter)",
            "print('---')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "M\nu\nn\nd\no\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "one_indented_line"
    },
    {
        "get_solution": "program",
        "page": "Indentaci\u00f3n",
        "program": [
            "for caracter in nombre:",
            "    print(caracter)",
            "  print('---')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Un <code>IndentationError</code> ocurre cuando una l\u00ednea de c\u00f3digo dada no est\u00e1\ncon la indentaci\u00f3n (alineada verticalmente con otras l\u00edneas) que se espera.</p>\n<p>La l\u00ednea <code>3</code> identificada arriba tiene menos indentaci\u00f3n de la esperada.</p>",
                    "text": "    print('---')\n                ^\nIndentationError: unindent does not match any outer indentation level\nen la l\u00ednea 3\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "mismatched_indentations"
    },
    {
        "get_solution": [
            "for caracter in nombre:",
            "    print('---' + caracter)"
        ],
        "page": "Ejercicios b\u00e1sicos de bucles For",
        "program": [
            "nombre = 'World'",
            "for caracter in nombre:",
            "    print('---' + caracter)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "---W\n---o\n---r\n---l\n---d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "loop_exercise_1"
    },
    {
        "get_solution": [
            "for _ in nombre:",
            "    print(nombre)"
        ],
        "page": "Ejercicios b\u00e1sicos de bucles For",
        "program": [
            "nombre = 'World'",
            "for _ in nombre:",
            "    print(nombre)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "World\nWorld\nWorld\nWorld\nWorld\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "loop_exercise_2"
    },
    {
        "get_solution": "program",
        "page": "Construyendo Cadenas",
        "program": [
            "hola = 'Hola'",
            "print(hola)",
            "hola = hola + '!'",
            "print(hola)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Hola\nHola!",
                "choices": [
                    "Hola\nHola",
                    "Hola\nHola!",
                    "Hola!\nHola!",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hola\nHola!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_plus_equals"
    },
    {
        "get_solution": "program",
        "page": "Construyendo Cadenas",
        "program": [
            "nombre = 'Mundo'",
            "linea = '-'",
            "for car in nombre:",
            "    linea = linea + car",
            "    print(linea)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "-M\n-Mu\n-Mun\n-Mund\n-Mundo",
                "choices": [
                    "-\nM\n-\nu\n-\nn\n-\nd\n-\no",
                    "-M\n-u\n-n\n-d\n-o",
                    "-Mundo",
                    "-M-u-n-d-o",
                    "-M\n-Mu\n-Mun\n-Mund\n-Mundo",
                    "-Mundo\n-Mund\n-Mun\n-Mu\n-M",
                    "-Mundo\n-Mundo\n-Mundo\n-Mundo\n-Mundo",
                    "-Mundo\n--Mundo\n---Mundo\n----Mundo\n-----Mundo",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "-M\n-Mu\n-Mun\n-Mund\n-Mundo\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle"
    },
    {
        "get_solution": "program",
        "page": "Construyendo Cadenas",
        "program": [
            "nombre = 'Mundo'",
            "linea = '-'",
            "for car in nombre:",
            "    print(linea)",
            "    linea = linea + car"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "-\n-M\n-Mu\n-Mun\n-Mund",
                "choices": [
                    "-M\n-Mu\n-Mun\n-Mund\n-Mundo",
                    "-Mu\n-Mun\n-Mund\n-Mundo",
                    "-\n-M\n-Mu\n-Mun\n-Mund",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "-\n-M\n-Mu\n-Mun\n-Mund\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_missing_last_line"
    },
    {
        "get_solution": "program",
        "page": "Construyendo Cadenas",
        "program": [
            "'' + '' + ''"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "''",
                "choices": [
                    "''",
                    "' '",
                    "'  '",
                    "'   '",
                    "'' + '' + ''",
                    "''''''",
                    "'' '' ''",
                    "' '' '' '",
                    "++",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "''\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "empty_string"
    },
    {
        "get_solution": [
            "linea = ''",
            "for car in nombre:",
            "    linea = linea + car",
            "    print(linea)"
        ],
        "page": "Construyendo Cadenas",
        "program": [
            "nombre = 'World'",
            "linea = ''",
            "for car in nombre:",
            "    linea = linea + car",
            "    print(linea)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "W\nWo\nWor\nWorl\nWorld\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_empty_string"
    },
    {
        "get_solution": [
            "linea = ''",
            "for car in nombre:",
            "    linea = linea + car + ' '",
            "    print(linea)"
        ],
        "page": "Ejercicios de Construcci\u00f3n de Cadenas",
        "program": [
            "nombre = 'World'",
            "linea = ''",
            "for car in nombre:",
            "    linea = linea + car + ' '",
            "    print(linea)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "W \nW o \nW o r \nW o r l \nW o r l d \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_spaced"
    },
    {
        "get_solution": [
            "linea = ''",
            "for car in nombre:",
            "    linea = car + linea",
            "    print(linea)"
        ],
        "page": "Ejercicios de Construcci\u00f3n de Cadenas",
        "program": [
            "nombre = 'World'",
            "linea = ''",
            "for car in nombre:",
            "    linea = car + linea",
            "    print(linea)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "W\noW\nroW\nlroW\ndlroW\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_backwards"
    },
    {
        "get_solution": [
            "linea = ''",
            "for _ in nombre:",
            "    linea += '-'",
            "print(nombre)",
            "print(linea)"
        ],
        "page": "Ejercicios de Construcci\u00f3n de Cadenas",
        "program": [
            "nombre = 'World'",
            "linea = ''",
            "for _ in nombre:",
            "    linea += '-'",
            "print(nombre)",
            "print(linea)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "World\n-----\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_underlined"
    },
    {
        "get_solution": [
            "linea = ''",
            "for _ in nombre:",
            "    linea += '-'",
            "linea = '+' + linea + '+'",
            "print(linea)",
            "print('|' + nombre + '|')",
            "print(linea)"
        ],
        "page": "Ejercicios de Construcci\u00f3n de Cadenas",
        "program": [
            "nombre = 'World'",
            "linea = ''",
            "for _ in nombre:",
            "    linea += '-'",
            "linea = '+' + linea + '+'",
            "print(linea)",
            "print('|' + nombre + '|')",
            "print(linea)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "+-----+\n|World|\n+-----+\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_box"
    },
    {
        "get_solution": [
            "linea = '+' + nombre + '+'",
            "espacios = ''",
            "for _ in nombre:",
            "    espacios += ' '",
            "",
            "print(linea)",
            "for car in nombre:",
            "    print(car + espacios + car)",
            "print(linea)"
        ],
        "page": "Ejercicios de Construcci\u00f3n de Cadenas",
        "program": [
            "nombre = 'World'",
            "linea = '+' + nombre + '+'",
            "espacios = ''",
            "for _ in nombre:",
            "    espacios += ' '",
            "",
            "print(linea)",
            "for car in nombre:",
            "    print(car + espacios + car)",
            "print(linea)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "+World+\nW     W\no     o\nr     r\nl     l\nd     d\n+World+\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_box_2"
    },
    {
        "page": "Ejercicios de Construcci\u00f3n de Cadenas",
        "program": [
            "nombre = 'World'",
            "espacios = ''",
            "for car in nombre:",
            "    espacios += ' '",
            "    print(espacios + car)"
        ],
        "response": {
            "message": "<p>\u00a1Ya casi est\u00e1! Tienes un espacio de m\u00e1s antes de cada letra.\nAseg\u00farate de que la primera vez que tu bucle llame a <code>print</code>\ntu variable que contendr\u00e1 los espacios sea una cadena vac\u00eda.\nComprueba el orden de tu c\u00f3digo.</p>",
            "passed": false,
            "result": [
                {
                    "text": " W\n  o\n   r\n    l\n     d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "diagonal_name_bonus_challenge"
    },
    {
        "get_solution": [
            "espacios = ''",
            "for car in nombre:",
            "    print(espacios + car)",
            "    espacios += ' '"
        ],
        "page": "Ejercicios de Construcci\u00f3n de Cadenas",
        "program": [
            "nombre = 'World'",
            "espacios = ''",
            "for car in nombre:",
            "    print(espacios + car)",
            "    espacios += ' '"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "W\n o\n  r\n   l\n    d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "diagonal_name_bonus_challenge"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las sentencias If",
        "program": [
            "condicion = True",
            "print(condicion)",
            "condicion = False",
            "print(condicion)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\nFalse\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_booleans"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las sentencias If",
        "program": [
            "if True:",
            "    print('Se imprime esto')",
            "",
            "if False:",
            "    print('Esto no')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Se imprime esto\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_if_statements"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las sentencias If",
        "program": [
            "frase = 'Hola Mundo'",
            "emocionado = True",
            "if emocionado:",
            "    frase += '!'",
            "print(frase)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Hola Mundo!",
                "choices": [
                    "Hola Mundo",
                    "Hola Mundo!",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hola Mundo!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "excited_example"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las sentencias If",
        "program": [
            "frase = 'Hola Mundo'",
            "emocionado = False",
            "if emocionado:",
            "    frase += '!'",
            "print(frase)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Hola Mundo",
                "choices": [
                    "Hola Mundo",
                    "\u00a1Hola Mundo!",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hola Mundo\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "excited_false_example"
    },
    {
        "get_solution": [
            "if emocionado:",
            "    frase += '!'",
            "if confundido:",
            "    frase += '?'",
            "print(frase)"
        ],
        "page": "Introducci\u00f3n a las sentencias If",
        "program": [
            "frase = 'Hello'",
            "emocionado = True",
            "confundido = True",
            "if emocionado:",
            "    frase += '!'",
            "if confundido:",
            "    frase += '?'",
            "print(frase)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Hello!?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "excited_confused_exercise"
    },
    {
        "get_solution": "program",
        "page": "Combinaci\u00f3n de declaraciones compuestas",
        "program": [
            "frase = 'Hola Mundo'",
            "emocionado = True",
            "",
            "if emocionado:",
            "    nueva_frase = ''",
            "    for car in frase:",
            "        nueva_frase += car + '!'",
            "    frase = nueva_frase",
            "",
            "print(frase)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "H!o!l!a! !M!u!n!d!o!",
                "choices": [
                    "Hola Mundo",
                    "!!!!!!!!!!!",
                    "Hola Mundo!!!!!!!!!!!",
                    "!!!!!!!!!!!Hola Mundo",
                    "Hola Mundo!",
                    "!Hola Mundo",
                    "!Hola Mundo!",
                    "H!o!l!a! !M!u!n!d!o!",
                    "!H!o!l!a! !M!u!n!d!o!",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "H!o!l!a! !M!u!n!d!o!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "for_inside_if"
    },
    {
        "get_solution": "program",
        "page": "Entendiendo Programas con <code>snoop</code>",
        "program": [
            "frase = 'Hola Mundo'",
            "",
            "incluir = False",
            "nueva_frase = ''",
            "for car in frase:",
            "    if incluir:",
            "        nueva_frase += car",
            "    incluir = True",
            "",
            "print(nueva_frase)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "ola Mundo",
                "choices": [
                    "Hola Mundo",
                    "ola Mundo",
                    "Hola mund",
                    "H",
                    "d",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "ola Mundo\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_tail"
    },
    {
        "get_solution": "program",
        "page": "Entendiendo Programas con <code>snoop</code>",
        "program": [
            "frase = 'Hola Mundo'",
            "",
            "incluir = False",
            "nueva_frase = ''",
            "for car in frase:",
            "    if incluir:",
            "        nueva_frase += car",
            "    incluir = True",
            "",
            "print(nueva_frase)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   1\u001b[0m | frase \u001b[38;5;197m=\u001b[39m \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mHola Mundo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   3\u001b[0m | incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mFalse\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   4\u001b[0m | nueva_frase \u001b[38;5;197m=\u001b[39m \u001b[38;5;186m'\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m...... car = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mH\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m incluir:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m...... car = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m incluir:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nueva_frase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m car\n\u001b[38;5;242m \u001b[0m.............. nueva_frase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m...... car = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186ml\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m incluir:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nueva_frase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m car\n\u001b[38;5;242m \u001b[0m.............. nueva_frase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mol\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m...... car = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186ma\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m incluir:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nueva_frase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m car\n\u001b[38;5;242m \u001b[0m.............. nueva_frase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mola\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m...... car = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186m \u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m incluir:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nueva_frase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m car\n\u001b[38;5;242m \u001b[0m.............. nueva_frase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mola \u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m...... car = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mM\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m incluir:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nueva_frase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m car\n\u001b[38;5;242m \u001b[0m.............. nueva_frase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mola M\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m...... car = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mu\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m incluir:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nueva_frase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m car\n\u001b[38;5;242m \u001b[0m.............. nueva_frase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mola Mu\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m...... car = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mn\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m incluir:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nueva_frase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m car\n\u001b[38;5;242m \u001b[0m.............. nueva_frase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mola Mun\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m...... car = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186md\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m incluir:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nueva_frase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m car\n\u001b[38;5;242m \u001b[0m.............. nueva_frase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mola Mund\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m...... car = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m incluir:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nueva_frase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m car\n\u001b[38;5;242m \u001b[0m.............. nueva_frase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mola Mundo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     incluir \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m car \u001b[38;5;197min\u001b[39m frase:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m  10\u001b[0m | print(nueva_frase)\n",
                    "type": "snoop"
                },
                {
                    "text": "ola Mundo",
                    "type": "stdout"
                },
                {
                    "text": "\n",
                    "type": "stdout"
                },
                {
                    "text": "",
                    "type": "snoop"
                }
            ]
        },
        "step": "print_tail_snoop"
    },
    {
        "get_solution": [
            "incluir = True",
            "nueva_frase = ''",
            "for car in frase:",
            "    if incluir:",
            "        nueva_frase += car",
            "    incluir = False",
            "",
            "print(nueva_frase)"
        ],
        "page": "Entendiendo Programas con <code>snoop</code>",
        "program": [
            "frase = 'Hello there'",
            "incluir = True",
            "nueva_frase = ''",
            "for car in frase:",
            "    if incluir:",
            "        nueva_frase += car",
            "    incluir = False",
            "",
            "print(nueva_frase)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "H\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_first_character"
    },
    {
        "get_solution": "program",
        "page": "<code>if</code> y <code>else</code>",
        "program": [
            "condicion = True",
            "if condicion:",
            "    print('S\u00ed')",
            "else:",
            "    print('No')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "S\u00ed\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_if_else"
    },
    {
        "get_solution": "program",
        "page": "<code>if</code> y <code>else</code>",
        "program": [
            "condicion = False",
            "if condicion:",
            "    print('S\u00ed')",
            "else:",
            "    print('No')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "No\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_if_else_false"
    },
    {
        "get_solution": "program",
        "page": "<code>if</code> y <code>else</code>",
        "program": [
            "frase = 'Hola Mundo'",
            "emocionado = True",
            "if emocionado:",
            "    frase = frase.upper()",
            "else:",
            "    frase = frase.lower()",
            "print(frase)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "HOLA MUNDO\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_upper_else_lower"
    },
    {
        "get_solution": "program",
        "page": "<code>if</code> y <code>else</code>",
        "program": [
            "frase = 'Hola Mundo'",
            "emocionado = False",
            "if emocionado:",
            "    frase = frase.upper()",
            "else:",
            "    frase = frase.lower()",
            "print(frase)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "hola mundo\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_upper_else_lower_false"
    },
    {
        "get_solution": "program",
        "page": "<code>if</code> y <code>else</code>",
        "program": [
            "frase = 'Hola Mundo'",
            "emocionado = False",
            "",
            "if emocionado:",
            "    car = '!'",
            "frase += car",
            "",
            "print(frase)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Error",
                "choices": [
                    "Hola Mundo",
                    "Hola Mundo!",
                    "Error"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "name 'car' is not defined",
                                "type": "NameError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 6,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 6,
                                            "text": "<span class=\"n\">frase</span> <span class=\"o\">+=</span> <span class=\"n n-ExecutingNode\">car</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">emocionado</span>\n",
                                            "value": "<span class=\"kc\">False</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">frase</span>\n",
                                            "value": "<span class=\"s1\">&#39;Hola Mundo&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Una excepci\u00f3n <code>NameError</code> indica que una variable o\nnombre de funci\u00f3n no es conocido por Python.\nLa mayor\u00eda de las veces, esto se debe a un error ortogr\u00e1fico.\nSin embargo, a veces es porque el nombre se utiliza\nantes de ser definido o de recibir un valor.</p>\n<p>En su programa, no existe ning\u00fan objeto con el nombre <code>car</code>.\nEl builtin de Python <code>chr</code> tiene un nombre similar.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 6, in <module>",
                        "       5 |     car = '!'",
                        "-->    6 | frase += car",
                        "                    ^^^",
                        "emocionado = False",
                        "frase = 'Hola Mundo'",
                        "",
                        "NameError: name 'car' is not defined"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "undefined_char"
    },
    {
        "get_solution": [
            "if emocionado:",
            "    car = '!'",
            "else:",
            "    car = '.'",
            "frase += car",
            "",
            "print(frase)"
        ],
        "page": "<code>if</code> y <code>else</code>",
        "program": [
            "frase = 'Hello there'",
            "emocionado = True",
            "if emocionado:",
            "    car = '!'",
            "else:",
            "    car = '.'",
            "frase += car",
            "",
            "print(frase)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Hello there!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "else_full_stop"
    },
    {
        "get_solution": [
            "upper = True",
            "nueva_frase = ''",
            "for car in frase:",
            "    if upper:",
            "        car = car.upper()",
            "    else:",
            "        car = car.lower()",
            "    nueva_frase += car",
            "    upper = False",
            "",
            "print(nueva_frase)"
        ],
        "page": "<code>if</code> y <code>else</code>",
        "program": [
            "frase = 'HELLO THERE'",
            "upper = True",
            "nueva_frase = ''",
            "for car in frase:",
            "    if upper:",
            "        car = car.upper()",
            "    else:",
            "        car = car.lower()",
            "    nueva_frase += car",
            "    upper = False",
            "",
            "print(nueva_frase)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Hello there\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "capitalise"
    },
    {
        "get_solution": [
            "upper = True",
            "nueva_frase = ''",
            "for car in frase:",
            "    if upper:",
            "        car = car.upper()",
            "        upper = False",
            "    else:",
            "        car = car.lower()",
            "        upper = True",
            "    nueva_frase += car",
            "",
            "print(nueva_frase)"
        ],
        "page": "<code>if</code> y <code>else</code>",
        "program": [
            "frase = 'One more exercise, and then you can relax.'",
            "upper = True",
            "nueva_frase = ''",
            "for car in frase:",
            "    if upper:",
            "        car = car.upper()",
            "        upper = False",
            "    else:",
            "        car = car.lower()",
            "        upper = True",
            "    nueva_frase += car",
            "",
            "print(nueva_frase)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "OnE MoRe eXeRcIsE, aNd tHeN YoU CaN ReLaX.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "spongebob"
    },
    {
        "get_solution": "program",
        "page": "El operador de igualdad",
        "program": [
            "print(1 + 2 == 3)",
            "print(4 + 5 == 6)",
            "print('ab' + 'c' == 'a' + 'bc')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\nFalse\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_equality"
    },
    {
        "get_solution": "program",
        "page": "El operador de igualdad",
        "program": [
            "print(1 + 2 = 3)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Un <code>SyntaxError</code> ocurre cuando Python no puede entender tu c\u00f3digo.</p>\n<p>Es probable que hayas llamado a una funci\u00f3n con un argumento con nombre:</p>\n<pre><code>unaa_funci\u00f3n(inv\u00e1lido=algo)\n</code></pre>\n<p>donde <code>inv\u00e1lido</code> no es un nombre de variable v\u00e1lido en Python\nya sea porque comienza con un n\u00famero, o es una cadena\no contiene un punto, etc.</p>",
                    "text": "    print(1 + 2 = 3)\n          ^^^^^^^\nSyntaxError: expression cannot contain assignment, perhaps you meant \"==\"?\nen la l\u00ednea 1\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "equality_vs_assignment"
    },
    {
        "get_solution": "program",
        "page": "El operador de igualdad",
        "program": [
            "nombre = 'kesha'",
            "nuevo_nombre = ''",
            "for c in nombre:",
            "    if c == 's':",
            "        c = '$'",
            "    nuevo_nombre += c",
            "",
            "print(nuevo_nombre)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "ke$ha\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_equals_replacing_characters"
    },
    {
        "get_solution": [
            "nuevo_nombre = ''",
            "for c in nombre:",
            "    if c == 'e':",
            "        c = '3'",
            "    if c == 's':",
            "        c = '$'",
            "    if c == 'a':",
            "        c = '@'",
            "    nuevo_nombre += c",
            "",
            "print(nuevo_nombre)"
        ],
        "page": "El operador de igualdad",
        "program": [
            "nombre = 'kesha'",
            "nuevo_nombre = ''",
            "for c in nombre:",
            "    if c == 'e':",
            "        c = '3'",
            "    if c == 's':",
            "        c = '$'",
            "    if c == 'a':",
            "        c = '@'",
            "    nuevo_nombre += c",
            "",
            "print(nuevo_nombre)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "k3$h@\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_equals_replacing_characters_exercise"
    },
    {
        "get_solution": "program",
        "page": "Presentando <code>elif</code>",
        "program": [
            "adn = 'AGTAGCGTC'",
            "adn_opuesto = ''",
            "for car in adn:",
            "    if car == 'A':",
            "        car = 'T'",
            "    if car == 'T':",
            "        car = 'A'",
            "    if car == 'G':",
            "        car = 'C'",
            "    if car == 'C':",
            "        car = 'G'",
            "    adn_opuesto += car",
            "",
            "print(adn_opuesto)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "AGAAGGGAG\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_example"
    },
    {
        "get_solution": [
            "adn_opuesto = ''",
            "for car in adn:",
            "    if car == 'A':",
            "        car = 'T'",
            "    else:",
            "        if car == 'T':",
            "            car = 'A'",
            "    if car == 'G':",
            "        car = 'C'",
            "    else:",
            "        if car == 'C':",
            "            car = 'G'",
            "    adn_opuesto += car",
            "",
            "print(adn_opuesto)"
        ],
        "page": "Presentando <code>elif</code>",
        "program": [
            "adn = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'",
            "adn_opuesto = ''",
            "for car in adn:",
            "    if car == 'A':",
            "        car = 'T'",
            "    else:",
            "        if car == 'T':",
            "            car = 'A'",
            "    if car == 'G':",
            "        car = 'C'",
            "    else:",
            "        if car == 'C':",
            "            car = 'G'",
            "    adn_opuesto += car",
            "",
            "print(adn_opuesto)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "TCATCGCAGGAATCAATGTCCTACCGAATA\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_example_with_else"
    },
    {
        "get_solution": "program",
        "page": "Presentando <code>elif</code>",
        "program": [
            "adn = 'AGTAGCGTC'",
            "adn_opuesto = ''",
            "for car in adn:",
            "    if car == 'A':",
            "        car = 'T'",
            "    elif car == 'T':",
            "        car = 'A'",
            "    elif car == 'G':",
            "        car = 'C'",
            "    elif car == 'C':",
            "        car = 'G'",
            "    adn_opuesto += car",
            "",
            "print(adn_opuesto)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "TCATCGCAG\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_example_with_elif"
    },
    {
        "get_solution": "program",
        "page": "Otros operadores de comparaci\u00f3n",
        "program": [
            "1 != 2"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "try_not_equals"
    },
    {
        "get_solution": "program",
        "page": "Otros operadores de comparaci\u00f3n",
        "program": [
            "frase = 'La tecla e de mi teclado est\u00e1 quebrada'",
            "nueva_frase = ''",
            "for c in frase:",
            "    if c != 'e':",
            "        nueva_frase += c",
            "print(nueva_frase)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "La tcla  d mi tclado st\u00e1 qubrada\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "brokn_kyboard"
    },
    {
        "get_solution": "program",
        "page": "Otros operadores de comparaci\u00f3n",
        "program": [
            "1 < 2"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_less_than"
    },
    {
        "get_solution": "program",
        "page": "Otros operadores de comparaci\u00f3n",
        "program": [
            "'1' < '2'"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "comparing_strings"
    },
    {
        "get_solution": "program",
        "page": "Otros operadores de comparaci\u00f3n",
        "program": [
            "porcentaje = 73",
            "",
            "if porcentaje < 40:",
            "    grado = 'F'",
            "elif porcentaje < 60:",
            "    grado = 'C'",
            "elif porcentaje < 80:",
            "    grado = 'B'",
            "else:",
            "    grado = 'A'",
            "",
            "print(grado)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "B",
                "choices": [
                    "F",
                    "C",
                    "B",
                    "A",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "B\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "grades_example"
    },
    {
        "get_solution": [
            "if x1 < x2:",
            "    if x1 < x3:",
            "        primero = x1",
            "    else:",
            "        primero = x3",
            "else:",
            "    if x2 < x3:",
            "        primero = x2",
            "    else:",
            "        primero = x3",
            "print(primero)"
        ],
        "page": "Otros operadores de comparaci\u00f3n",
        "program": [
            "x1 = 1",
            "x2 = 2",
            "x3 = 3",
            "if x1 < x2:",
            "    if x1 < x3:",
            "        primero = x1",
            "    else:",
            "        primero = x3",
            "else:",
            "    if x2 < x3:",
            "        primero = x2",
            "    else:",
            "        primero = x3",
            "print(primero)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "min_three_exercise"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las Listas",
        "program": [
            "palabras = ['Esto', 'es', 'una', 'lista']",
            "",
            "for palabra in palabras:",
            "    print(palabra)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Esto\nes\nuna\nlista\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_list"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las Listas",
        "program": [
            "x = 1",
            "cosas = ['Hola', x, x + 3]",
            "print(cosas)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "['Hola', 1, 4]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "can_contain_anything"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las Listas",
        "program": [
            "numeros = [3, 1, 4, 1, 5, 9]",
            "",
            "total = 0",
            "for numero in numeros:",
            "    total += numero",
            "",
            "print(total)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "23\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "numbers_sum"
    },
    {
        "get_solution": [
            "total = ''",
            "for palabra in palabras:",
            "    total += palabra",
            "",
            "print(total)"
        ],
        "page": "Introducci\u00f3n a las Listas",
        "program": [
            "palabras = ['This', 'is', 'a', 'list']",
            "total = ''",
            "for palabra in palabras:",
            "    total += palabra",
            "",
            "print(total)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Thisisalist\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "strings_sum"
    },
    {
        "get_solution": [
            "total = ''",
            "no_primero = False",
            "",
            "for palabra in palabras:",
            "    if no_primero:",
            "        total += separador",
            "    total += palabra",
            "    no_primero = True",
            "",
            "print(total)"
        ],
        "page": "Introducci\u00f3n a las Listas",
        "program": [
            "palabras = ['This', 'is', 'a', 'list']",
            "separador = ' - '",
            "total = ''",
            "no_primero = False",
            "",
            "for palabra in palabras:",
            "    if no_primero:",
            "        total += separador",
            "    total += palabra",
            "    no_primero = True",
            "",
            "print(total)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "This - is - a - list\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "strings_sum_bonus"
    },
    {
        "get_solution": [
            "doble = []",
            "for numero in numeros:",
            "    doble += [numero * 2]",
            "print(doble)"
        ],
        "page": "Construyendo listas nuevas",
        "program": [
            "numeros = [3, 1, 4, 1, 5, 9, 2, 6, 5]",
            "doble = []",
            "for numero in numeros:",
            "    doble += [numero * 2]",
            "print(doble)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[6, 2, 8, 2, 10, 18, 4, 12, 10]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_numbers"
    },
    {
        "get_solution": [
            "numeros_grandes = []",
            "for numero in numeros:",
            "    if numero > 5:",
            "        numeros_grandes.append(numero)",
            "print(numeros_grandes)"
        ],
        "page": "Construyendo listas nuevas",
        "program": [
            "numeros = [3, 1, 4, 1, 5, 9, 2, 6, 5]",
            "numeros_grandes = []",
            "for numero in numeros:",
            "    if numero > 5:",
            "        numeros_grandes.append(numero)",
            "print(numeros_grandes)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[9, 6]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "filter_numbers"
    },
    {
        "get_solution": [
            "encontrado = False",
            "for cosa in cosas:",
            "    if cosa == cosa_a_encontrar:",
            "        encontrado = True",
            "",
            "print(encontrado)"
        ],
        "page": "Utilizando <code>break</code> para cortar un bucle antes de tiempo",
        "program": [
            "cosas = ['This', 'is', 'a', 'list']",
            "cosa_a_encontrar = 'is'",
            "encontrado = False",
            "for cosa in cosas:",
            "    if cosa == cosa_a_encontrar:",
            "        encontrado = True",
            "",
            "print(encontrado)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "list_contains_exercise"
    },
    {
        "get_solution": "program",
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "palabras = ['Esto', 'es', 'una', 'lista']",
            "",
            "print(palabras[0])",
            "print(palabras[1])",
            "print(palabras[2])",
            "print(palabras[3])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Esto\nes\nuna\nlista\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_subscripting"
    },
    {
        "get_solution": "program",
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "palabras[4]"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "list index out of range",
                                "type": "IndexError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"n n-ExecutingNode\">palabras</span><span class=\"p p-ExecutingNode\">[</span><span class=\"mi mi-ExecutingNode\">4</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">palabras</span>\n",
                                            "value": "<span class=\"p\">[</span><span class=\"s1\">&#39;Esto&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;es&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;una&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lista&#39;</span><span class=\"p\">]</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Un <code>IndexError</code> se produce cuando se intenta obtener un elemento de una lista\nuna tupla, o un objeto similar (secuencia), y utiliza un \u00edndice que\nno existe; normalmente, esto ocurre porque el \u00edndice que se da\nes mayor que la longitud de la secuencia.</p>\n<p>Ha intentado obtener el elemento con \u00edndice <code>4</code> de <code>palabras</code>,\nuna <code>list</code> de longitud <code>4</code>.\nLos valores de \u00edndice v\u00e1lidos de <code>palabras</code> son n\u00fameros enteros que van desde\n<code>-4</code> a <code>3</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | palabras[4]",
                        "           ^^^^^^^^^^^",
                        "palabras = ['Esto', 'es', 'una', 'lista']",
                        "",
                        "IndexError: list index out of range"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "index_error"
    },
    {
        "get_solution": "program",
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "palabras = ['Esto', 'es', 'una', 'lista']",
            "indices = [0, 1, 2, 3]",
            "",
            "for indice in indices:",
            "    print(indice)",
            "    print(palabras[indice])"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "0\nEsto\n1\nes\n2\nuna\n3\nlista",
                "choices": [
                    "Esto\nes\nuna\nlista",
                    "0\n1\n2\n3",
                    "0\nEsto\n1\nes\n2\nuna\n3\nlista",
                    "Esto\n0\nes\n1\nuna\n2\nlista\n3",
                    "0\n1\n2\n3\nEsto\nes\nuna\nlista",
                    "Esto\nes\nuna\nlista\n0\n1\n2\n3",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "0\nEsto\n1\nes\n2\nuna\n3\nlista\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_len_and_range"
    },
    {
        "get_solution": "program",
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "palabras = ['Esto', 'es', 'una', 'lista']",
            "",
            "for indice in range(len(palabras)):",
            "    print(indice)",
            "    print(palabras[indice])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "0\nEsto\n1\nes\n2\nuna\n3\nlista\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "range_len"
    },
    {
        "get_solution": "program",
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "indices = range(4)",
            "",
            "print(indices[0])",
            "print(indices[1])",
            "print(indices[2])",
            "print(indices[3])"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "0\n1\n2\n3",
                "choices": [
                    "0\n1\n2\n3",
                    "1\n2\n3\n4",
                    "[0]\n[1]\n[2]\n[3]",
                    "[1]\n[2]\n[3]\n[4]",
                    "Esta\nes\nuna\nlista",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "0\n1\n2\n3\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "printing_the_range"
    },
    {
        "get_solution": "program",
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "indices[4]"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Error",
                "choices": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "Error"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "range object index out of range",
                                "type": "IndexError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"n n-ExecutingNode\">indices</span><span class=\"p p-ExecutingNode\">[</span><span class=\"mi mi-ExecutingNode\">4</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">indices</span>\n",
                                            "value": "<span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Un <code>IndexError</code> se produce cuando se intenta obtener un elemento de una lista\nuna tupla, o un objeto similar (secuencia), y utiliza un \u00edndice que\nno existe; normalmente, esto ocurre porque el \u00edndice que se da\nes mayor que la longitud de la secuencia.</p>\n<p>Ha intentado obtener el elemento con \u00edndice <code>4</code> de <code>indices</code>,\n<code>range object</code> de longitud <code>4</code>.\nLos valores de \u00edndice v\u00e1lidos de <code>indices</code> son n\u00fameros enteros que van desde\n<code>-4</code> a <code>3</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | indices[4]",
                        "           ^^^^^^^^^^",
                        "indices = range(0, 4)",
                        "",
                        "IndexError: range object index out of range"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "indices_out_of_bounds"
    },
    {
        "get_solution": "program",
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "range(4)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "range(0, 4)\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "range_almost_the_same_as_list"
    },
    {
        "get_solution": "program",
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "list(range(4))"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "[0, 1, 2, 3]",
                "choices": [
                    "range(4)",
                    "range(0, 4)",
                    "list(range(4))",
                    "list(range(0, 4))",
                    "range(0, 1, 2, 3)",
                    "(0, 1, 2, 3)",
                    "[0, 1, 2, 3]",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[0, 1, 2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "range_versus_list"
    },
    {
        "get_solution": "program",
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "palabras = ['Esto', 'es', 'una', 'lista']",
            "print(len(palabras))"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "4",
                "choices": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "4\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "using_len_first_time"
    },
    {
        "get_solution": [
            "print(palabras[len(palabras) - 1])"
        ],
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "palabras = ['Python']",
            "print(palabras[len(palabras) - 1])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Python\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_last_element"
    },
    {
        "get_solution": [
            "for indice in range(len(palabras)):",
            "    print(indice)",
            "    print(palabras[indice])"
        ],
        "page": "Recuperando elementos en una posici\u00f3n, <code>range()</code> y <code>len()</code>.",
        "program": [
            "palabras = ['Python']",
            "for indice in range(len(palabras)):",
            "    print(indice)",
            "    print(palabras[indice])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "0\nPython\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_indices_and_words"
    },
    {
        "page": "Ejercicios con <code>range()</code> y <code>len()</code>",
        "program": [
            "cosas = ['on', 'the', 'way', 'to', 'the', 'store']",
            "a_encontrar = 'the'",
            "for i in range(len(cosas)):",
            "    if a_encontrar == cosas[i]:",
            "        print(i)"
        ],
        "response": {
            "message": "<p>\u00a1Casi! Sin embargo, esto imprime todos los \u00edndices, no solo el primero.</p>",
            "passed": false,
            "result": [
                {
                    "text": "1\n4\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_exercise"
    },
    {
        "page": "Ejercicios con <code>range()</code> y <code>len()</code>",
        "program": [
            "cosas = ['on', 'the', 'way', 'to', 'the', 'store']",
            "a_encontrar = 'the'",
            "answer = None",
            "for i in range(len(cosas)):",
            "    if a_encontrar == cosas[i]:",
            "        answer = i",
            "print(answer)"
        ],
        "response": {
            "message": "<p>\u00a1Casi! Sin embargo, esto imprime el <em>\u00faltimo</em> \u00edndice, no el primero.</p>",
            "passed": false,
            "result": [
                {
                    "text": "4\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(cosas)):",
            "    if a_encontrar == cosas[i]:",
            "        print(i)",
            "        break"
        ],
        "page": "Ejercicios con <code>range()</code> y <code>len()</code>",
        "program": [
            "cosas = ['on', 'the', 'way', 'to', 'the', 'store']",
            "a_encontrar = 'the'",
            "for i in range(len(cosas)):",
            "    if a_encontrar == cosas[i]:",
            "        print(i)",
            "        break"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(cadena1)):",
            "    car1 = cadena1[i]",
            "    car2 = cadena2[i]",
            "    print(car1 + ' ' + car2)"
        ],
        "page": "Ejercicios con <code>range()</code> y <code>len()</code>",
        "program": [
            "cadena1 = 'Hello'",
            "cadena2 = 'World'",
            "for i in range(len(cadena1)):",
            "    car1 = cadena1[i]",
            "    car2 = cadena2[i]",
            "    print(car1 + ' ' + car2)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "H W\ne o\nl r\nl l\no d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_exercise"
    },
    {
        "get_solution": [
            "largo1 = len(cadena1)",
            "largo2 = len(cadena2)",
            "",
            "if largo1 > largo2:",
            "    largo = largo1",
            "else:",
            "    largo = largo2",
            "",
            "for i in range(largo):",
            "    if i < len(cadena1):",
            "        car1 = cadena1[i]",
            "    else:",
            "        car1 = ' '",
            "",
            "    if i < len(cadena2):",
            "        car2 = cadena2[i]",
            "    else:",
            "        car2 = ' '",
            "",
            "    print(car1 + ' ' + car2)"
        ],
        "page": "Ejercicios con <code>range()</code> y <code>len()</code>",
        "program": [
            "cadena1 = 'Goodbye'",
            "cadena2 = 'World'",
            "largo1 = len(cadena1)",
            "largo2 = len(cadena2)",
            "",
            "if largo1 > largo2:",
            "    largo = largo1",
            "else:",
            "    largo = largo2",
            "",
            "for i in range(largo):",
            "    if i < len(cadena1):",
            "        car1 = cadena1[i]",
            "    else:",
            "        car1 = ' '",
            "",
            "    if i < len(cadena2):",
            "        car2 = cadena2[i]",
            "    else:",
            "        car2 = ' '",
            "",
            "    print(car1 + ' ' + car2)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "G W\no o\no r\nd l\nb d\ny  \ne  \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_longest_exercise"
    },
    {
        "get_solution": "program",
        "page": "Terminolog\u00eda: Llamada a funciones y m\u00e9todos",
        "program": [
            "print(len)",
            "print(print)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "<built-in function len>\n<built-in function print>\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_functions"
    },
    {
        "get_solution": "program",
        "page": "Terminolog\u00eda: Llamada a funciones y m\u00e9todos",
        "program": [
            "print(callable(len))"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_callable"
    },
    {
        "get_solution": "program",
        "page": "Terminolog\u00eda: Llamada a funciones y m\u00e9todos",
        "program": [
            "f = 'una cadena'",
            "print(callable(f))",
            "f()"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                },
                {
                    "data": [
                        {
                            "didyoumean": [
                                "'str[value]'"
                            ],
                            "exception": {
                                "message": "'str' object is not callable",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 3,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 3,
                                            "text": "<span class=\"n n-ExecutingNode\">f</span><span class=\"p p-ExecutingNode\">()</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">f</span>\n",
                                            "value": "<span class=\"s1\">&#39;una cadena&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Un <code>TypeError</code> suele producirse al intentar\ncombinar dos tipos de objetos incompatibles,\npor llamar a una funci\u00f3n con el tipo de objeto equivocado,\no por intentar realizar una operaci\u00f3n no permitida en un tipo de objeto determinado.</p>\n<p>Los par\u00e9ntesis <code>()</code> que siguen a <code>f</code> son interpretados\npor Python como una llamada a una funci\u00f3n para <code>f</code>.\nSin embargo, <code>f</code> no es una funci\u00f3n sino un objeto de tipo <code>str</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 3, in <module>",
                        "       2 | print(callable(f))",
                        "-->    3 | f()",
                        "           ^^^",
                        "f = 'una cadena'",
                        "",
                        "TypeError: 'str' object is not callable"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "not_callable"
    },
    {
        "get_solution": "program",
        "page": "Terminolog\u00eda: Llamada a funciones y m\u00e9todos",
        "program": [
            "cosas = [1, 2, 3]",
            "largo = len(cosas)",
            "impreso = print(largo)",
            "print(impreso)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "3\nNone\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_returns_none"
    },
    {
        "get_solution": "program",
        "page": "Terminolog\u00eda: Llamada a funciones y m\u00e9todos",
        "program": [
            "cosas = print([1, 2, 3])",
            "largo = len(cosas)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n",
                    "type": "stdout"
                },
                {
                    "data": [
                        {
                            "didyoumean": [
                                "implement \"__len__\" on NoneType"
                            ],
                            "exception": {
                                "message": "object of type 'NoneType' has no len()",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 2,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 2,
                                            "text": "<span class=\"n\">largo</span> <span class=\"o\">=</span> <span class=\"nb nb-ExecutingNode\">len</span><span class=\"p p-ExecutingNode\">(</span><span class=\"n n-ExecutingNode\">cosas</span><span class=\"p p-ExecutingNode\">)</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">cosas</span>\n",
                                            "value": "<span class=\"kc\">None</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Un <code>TypeError</code> suele producirse al intentar\ncombinar dos tipos de objetos incompatibles,\npor llamar a una funci\u00f3n con el tipo de objeto equivocado,\no por intentar realizar una operaci\u00f3n no permitida en un tipo de objeto determinado.</p>\n<p>No se conoce ninguna informaci\u00f3n sobre esta excepci\u00f3n.\nPor favor, informe de este ejemplo a\nhttps://github.com/friendly-traceback/friendly-traceback/issues/new\nSi est\u00e1 utilizando un REPL, utilice <code>www('bug')</code> para hacerlo.</p>\n<p>Si est\u00e1 utilizando la consola Friendly, utilice <code>www()</code> para\nhacer una b\u00fasqueda en Internet para este caso en particular.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 2, in <module>",
                        "       1 | cosas = print([1, 2, 3])",
                        "-->    2 | largo = len(cosas)",
                        "                   ^^^^^^^^^^",
                        "cosas = None",
                        "",
                        "TypeError: object of type 'NoneType' has no len()"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "len_of_none"
    },
    {
        "get_solution": "program",
        "page": "Terminolog\u00eda: Llamada a funciones y m\u00e9todos",
        "program": [
            "palabra = 'Hola'",
            "print(palabra.upper)",
            "print(palabra.upper())"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "<built-in method upper of str object at 0xABC>\nHOLA\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "methods_of_str"
    },
    {
        "get_solution": "program",
        "page": "Terminolog\u00eda: Llamada a funciones y m\u00e9todos",
        "program": [
            "palabra = 'Hola'",
            "palabra.append('!')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "'str' object has no attribute 'append'",
                                "type": "AttributeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 2,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 2,
                                            "text": "<span class=\"n n-ExecutingNode\">palabra</span><span class=\"o o-ExecutingNode\">.</span><span class=\"n n-ExecutingNode\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;!&#39;</span><span class=\"p\">)</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">palabra</span>\n",
                                            "value": "<span class=\"s1\">&#39;Hola&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Un <code>AttributeError</code> ocurre cuando el c\u00f3digo contiene algo como\n    objeto.x\ny <code>x</code> no es un m\u00e9todo o atributo (variable) perteneciente al <code>objeto</code>.</p>\n<p>Un objeto de tipo <code>palabra</code> no tiene ning\u00fan atributo llamado <code>append</code>.\nA continuaci\u00f3n se detallan algunos de sus atributos conocidos:\n<code>capitalize, casefold, center, count, encode, endswith, expandtabs, find, format, ...</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 2, in <module>",
                        "       1 | palabra = 'Hola'",
                        "-->    2 | palabra.append('!')",
                        "           ^^^^^^^^^^^^^^",
                        "palabra = 'Hola'",
                        "",
                        "AttributeError: 'str' object has no attribute 'append'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "no_append_for_str"
    },
    {
        "get_solution": "program",
        "page": "Funciones y M\u00e9todos para listas",
        "program": [
            "nums = [1, 2, 3]",
            "nuevos_nums = nums + [4, 5]",
            "print(nuevos_nums)",
            "print(nums)",
            "nums.append(4)",
            "print(nums)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3, 4, 5]\n[1, 2, 3]\n[1, 2, 3, 4]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "append_vs_concatenate"
    },
    {
        "get_solution": "program",
        "page": "Funciones y M\u00e9todos para listas",
        "program": [
            "nums = [1, 2, 3]",
            "nums[1] = 9",
            "print(nums)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "[1, 9, 3]",
                "choices": [
                    "[9, 1, 2, 3]",
                    "[1, 9, 2, 3]",
                    "[1, 2, 9, 3]",
                    "[9, 2, 3]",
                    "[1, 9, 3]",
                    "[1, 2, 9]",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[1, 9, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "subscript_assignment_predict"
    },
    {
        "get_solution": "program",
        "page": "Funciones y M\u00e9todos para listas",
        "program": [
            "[7, 8, 9, 8].index(8)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "1",
                "choices": [
                    "[7, 8]",
                    "[7, 8, 9]",
                    "[7, 8, 9, 8]",
                    "1",
                    "2",
                    "3",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_predict_exercise"
    },
    {
        "get_solution": "program",
        "page": "Funciones y M\u00e9todos para listas",
        "program": [
            "nums = [1, 2, 3]",
            "print(nums.pop(1))",
            "print(nums)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "2\n[1, 3]",
                "choices": [
                    "1\n[1, 3]",
                    "2\n[1, 3]",
                    "1\n[2, 3]",
                    "2\n[2, 3]",
                    "1\n[2, 1, 3]",
                    "2\n[2, 1, 3]",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "2\n[1, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "pop_predict_exercise"
    },
    {
        "get_solution": "program",
        "page": "Funciones y M\u00e9todos para listas",
        "program": [
            "nums = [1, 2, 3]",
            "nums.remove(1)",
            "print(nums)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "[2, 3]",
                "choices": [
                    "[1, 2]",
                    "[1, 3]",
                    "[2, 3]",
                    "1",
                    "2",
                    "3",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "remove_predict_exercise"
    },
    {
        "get_solution": "program",
        "page": "Funciones y M\u00e9todos para listas",
        "program": [
            "x = ['a', 'b', 'c']",
            "x.append(x.pop(0))",
            "print(x)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "['b', 'c', 'a']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "pop_remove_index_subscript_assignment"
    },
    {
        "get_solution": "program",
        "page": "Funciones y M\u00e9todos para listas",
        "program": [
            "x = ['a', 'b', 'c']",
            "x[len(x) - 1] = x[0]",
            "print(x)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "['a', 'b', 'a']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "subscript_assignment_exercise"
    },
    {
        "get_solution": "program",
        "page": "Funciones y M\u00e9todos para listas",
        "program": [
            "x = ['a', 'b', 'c']",
            "y = x + [x[0]]",
            "print(y)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "['a', 'b', 'c', 'a']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "negative_index_concatenation_exercise"
    },
    {
        "get_solution": "program",
        "page": "Funciones y M\u00e9todos para listas",
        "program": [
            "x = [1, 2, 0, 3]",
            "x.pop(x.index(0))",
            "print(x)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "remove_exercise"
    },
    {
        "get_solution": "program",
        "page": "M\u00e1s funciones y m\u00e9todos de la lista",
        "program": [
            "sorted([2, 9, 1, 8, 5, 6])"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "[1, 2, 5, 6, 8, 9]",
                "choices": [
                    "[9, 8, 6, 5, 2, 1]",
                    "[1, 8, 6, 2, 5, 9]",
                    "[1, 2, 5, 6, 8, 9]",
                    "[2, 9, 1, 8, 5, 6]",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[1, 2, 5, 6, 8, 9]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sorted_predict_exercise"
    },
    {
        "get_solution": "program",
        "page": "M\u00e1s funciones y m\u00e9todos de la lista",
        "program": [
            "nums = [2, 9, 1, 8, 5, 64]",
            "print(7 in nums)",
            "print(2 in nums)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "False\nTrue",
                "choices": [
                    "True\nFalse",
                    "False\nTrue",
                    "True\nTrue",
                    "False\nFalse",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "False\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "in_predict_exercise"
    },
    {
        "get_solution": "program",
        "page": "M\u00e1s funciones y m\u00e9todos de la lista",
        "program": [
            "sum([5, 3, 4])"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "12",
                "choices": [
                    "10",
                    "12",
                    "7",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "12\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sum_predict_exercise"
    },
    {
        "get_solution": "program",
        "page": "M\u00e1s funciones y m\u00e9todos de la lista",
        "program": [
            "[1, 2, 3, 2, 7, 2, 5].count(2)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "3",
                "choices": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "3\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "count_predict_exercise"
    },
    {
        "get_solution": "program",
        "page": "M\u00e1s funciones y m\u00e9todos de la lista",
        "program": [
            "x = [1, 2, 0, 3]",
            "y = x.count(1) > 0",
            "print(y)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "count_in_sorted_sum"
    },
    {
        "get_solution": "program",
        "page": "M\u00e1s funciones y m\u00e9todos de la lista",
        "program": [
            "x = [15, 12, -6, 3]",
            "y = sum(x) / len(x)",
            "print(y)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "6.0\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "average_exercise"
    },
    {
        "get_solution": "program",
        "page": "M\u00e1s funciones y m\u00e9todos de la lista",
        "program": [
            "x = 100",
            "y = sum(range(x + 1))",
            "print(y)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "5050\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sum_range_exercise"
    },
    {
        "get_solution": "program",
        "page": "M\u00e1s funciones y m\u00e9todos de la lista",
        "program": [
            "x = [12, -6, 2, -1, 3]",
            "y = sorted(x)[1]",
            "print(y)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "-1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "second_smallest_in_list_exercise"
    },
    {
        "get_solution": "program",
        "page": "M\u00e9todos de cadena e inmutabilidad",
        "program": [
            "print('al' in 'dar de comer al perro y al gato')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_in_step"
    },
    {
        "get_solution": "program",
        "page": "M\u00e9todos de cadena e inmutabilidad",
        "program": [
            "string = 'dar de comer al perro y al gato'",
            "print(string.count('al'))",
            "print(string.index('al'))"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "2\n13\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_count_index"
    },
    {
        "get_solution": "program",
        "page": "M\u00e9todos de cadena e inmutabilidad",
        "program": [
            "'Python'.append(' es genial!')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "'str' object has no attribute 'append'",
                                "type": "AttributeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"s1 s1-ExecutingNode\">&#39;Python&#39;</span><span class=\"o o-ExecutingNode\">.</span><span class=\"n n-ExecutingNode\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39; es genial!&#39;</span><span class=\"p\">)</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>Un <code>AttributeError</code> ocurre cuando el c\u00f3digo contiene algo como\n    objeto.x\ny <code>x</code> no es un m\u00e9todo o atributo (variable) perteneciente al <code>objeto</code>.</p>\n<p>Un objeto de tipo <code>'Python'</code> no tiene ning\u00fan atributo llamado <code>append</code>.\nA continuaci\u00f3n se detallan algunos de sus atributos conocidos:\n<code>capitalize, casefold, center, count, encode, endswith, expandtabs, find, format, ...</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | 'Python'.append(' es genial!')",
                        "           ^^^^^^^^^^^^^^^",
                        "",
                        "AttributeError: 'str' object has no attribute 'append'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "mutation_string_append"
    },
    {
        "get_solution": "program",
        "page": "M\u00e9todos de cadena e inmutabilidad",
        "program": [
            "frase = \"Python es impresionante\"",
            "nueva_frase = frase.upper()",
            "print(frase)",
            "print(nueva_frase)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Python es impresionante\nPYTHON ES IMPRESIONANTE\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_lower_upper"
    },
    {
        "get_solution": "program",
        "page": "C\u00f3mo Encontrar Informaci\u00f3n con Google, y m\u00e1s",
        "program": [
            "max([21, 55, 4, 91, 62, 49])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "91\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sum_list"
    },
    {
        "get_solution": "program",
        "page": "C\u00f3mo Encontrar Informaci\u00f3n con Google, y m\u00e1s",
        "program": [
            "nums = [1, 2, 3, 4, 5]",
            "nums.insert(2, 9)",
            "print(nums)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 9, 3, 4, 5]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "list_insert"
    },
    {
        "get_solution": "program",
        "page": "C\u00f3mo Encontrar Informaci\u00f3n con Google, y m\u00e1s",
        "program": [
            "dir([])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getstate__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dir_list"
    },
    {
        "get_solution": "program",
        "page": "Entendiendo programas con Python Tutor",
        "program": [
            "todo_numeros = [2, 4, 8, 1, 9, 7]",
            "",
            "numeros_peque\u00f1os = []",
            "numeros_grandes = []",
            "",
            "for numero in todo_numeros:",
            "    if numero <= 5:",
            "        numeros_peque\u00f1os.append(numero)",
            "    else:",
            "        numeros_grandes.append(numero)",
            "",
            "print(numeros_peque\u00f1os)",
            "print(numeros_grandes)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[2, 4, 1]\n[8, 9, 7]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "run_with_python_tutor"
    },
    {
        "get_solution": "program",
        "page": "<code>==</code> contra <code>is</code>, y Tener Varios Nombres Para un Mismo Valor",
        "program": [
            "lista1 = [1, 2, 3]",
            "lista2 = [1, 2, 3]",
            "",
            "print(lista1)",
            "print(lista2)",
            "print(lista1 == lista2)",
            "",
            "print(lista1 is lista2)",
            "",
            "lista1.append(4)",
            "",
            "print(lista1)",
            "print(lista2)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n[1, 2, 3]\nTrue\nFalse\n[1, 2, 3, 4]\n[1, 2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "two_separate_lists"
    },
    {
        "get_solution": "program",
        "page": "<code>==</code> contra <code>is</code>, y Tener Varios Nombres Para un Mismo Valor",
        "program": [
            "lista1 = [1, 2, 3]",
            "lista2 = lista1",
            "",
            "print(lista1)",
            "print(lista2)",
            "print(lista1 == lista2)",
            "",
            "print(lista1 is lista2)",
            "",
            "lista1.append(4)",
            "",
            "print(lista1)",
            "print(lista2)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n[1, 2, 3]\nTrue\nTrue\n[1, 2, 3, 4]\n[1, 2, 3, 4]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "same_list"
    },
    {
        "get_solution": "program",
        "page": "Modificar Mientras se Itera",
        "program": [
            "numeros = [10, 7, 8, 3, 12, 15]",
            "for i in range(len(numeros)):",
            "    numero = numeros[i]",
            "    if numero <= 10:",
            "        numeros.pop(i)",
            "print(numeros)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "list index out of range",
                                "type": "IndexError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 3,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 3,
                                            "text": "<span class=\"n\">numero</span> <span class=\"o\">=</span> <span class=\"n n-ExecutingNode\">numeros</span><span class=\"p p-ExecutingNode\">[</span><span class=\"n n-ExecutingNode\">i</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">i</span>\n",
                                            "value": "<span class=\"mi\">4</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">numeros</span><span class=\"p\">)</span>\n",
                                            "value": "<span class=\"mi\">4</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">numero</span>\n",
                                            "value": "<span class=\"mi\">15</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">numero</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span>\n",
                                            "value": "<span class=\"kc\">False</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">numeros</span>\n",
                                            "value": "<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">numeros</span><span class=\"p\">))</span>\n",
                                            "value": "<span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Un <code>IndexError</code> se produce cuando se intenta obtener un elemento de una lista\nuna tupla, o un objeto similar (secuencia), y utiliza un \u00edndice que\nno existe; normalmente, esto ocurre porque el \u00edndice que se da\nes mayor que la longitud de la secuencia.</p>\n<p>Ha intentado obtener el elemento con \u00edndice <code>4</code> de <code>numeros</code>,\nuna <code>list</code> de longitud <code>4</code>.\nLos valores de \u00edndice v\u00e1lidos de <code>numeros</code> son n\u00fameros enteros que van desde\n<code>-4</code> a <code>3</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 3, in <module>",
                        "       2 | for i in range(len(numeros)):",
                        "-->    3 |     numero = numeros[i]",
                        "                        ^^^^^^^^^^",
                        "i = 4",
                        "len(numeros) = 4",
                        "numero = 15",
                        "numero <= 10 = False",
                        "numeros = [7, 3, 12, 15]",
                        "range(len(numeros)) = range(0, 4)",
                        "",
                        "IndexError: list index out of range"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "run_broken_with_python_tutor"
    },
    {
        "get_solution": "program",
        "page": "Modificar Mientras se Itera",
        "program": [
            "numeros = [10, 7, 8, 3, 12, 15]",
            "for numero in numeros:",
            "    if numero <= 10:",
            "        numeros.remove(numero)",
            "print(numeros)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[7, 3, 12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "remove_instead_of_pop"
    },
    {
        "get_solution": "program",
        "page": "Modificar Mientras se Itera",
        "program": [
            "numeros = [10, 7, 8, 3, 12, 15]",
            "for numero in numeros.copy():",
            "    if numero <= 10:",
            "        numeros.remove(numero)",
            "print(numeros)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_copy"
    },
    {
        "get_solution": "program",
        "page": "Modificar Mientras se Itera",
        "program": [
            "numeros = [10, 7, 8, 3, 12, 15]",
            "numeros_grandes = numeros.copy()",
            "",
            "for numero in numeros:",
            "    if numero <= 10:",
            "        numeros_grandes.remove(numero)",
            "print(numeros_grandes)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_copy2"
    },
    {
        "get_solution": "program",
        "page": "Modificar Mientras se Itera",
        "program": [
            "numeros = [10, 7, 8, 3, 12, 15]",
            "numeros_grandes = []",
            "",
            "for numero in numeros:",
            "    if numero > 10:",
            "        numeros_grandes.append(numero)",
            "print(numeros_grandes)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_new_list"
    },
    {
        "get_solution": "program",
        "page": "Comillas simples y dobles en las cadenas",
        "program": [
            "print('Alice's Diner')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Un <code>SyntaxError</code> ocurre cuando Python no puede entender tu c\u00f3digo.</p>\n<p>I suspect that you were trying to use a quote character inside a string\nthat was enclosed in quotes of the same kind.\nPerhaps you should have escaped the inner quote character:</p>\n<pre><code>print('Alice\\'s Diner')\n            ^^\n</code></pre>",
                    "text": "    print('Alice's Diner')\n                        ^\nSyntaxError: unterminated string literal (detected at line 1)\nen la l\u00ednea 1\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "single_quotes_apostrophe"
    },
    {
        "get_solution": "program",
        "page": "Comillas simples y dobles en las cadenas",
        "program": [
            "print(\"Alice's Diner\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Alice's Diner\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_quotes"
    },
    {
        "get_solution": "program",
        "page": "Comillas simples y dobles en las cadenas",
        "program": [
            "'Alicia' == \"Alicia\""
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "single_double_quotes_equal"
    },
    {
        "get_solution": "program",
        "page": "Comillas simples y dobles en las cadenas",
        "program": [
            "print(\"Conoc\u00ed al profesor D'Annunzio\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Conoc\u00ed al profesor D'Annunzio\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_quote_exercise"
    },
    {
        "get_solution": "program",
        "page": "Comillas simples y dobles en las cadenas",
        "program": [
            "print('\"Hablar es f\u00e1cil. Mu\u00e9strame el c\u00f3digo.\" - Linus Torvalds')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "\"Hablar es f\u00e1cil. Mu\u00e9strame el c\u00f3digo.\" - Linus Torvalds\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "single_quote_exercise"
    },
    {
        "get_solution": "program",
        "page": "f-strings",
        "program": [
            "nombre = \"Alicia\"",
            "amigo = 'Bob'",
            "comida = \"almuerzo\"",
            "print(f\"{nombre} fue a {comida} con {amigo}.\")"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Alicia fue a almuerzo con Bob.",
                "choices": [
                    "f\"{nombre} fue a {comida} con {amigo}.\"",
                    "\"{nombre} fue a {comida} con {amigo}.\"",
                    "{nombre} fue a {comida} con {amigo}.",
                    "'nombre' fue a 'comida' con 'amigo'.",
                    "nombre fue a comida con amigo.",
                    "\"Alicia\" fue a \"almuerzo\" con 'Bob'.",
                    "'Alicia' fue a 'almuerzo' con 'Bob'.",
                    "\"Alicia fue a almuerzo con Bob.\"",
                    "Alicia fue a almuerzo con Bob.",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Alicia fue a almuerzo con Bob.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introduce_f_strings"
    },
    {
        "get_solution": "program",
        "page": "f-strings",
        "program": [
            "nombre = \"Alicia\"",
            "edad = 20",
            "print(\"Hola \" + nombre + \". T\u00fa tienes \" + edad + \" a\u00f1os.\")"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Error",
                "choices": [
                    "\"Hola \" + nombre + \". T\u00fa tienes es \" + edad + \" a\u00f1os.\"",
                    "Hola nombre. T\u00fa tienes edad a\u00f1os.",
                    "Hola Alicia. T\u00fa tienes 20 a\u00f1os.",
                    "Hola 'Alicia'. T\u00fa tienes 20 a\u00f1os.",
                    "Error"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "can only concatenate str (not \"int\") to str",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 3,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 3,
                                            "text": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2 s2-ExecutingNode\">&quot;Hola &quot;</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"n n-ExecutingNode\">nombre</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"s2 s2-ExecutingNode\">&quot;. T\u00fa tienes &quot;</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"n n-ExecutingNode\">edad</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; a\u00f1os.&quot;</span><span class=\"p\">)</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"s2\">&quot;Hola &quot;</span> <span class=\"o\">+</span> <span class=\"n\">nombre</span>\n",
                                            "value": "<span class=\"s1\">&#39;Hola Alicia&#39;</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"s2\">&quot;Hola &quot;</span> <span class=\"o\">+</span> <span class=\"n\">nombre</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;. T\u00fa tienes &quot;</span>\n",
                                            "value": "<span class=\"s1\">&#39;Hola Alicia. T\u00fa tienes &#39;</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">edad</span>\n",
                                            "value": "<span class=\"mi\">20</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">nombre</span>\n",
                                            "value": "<span class=\"s1\">&#39;Alicia&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Un <code>TypeError</code> suele producirse al intentar\ncombinar dos tipos de objetos incompatibles,\npor llamar a una funci\u00f3n con el tipo de objeto equivocado,\no por intentar realizar una operaci\u00f3n no permitida en un tipo de objeto determinado.</p>\n<p>Has intentado concatenar (sumar) dos tipos de objetos diferentes:\n<code>un string (</code>str<code>)</code> y <code>un n\u00famero entero (</code>int<code>)</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 3, in <module>",
                        "       2 | edad = 20",
                        "-->    3 | print(\"Hola \" + nombre + \". T\u00fa tienes \" + edad + \" a\u00f1os.\")",
                        "                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
                        "\"Hola \" + nombre = 'Hola Alicia'",
                        "\"Hola \" + nombre + \". T\u00fa tienes \" = 'Hola Alicia. T\u00fa tienes '",
                        "edad = 20",
                        "nombre = 'Alicia'",
                        "",
                        "TypeError: can only concatenate str (not \"int\") to str"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "concatenate_string_number"
    },
    {
        "get_solution": "program",
        "page": "f-strings",
        "program": [
            "nombre = \"Alicia\"",
            "edad = 20",
            "print(f'Hola {nombre}. T\u00fa tienes {edad} a\u00f1os.')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Hola Alicia. T\u00fa tienes 20 a\u00f1os.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "basic_f_string_exercise"
    },
    {
        "get_solution": "program",
        "page": "f-strings",
        "program": [
            "f\"2 * 3 + 4 es igual a {2 * 3 + 4}\""
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'2 * 3 + 4 es igual a 10'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "eval_expr_inside_f_string"
    },
    {
        "get_solution": [
            "print(f\"Hay {len(personas)} personas esperando, el nombre de la primera es {personas[0]}.\")"
        ],
        "page": "f-strings",
        "program": [
            "personas = ['Alice', 'Bob', 'Charlie']",
            "print(f\"Hay {len(personas)} personas esperando, el nombre de la primera es {personas[0]}.\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Hay 3 personas esperando, el nombre de la primera es Alice.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "fix_broken_program"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "for letra in \"ABC\":",
            "    print(letra)",
            "    for numero in range(4):",
            "        print(f'{letra} {numero}')",
            "    print('---')"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---",
                "choices": [
                    "A 0\nA 1\nA 2\nA 3\n---\nB 0\nB 1\nB 2\nB 3\n---\nC 0\nC 1\nC 2\nC 3\n---",
                    "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---",
                    "A 1\nA 2\nA 3\nA 4\n---\nB 1\nB 2\nB 3\nB 4\n---\nC 1\nC 2\nC 3\nC 4\n---",
                    "A\nB\nC\n---\nA 0\nB 0\nC 0\n---\nA 1\nB 1\nC 1\n---\nA 2\nB 2\nC 2\n---\nA 3\nB 3\nC 3",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_nested_loop"
    },
    {
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "print(1 + \"x\")"
        ],
        "response": {
            "message": "<p>No puedes unir cadenas con n\u00fameros. Usa un f-string.</p>",
            "passed": false,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "unsupported operand type(s) for +: 'int' and 'str'",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi mi-ExecutingNode\">1</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"s2 s2-ExecutingNode\">&quot;x&quot;</span><span class=\"p\">)</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>Un <code>TypeError</code> suele producirse al intentar\ncombinar dos tipos de objetos incompatibles,\npor llamar a una funci\u00f3n con el tipo de objeto equivocado,\no por intentar realizar una operaci\u00f3n no permitida en un tipo de objeto determinado.</p>\n<p>Has intentado a\u00f1adir dos tipos de objetos incompatibles:\n<code>un n\u00famero entero (</code>int<code>)</code> y <code>un string (</code>str<code>)</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | print(1 + \"x\")",
                        "                 ^^^^^^^",
                        "",
                        "TypeError: unsupported operand type(s) for +: 'int' and 'str'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "for izquierda in range(12):",
            "    for derecha in range(12):",
            "        izquierda += 1",
            "        derecha += 1",
            "        print(f'{izquierda} x {derecha} = {izquierda * derecha}')",
            "    print('---')"
        ],
        "response": {
            "message": "<p>\u00a1Le sumaste 1 a la variable de tu bucle exterior en el lugar equivocado! \u00bfD\u00f3nde deber\u00edas hacer eso para corregir el c\u00f3digo?</p>",
            "passed": false,
            "result": [
                {
                    "text": "1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n4 x 4 = 16\n5 x 5 = 25\n6 x 6 = 36\n7 x 7 = 49\n8 x 8 = 64\n9 x 9 = 81\n10 x 10 = 100\n11 x 11 = 121\n12 x 12 = 144\n---\n2 x 1 = 2\n3 x 2 = 6\n4 x 3 = 12\n5 x 4 = 20\n6 x 5 = 30\n7 x 6 = 42\n8 x 7 = 56\n9 x 8 = 72\n10 x 9 = 90\n11 x 10 = 110\n12 x 11 = 132\n13 x 12 = 156\n---\n3 x 1 = 3\n4 x 2 = 8\n5 x 3 = 15\n6 x 4 = 24\n7 x 5 = 35\n8 x 6 = 48\n9 x 7 = 63\n10 x 8 = 80\n11 x 9 = 99\n12 x 10 = 120\n13 x 11 = 143\n14 x 12 = 168\n---\n4 x 1 = 4\n5 x 2 = 10\n6 x 3 = 18\n7 x 4 = 28\n8 x 5 = 40\n9 x 6 = 54\n10 x 7 = 70\n11 x 8 = 88\n12 x 9 = 108\n13 x 10 = 130\n14 x 11 = 154\n15 x 12 = 180\n---\n5 x 1 = 5\n6 x 2 = 12\n7 x 3 = 21\n8 x 4 = 32\n9 x 5 = 45\n10 x 6 = 60\n11 x 7 = 77\n12 x 8 = 96\n13 x 9 = 117\n14 x 10 = 140\n15 x 11 = 165\n16 x 12 = 192\n---\n6 x 1 = 6\n7 x 2 = 14\n8 x 3 = 24\n9 x 4 = 36\n10 x 5 = 50\n11 x 6 = 66\n12 x 7 = 84\n13 x 8 = 104\n14 x 9 = 126\n15 x 10 = 150\n16 x 11 = 176\n17 x 12 = 204\n---\n7 x 1 = 7\n8 x 2 = 16\n9 x 3 = 27\n10 x 4 = 40\n11 x 5 = 55\n12 x 6 = 72\n13 x 7 = 91\n14 x 8 = 112\n15 x 9 = 135\n16 x 10 = 160\n17 x 11 = 187",
                    "type": "stdout"
                },
                {
                    "text": "\n18 x 12 = 216\n---\n8 x 1 = 8\n9 x 2 = 18\n10 x 3 = 30\n11 x 4 = 44\n12 x 5 = 60\n13 x 6 = 78\n14 x 7 = 98\n15 x 8 = 120\n16 x 9 = 144\n17 x 10 = 170\n18 x 11 = 198\n19 x 12 = 228\n---\n9 x 1 = 9\n10 x 2 = 20\n11 x 3 = 33\n12 x 4 = 48\n13 x 5 = 65\n14 x 6 = 84\n15 x 7 = 105\n16 x 8 = 128\n17 x 9 = 153\n18 x 10 = 180\n19 x 11 = 209\n20 x 12 = 240\n---\n10 x 1 = 10\n11 x 2 = 22\n12 x 3 = 36\n13 x 4 = 52\n14 x 5 = 70\n15 x 6 = 90\n16 x 7 = 112\n17 x 8 = 136\n18 x 9 = 162\n19 x 10 = 190\n20 x 11 = 220\n21 x 12 = 252\n---\n11 x 1 = 11\n12 x 2 = 24\n13 x 3 = 39\n14 x 4 = 56\n15 x 5 = 75\n16 x 6 = 96\n17 x 7 = 119\n18 x 8 = 144\n19 x 9 = 171\n20 x 10 = 200\n21 x 11 = 231\n22 x 12 = 264\n---\n12 x 1 = 12\n13 x 2 = 26\n14 x 3 = 42\n15 x 4 = 60\n16 x 5 = 80\n17 x 6 = 102\n18 x 7 = 126\n19 x 8 = 152\n20 x 9 = 180\n21 x 10 = 210\n22 x 11 = 242\n23 x 12 = 276\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "for izquierda in range(12):",
            "    izquierda += 1",
            "    print(izquierda, 'x 1 =', izquierda * 1)",
            "    print(izquierda, 'x 2 =', izquierda * 2)",
            "    print(izquierda, 'x 3 =', izquierda * 3)",
            "    print(izquierda, 'x 4 =', izquierda * 4)",
            "    print(izquierda, 'x 5 =', izquierda * 5)",
            "    print(izquierda, 'x 6 =', izquierda * 6)",
            "    print(izquierda, 'x 7 =', izquierda * 7)",
            "    print(izquierda, 'x 8 =', izquierda * 8)",
            "    print(izquierda, 'x 9 =', izquierda * 9)",
            "    print(izquierda, 'x 10 =', izquierda * 10)",
            "    print(izquierda, 'x 11 =', izquierda * 11)",
            "    print(izquierda, 'x 12 =', izquierda * 12)",
            "    print('---')"
        ],
        "response": {
            "message": "<p>Tu soluci\u00f3n es demasiado larga. Necesitas solo unas pocas l\u00edneas de c\u00f3digo para este problema.\nUsa un bucle anidado para no tener que repetir tu c\u00f3digo.\n\u00a1La computadora har\u00e1 las repeticiones por ti!</p>",
            "passed": false,
            "result": [
                {
                    "text": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\n1 x 11 = 11\n1 x 12 = 12\n---\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20\n2 x 11 = 22\n2 x 12 = 24\n---\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n3 x 11 = 33\n3 x 12 = 36\n---\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n4 x 10 = 40\n4 x 11 = 44\n4 x 12 = 48\n---\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50\n5 x 11 = 55\n5 x 12 = 60\n---\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n6 x 10 = 60\n6 x 11 = 66\n6 x 12 = 72\n---\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n7 x 11 = 77\n7 x 12 = 84\n---\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 =",
                    "type": "stdout"
                },
                {
                    "text": " 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n8 x 10 = 80\n8 x 11 = 88\n8 x 12 = 96\n---\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n9 x 10 = 90\n9 x 11 = 99\n9 x 12 = 108\n---\n10 x 1 = 10\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100\n10 x 11 = 110\n10 x 12 = 120\n---\n11 x 1 = 11\n11 x 2 = 22\n11 x 3 = 33\n11 x 4 = 44\n11 x 5 = 55\n11 x 6 = 66\n11 x 7 = 77\n11 x 8 = 88\n11 x 9 = 99\n11 x 10 = 110\n11 x 11 = 121\n11 x 12 = 132\n---\n12 x 1 = 12\n12 x 2 = 24\n12 x 3 = 36\n12 x 4 = 48\n12 x 5 = 60\n12 x 6 = 72\n12 x 7 = 84\n12 x 8 = 96\n12 x 9 = 108\n12 x 10 = 120\n12 x 11 = 132\n12 x 12 = 144\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "for izquierda in range(12):",
            "    izquierda += 1",
            "    for derecha in range(12):",
            "        derecha += 1",
            "        # for the sake of translation",
            "        print(f'{izquierda} x {derecha} = {izquierda * derecha}'.replace('x', '*'))",
            "    print('---')"
        ],
        "response": {
            "message": "<p>\u00a1Eso es casi correcto! Aseg\u00farate de mostrar el caracter correcto <code>x</code> en tu tabla.\nPor ejemplo, tu soluci\u00f3n debe mostrar <code>3 x 4 = 12</code> y no <code>3 * 4 = 12</code>.</p>",
            "passed": false,
            "result": [
                {
                    "text": "1 * 1 = 1\n1 * 2 = 2\n1 * 3 = 3\n1 * 4 = 4\n1 * 5 = 5\n1 * 6 = 6\n1 * 7 = 7\n1 * 8 = 8\n1 * 9 = 9\n1 * 10 = 10\n1 * 11 = 11\n1 * 12 = 12\n---\n2 * 1 = 2\n2 * 2 = 4\n2 * 3 = 6\n2 * 4 = 8\n2 * 5 = 10\n2 * 6 = 12\n2 * 7 = 14\n2 * 8 = 16\n2 * 9 = 18\n2 * 10 = 20\n2 * 11 = 22\n2 * 12 = 24\n---\n3 * 1 = 3\n3 * 2 = 6\n3 * 3 = 9\n3 * 4 = 12\n3 * 5 = 15\n3 * 6 = 18\n3 * 7 = 21\n3 * 8 = 24\n3 * 9 = 27\n3 * 10 = 30\n3 * 11 = 33\n3 * 12 = 36\n---\n4 * 1 = 4\n4 * 2 = 8\n4 * 3 = 12\n4 * 4 = 16\n4 * 5 = 20\n4 * 6 = 24\n4 * 7 = 28\n4 * 8 = 32\n4 * 9 = 36\n4 * 10 = 40\n4 * 11 = 44\n4 * 12 = 48\n---\n5 * 1 = 5\n5 * 2 = 10\n5 * 3 = 15\n5 * 4 = 20\n5 * 5 = 25\n5 * 6 = 30\n5 * 7 = 35\n5 * 8 = 40\n5 * 9 = 45\n5 * 10 = 50\n5 * 11 = 55\n5 * 12 = 60\n---\n6 * 1 = 6\n6 * 2 = 12\n6 * 3 = 18\n6 * 4 = 24\n6 * 5 = 30\n6 * 6 = 36\n6 * 7 = 42\n6 * 8 = 48\n6 * 9 = 54\n6 * 10 = 60\n6 * 11 = 66\n6 * 12 = 72\n---\n7 * 1 = 7\n7 * 2 = 14\n7 * 3 = 21\n7 * 4 = 28\n7 * 5 = 35\n7 * 6 = 42\n7 * 7 = 49\n7 * 8 = 56\n7 * 9 = 63\n7 * 10 = 70\n7 * 11 = 77\n7 * 12 = 84\n---\n8 * 1 = 8\n8 * 2 = 16\n8 * 3 = 24\n8 * 4 = 32\n8 * 5 = 40",
                    "type": "stdout"
                },
                {
                    "text": "\n8 * 6 = 48\n8 * 7 = 56\n8 * 8 = 64\n8 * 9 = 72\n8 * 10 = 80\n8 * 11 = 88\n8 * 12 = 96\n---\n9 * 1 = 9\n9 * 2 = 18\n9 * 3 = 27\n9 * 4 = 36\n9 * 5 = 45\n9 * 6 = 54\n9 * 7 = 63\n9 * 8 = 72\n9 * 9 = 81\n9 * 10 = 90\n9 * 11 = 99\n9 * 12 = 108\n---\n10 * 1 = 10\n10 * 2 = 20\n10 * 3 = 30\n10 * 4 = 40\n10 * 5 = 50\n10 * 6 = 60\n10 * 7 = 70\n10 * 8 = 80\n10 * 9 = 90\n10 * 10 = 100\n10 * 11 = 110\n10 * 12 = 120\n---\n11 * 1 = 11\n11 * 2 = 22\n11 * 3 = 33\n11 * 4 = 44\n11 * 5 = 55\n11 * 6 = 66\n11 * 7 = 77\n11 * 8 = 88\n11 * 9 = 99\n11 * 10 = 110\n11 * 11 = 121\n11 * 12 = 132\n---\n12 * 1 = 12\n12 * 2 = 24\n12 * 3 = 36\n12 * 4 = 48\n12 * 5 = 60\n12 * 6 = 72\n12 * 7 = 84\n12 * 8 = 96\n12 * 9 = 108\n12 * 10 = 120\n12 * 11 = 132\n12 * 12 = 144\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "pass",
            "3 x 4"
        ],
        "response": {
            "message": "<p>Para multiplicar n\u00fameros, utiliza <code>*</code></p>",
            "passed": false,
            "result": [
                {
                    "friendly": "<p>Un <code>SyntaxError</code> ocurre cuando Python no puede entender tu c\u00f3digo.</p>\n<p>Actualmente, no puedo detectar la causa probable de este error.\nIntente examinar detenidamente la l\u00ednea indicada, as\u00ed como la l\u00ednea\ninmediatamente superior para ver si puede identificar alguna palabra mal escrita\no s\u00edmbolos que falten, como (, ), [, ], :, etc.</p>\n<p>A menos que su c\u00f3digo utilice anotaciones de tipo, que est\u00e1n fuera de nuestro alcance,\nsi cree que esto es algo que deber\u00eda ser manejado\npor friendly, por favor reporte este caso a\nhttps://github.com/friendly-traceback/friendly-traceback/issues</p>",
                    "text": "    3 x 4\n      ^\nSyntaxError: invalid syntax\nen la l\u00ednea 2\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "for izquierda in range(12):",
            "    izquierda += 1",
            "    for derecha in range(12):",
            "        derecha += 1",
            "        print(f'{izquierda} x {derecha} = {izquierda * derecha}')",
            "    print('---')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\n1 x 11 = 11\n1 x 12 = 12\n---\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20\n2 x 11 = 22\n2 x 12 = 24\n---\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n3 x 11 = 33\n3 x 12 = 36\n---\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n4 x 10 = 40\n4 x 11 = 44\n4 x 12 = 48\n---\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50\n5 x 11 = 55\n5 x 12 = 60\n---\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n6 x 10 = 60\n6 x 11 = 66\n6 x 12 = 72\n---\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n7 x 11 = 77\n7 x 12 = 84\n---\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40",
                    "type": "stdout"
                },
                {
                    "text": "\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n8 x 10 = 80\n8 x 11 = 88\n8 x 12 = 96\n---\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n9 x 10 = 90\n9 x 11 = 99\n9 x 12 = 108\n---\n10 x 1 = 10\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100\n10 x 11 = 110\n10 x 12 = 120\n---\n11 x 1 = 11\n11 x 2 = 22\n11 x 3 = 33\n11 x 4 = 44\n11 x 5 = 55\n11 x 6 = 66\n11 x 7 = 77\n11 x 8 = 88\n11 x 9 = 99\n11 x 10 = 110\n11 x 11 = 121\n11 x 12 = 132\n---\n12 x 1 = 12\n12 x 2 = 24\n12 x 3 = 36\n12 x 4 = 48\n12 x 5 = 60\n12 x 6 = 72\n12 x 7 = 84\n12 x 8 = 96\n12 x 9 = 108\n12 x 10 = 120\n12 x 11 = 132\n12 x 12 = 144\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "get_solution": [
            "for jugador1 in jugadores:",
            "    for jugador2 in jugadores:",
            "        if jugador1 != jugador2:",
            "            print(f'{jugador1} vs {jugador2}')"
        ],
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "jugadores = ['Alice', 'Bob', 'Charlie']",
            "for jugador1 in jugadores:",
            "    for jugador2 in jugadores:",
            "        if jugador1 != jugador2:",
            "            print(f'{jugador1} vs {jugador2}')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Alice vs Bob\nAlice vs Charlie\nBob vs Alice\nBob vs Charlie\nCharlie vs Alice\nCharlie vs Bob\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "player_vs_player_exercise"
    },
    {
        "get_solution": [
            "for c1 in letras:",
            "    for c2 in letras:",
            "        for c3 in letras:",
            "            for c4 in letras:",
            "                print(c1 + c2 + c3 + c4)"
        ],
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "letras = 'AB'",
            "for c1 in letras:",
            "    for c2 in letras:",
            "        for c3 in letras:",
            "            for c4 in letras:",
            "                print(c1 + c2 + c3 + c4)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "AAAA\nAAAB\nAABA\nAABB\nABAA\nABAB\nABBA\nABBB\nBAAA\nBAAB\nBABA\nBABB\nBBAA\nBBAB\nBBBA\nBBBB\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "crack_password_exercise"
    },
    {
        "get_solution": [
            "for i in range(tamano):",
            "    largo = tamano - i",
            "    linea = ''",
            "    for _ in range(largo):",
            "        linea += '+'",
            "    print(linea)"
        ],
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "tamano = 3",
            "for i in range(tamano):",
            "    largo = tamano - i",
            "    linea = ''",
            "    for _ in range(largo):",
            "        linea += '+'",
            "    print(linea)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "+++\n++\n+\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "upside_down_triangle_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(jugadores)):",
            "    for j in range(len(jugadores)):",
            "        if i < j:",
            "            print(f'{jugadores[i]} vs {jugadores[j]}')"
        ],
        "page": "Introducci\u00f3n a los bucles anidados",
        "program": [
            "jugadores = ['Alice', 'Bob', 'Charlie']",
            "for i in range(len(jugadores)):",
            "    for j in range(len(jugadores)):",
            "        if i < j:",
            "            print(f'{jugadores[i]} vs {jugadores[j]}')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Alice vs Bob\nAlice vs Charlie\nBob vs Charlie\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "player_vs_player_bonus"
    },
    {
        "get_solution": "program",
        "page": "Comprensi\u00f3n de programas con <code>birdseye</code>",
        "program": [
            "a = 2",
            "b = 3",
            "c = 4",
            "d = 5",
            "print(a * b + c * d)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "26\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_birdseye_example"
    },
    {
        "get_solution": "program",
        "page": "Comprensi\u00f3n de programas con <code>birdseye</code>",
        "program": [
            "palabra = 'Sorprendente'",
            "vocales = []",
            "consonantes = []",
            "for letra in palabra:",
            "    if letra.lower() in 'aeiou':",
            "        vocales.append(letra)",
            "    else:",
            "        consonantes.append(letra)",
            "print(vocales)",
            "print(consonantes)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "['o', 'e', 'e', 'e']\n['S', 'r', 'p', 'r', 'n', 'd', 'n', 't']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "birdseye_loop_example"
    },
    {
        "get_solution": [
            "cadena = cadenas[1]",
            "print(cadena[0])"
        ],
        "page": "Introducci\u00f3n a las Listas Anidadas",
        "program": [
            "cadenas = ['abc', 'def', 'ghi']",
            "cadena = cadenas[1]",
            "print(cadena[0])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_list_exercise"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las Listas Anidadas",
        "program": [
            "cadenas = [\"abc\", \"def\", \"ghi\"]",
            "print(cadenas[1][0])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_subscripting"
    },
    {
        "get_solution": [
            "print(cadenas[-2][-1])"
        ],
        "page": "Introducci\u00f3n a las Listas Anidadas",
        "program": [
            "cadenas = ['abc', 'de', 'fghi', 'jklmn', 'o']",
            "print(cadenas[-2][-1])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "n\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_subscripting_exercise"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a las Listas Anidadas",
        "program": [
            "cadenas = [['hola', 'todos'], ['como', 'estas', 'tu']]",
            "print(cadenas[1][0])"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "como",
                "choices": [
                    "hola",
                    "todos",
                    "como",
                    "tu",
                    "estas",
                    "['hola', 'todos']",
                    "['como', 'estas', 'tu']",
                    "h",
                    "t",
                    "c",
                    "o",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "como\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_nested_list_example"
    },
    {
        "get_solution": [
            "print(cadenas[1][2][0])"
        ],
        "page": "Introducci\u00f3n a las Listas Anidadas",
        "program": [
            "cadenas = [['hello', 'there'], ['how', 'are', 'you']]",
            "print(cadenas[1][2][0])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "y\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "triple_subscripting"
    },
    {
        "get_solution": "program",
        "page": "Iterando sobre Listas Anidadas",
        "program": [
            "numeros = [[1, 2, 3], [4, 5], [6], []]",
            "for sublista in numeros:",
            "    for num in sublista:",
            "        print(num)",
            "    print('---')"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "1\n2\n3\n---\n4\n5\n---\n6\n---\n---",
                "choices": [
                    "1\n---\n2\n---\n3\n---\n4\n---\n5\n---\n6\n---",
                    "1\n2\n3\n---\n4\n5\n---\n6\n---\n---",
                    "1\n2\n3\n---\n4\n5\n---\n6\n---",
                    "1 2 3\n---\n4 5\n---\n6\n---\n---",
                    "1 2 3\n---\n4 5\n---\n6\n---",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "1\n2\n3\n---\n4\n5\n---\n6\n---\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_list_nested_loop_example"
    },
    {
        "get_solution": "program",
        "page": "Iterando sobre Listas Anidadas",
        "program": [
            "numeros = [[1, 2, 3], [4, 5], [6], []]",
            "for sublista in numeros:",
            "    for num in sublista:",
            "        print(num)",
            "    print('---')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "1\n2\n3\n---\n4\n5\n---\n6\n---\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_list_loop_python_tutor"
    },
    {
        "get_solution": [
            "for sublista in cadenas:",
            "    for cadena in sublista:",
            "        if palabra in cadena:",
            "            print(cadena)"
        ],
        "page": "Iterando sobre Listas Anidadas",
        "program": [
            "cadenas = [['hello there', 'how are you'], ['goodbye world', 'hello world']]",
            "palabra = 'hello'",
            "for sublista in cadenas:",
            "    for cadena in sublista:",
            "        if palabra in cadena:",
            "            print(cadena)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "hello there\nhello world\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_contains_word_exercise"
    },
    {
        "get_solution": [
            "for sublista in cadenas:",
            "    presente = False",
            "    for cadena in sublista:",
            "        if palabra in cadena:",
            "            presente = True",
            "    print(presente)"
        ],
        "page": "Iterando sobre Listas Anidadas",
        "program": [
            "cadenas = [['hello there', 'how are you'], ['goodbye world', 'hello world']]",
            "palabra = 'goodbye'",
            "for sublista in cadenas:",
            "    presente = False",
            "    for cadena in sublista:",
            "        if palabra in cadena:",
            "            presente = True",
            "    print(presente)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "False\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sublist_contains_word_exercise"
    },
    {
        "get_solution": [
            "presente = False",
            "for sublista in cadenas:",
            "    for cadena in sublista:",
            "        if palabra in cadena:",
            "            presente = True",
            "print(presente)"
        ],
        "page": "Iterando sobre Listas Anidadas",
        "program": [
            "cadenas = [['hello there', 'how are you'], ['goodbye world', 'hello world']]",
            "palabra = 'are'",
            "presente = False",
            "for sublista in cadenas:",
            "    for cadena in sublista:",
            "        if palabra in cadena:",
            "            presente = True",
            "print(presente)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "list_contains_word_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(cadenas[0])):",
            "    linea = \"\"",
            "    for cadena in cadenas:",
            "        linea += cadena[i]",
            "    print(linea)"
        ],
        "page": "Iterando sobre Listas Anidadas",
        "program": [
            "cadenas = ['abc', 'def', 'ghi']",
            "for i in range(len(cadenas[0])):",
            "    linea = \"\"",
            "    for cadena in cadenas:",
            "        linea += cadena[i]",
            "    print(linea)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "adg\nbeh\ncfi\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_strings_list_exercise"
    },
    {
        "get_solution": [
            "largos = []",
            "for cadena in cadenas:",
            "    largos.append(len(cadena))",
            "largo = max(largos)",
            "",
            "for i in range(largo):",
            "    linea = \"\"",
            "    for cadena in cadenas:",
            "        if i >= len(cadena):",
            "            linea += \" \"",
            "        else:",
            "            linea += cadena[i]",
            "    print(linea)"
        ],
        "page": "Iterando sobre Listas Anidadas",
        "program": [
            "cadenas = ['abcqwe', 'def', 'ghiq']",
            "largos = []",
            "for cadena in cadenas:",
            "    largos.append(len(cadena))",
            "largo = max(largos)",
            "",
            "for i in range(largo):",
            "    linea = \"\"",
            "    for cadena in cadenas:",
            "        if i >= len(cadena):",
            "            linea += \" \"",
            "        else:",
            "            linea += cadena[i]",
            "    print(linea)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "adg\nbeh\ncfi\nq q\nw  \ne  \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_longest_strings_exercise"
    },
    {
        "get_solution": "program",
        "page": "Definiendo Funciones",
        "program": [
            "def saludo(nombre):",
            "    print(f\"\u00a1Hola {nombre}!\")",
            "",
            "saludo(\"Alicia\")",
            "saludo(\"Bob\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "\u00a1Hola Alicia!\n\u00a1Hola Bob!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "define_greet"
    },
    {
        "get_solution": "program",
        "page": "Definiendo Funciones",
        "program": [
            "def saludo(nombre):",
            "    print(f\"\u00a1Hola {nombre}!\")",
            "    print(\"\u00bfC\u00f3mo est\u00e1s?\")",
            "",
            "saludo(\"Alicia\")",
            "saludo(\"Bob\")"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "\u00a1Hola Alicia!\n\u00bfC\u00f3mo est\u00e1s?\n\u00a1Hola Bob!\n\u00bfC\u00f3mo est\u00e1s?",
                "choices": [
                    "\u00a1Hola Alicia!\n\u00bfC\u00f3mo est\u00e1s?\n\u00a1Hola Bob!\n\u00bfC\u00f3mo est\u00e1s?",
                    "\u00a1Hola Alicia!\n\u00a1Hola Bob!\n\u00bfC\u00f3mo est\u00e1s?",
                    "\u00a1Hola Alicia!\n\u00bfC\u00f3mo est\u00e1s?\n\u00a1Hola Bob!",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "\u00a1Hola Alicia!\n\u00bfC\u00f3mo est\u00e1s?\n\u00a1Hola Bob!\n\u00bfC\u00f3mo est\u00e1s?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "how_are_you"
    },
    {
        "get_solution": "program",
        "page": "Definiendo Funciones",
        "program": [
            "def di_hola(nombre):",
            "    print(f\"\u00a1Hola {nombre}!\")",
            "    print(\"\u00bfC\u00f3mo est\u00e1s?\")",
            "",
            "di_hola(\"Alicia\")",
            "di_hola(\"Bob\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "\u00a1Hola Alicia!\n\u00bfC\u00f3mo est\u00e1s?\n\u00a1Hola Bob!\n\u00bfC\u00f3mo est\u00e1s?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "change_function_name"
    },
    {
        "get_solution": "program",
        "page": "Definiendo Funciones",
        "program": [
            "def di_hola(nombre_persona):",
            "    print(f\"\u00a1Hola {nombre_persona}!\")",
            "    print(\"\u00bfC\u00f3mo est\u00e1s?\")",
            "",
            "di_hola(\"Alicia\")",
            "di_hola(\"Bob\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "\u00a1Hola Alicia!\n\u00bfC\u00f3mo est\u00e1s?\n\u00a1Hola Bob!\n\u00bfC\u00f3mo est\u00e1s?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "change_parameter_name"
    },
    {
        "get_solution": "program",
        "page": "Definiendo Funciones",
        "program": [
            "def imprimir_doble(x):",
            "    print(x)",
            "    print(x)"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "print_twice_exercise"
    },
    {
        "get_solution": "program",
        "page": "Definiendo Funciones",
        "program": [
            "def imprimir_varios(cosa, n):",
            "    for _ in range(n):",
            "        print(cosa)",
            "",
            "imprimir_varios(\"Hola\", 3)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Hola\nHola\nHola",
                "choices": [
                    "3\n3\n3",
                    "3",
                    "Hola\nHola\nHola",
                    "Hola",
                    "H\no\nl\na",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hola\nHola\nHola\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_many"
    },
    {
        "get_solution": "program",
        "page": "Definiendo Funciones",
        "program": [
            "def imprimir_varios(n, cosa):",
            "    for _ in range(n):",
            "        print(cosa)",
            "",
            "imprimir_varios(3, \"Hola\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Hola\nHola\nHola\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "swap_parameters"
    },
    {
        "get_solution": "program",
        "page": "Llamando funciones dentro de funciones",
        "program": [
            "def imprimir_varios(n, cosa):",
            "    for _ in range(n):",
            "        print(cosa)",
            "",
            "def imprimir_doble(x):",
            "    imprimir_varios(2, x)",
            "",
            "imprimir_doble(\"Hola\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Hola\nHola\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_twice_call_print_many"
    },
    {
        "get_solution": "program",
        "page": "Llamando funciones dentro de funciones",
        "program": [
            "def imprimir_varios(n, cosa):",
            "    for _ in range(n):",
            "        print(cosa)",
            "",
            "def imprimir_doble(x):",
            "    imprimir_varios(2, x)",
            "",
            "imprimir_doble(\"Hola\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   1\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148mimprimir_varios\u001b[39m(n, cosa):\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148mimprimir_doble\u001b[39m(x):\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m | imprimir_doble(\u001b[38;5;186m\"\u001b[39m\u001b[38;5;186mHola\u001b[39m\u001b[38;5;186m\"\u001b[39m)\n\u001b[38;5;242m     \u001b[0m\u001b[36m\u001b[1m>>> Call to imprimir_doble in File \"/my_program.py\", line 5\u001b[0m\n\u001b[38;5;242m     \u001b[0m...... x = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mHola\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m     \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148mimprimir_doble\u001b[39m(x):\n\u001b[38;5;242m     \u001b[0m\u001b[38;5;242m   6\u001b[0m |     imprimir_varios(\u001b[38;5;141m2\u001b[39m, x)\n\u001b[38;5;242m         \u001b[0m\u001b[36m\u001b[1m>>> Call to imprimir_varios in File \"/my_program.py\", line 1\u001b[0m\n\u001b[38;5;242m         \u001b[0m...... n = \u001b[38;5;141m2\u001b[39m\n\u001b[38;5;242m         \u001b[0m...... cosa = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mHola\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   1\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148mimprimir_varios\u001b[39m(n, cosa):\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   2\u001b[0m |     \u001b[38;5;81mfor\u001b[39m _ \u001b[38;5;197min\u001b[39m range(n):\n\u001b[38;5;242m         \u001b[0m.......... _ = \u001b[38;5;141m0\u001b[39m\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   3\u001b[0m |         print(cosa)\n",
                    "type": "snoop"
                },
                {
                    "text": "Hola",
                    "type": "stdout"
                },
                {
                    "text": "\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   2\u001b[0m |     \u001b[38;5;81mfor\u001b[39m _ \u001b[38;5;197min\u001b[39m range(n):\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m.......... _ = \u001b[38;5;141m1\u001b[39m\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   3\u001b[0m |         print(cosa)\n",
                    "type": "snoop"
                },
                {
                    "text": "Hola",
                    "type": "stdout"
                },
                {
                    "text": "\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   2\u001b[0m |     \u001b[38;5;81mfor\u001b[39m _ \u001b[38;5;197min\u001b[39m range(n):\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[32m\u001b[1m<<< Return value from imprimir_varios: \u001b[0m\u001b[38;5;81mNone\u001b[39m\n\u001b[38;5;242m     \u001b[0m\u001b[38;5;242m   6\u001b[0m |     imprimir_varios(\u001b[38;5;141m2\u001b[39m, x)\n\u001b[38;5;242m     \u001b[0m\u001b[32m\u001b[1m<<< Return value from imprimir_doble: \u001b[0m\u001b[38;5;81mNone\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m | imprimir_doble(\u001b[38;5;186m\"\u001b[39m\u001b[38;5;186mHola\u001b[39m\u001b[38;5;186m\"\u001b[39m)\n",
                    "type": "snoop"
                }
            ]
        },
        "step": "see_stack_in_snoop"
    },
    {
        "get_solution": "program",
        "page": "Llamando funciones dentro de funciones",
        "program": [
            "def imprimir_varios(n, cosa):",
            "    for _ in range(n):",
            "        print(cosa)",
            "",
            "def imprimir_doble(x):",
            "    imprimir_varios(2, x)",
            "",
            "imprimir_doble(\"Hola\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Hola\nHola\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "see_stack_in_pythontutor"
    },
    {
        "get_solution": "program",
        "page": "Llamando funciones dentro de funciones",
        "program": [
            "def imprimir_varios(n, cosa):",
            "    for _ in range(n):",
            "        print(cosa)",
            "",
            "def imprimir_doble(x):",
            "    imprimir_varios(2, x)",
            "",
            "imprimir_doble(\"Hola\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Hola\nHola\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "see_stack_in_birdseye"
    },
    {
        "get_solution": "program",
        "page": "Devolviendo valores desde las funciones",
        "program": [
            "def doble(x):",
            "    return x * 2",
            "",
            "numero = 5",
            "duplicar = doble(numero)",
            "print(numero)",
            "print(duplicar)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "5\n10",
                "choices": [
                    "5\n5",
                    "5\n10",
                    "10\n10",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "5\n10\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_return"
    },
    {
        "get_solution": "program",
        "page": "Devolviendo valores desde las funciones",
        "program": [
            "def doble(x):",
            "    return x * 2",
            "",
            "numero = 5",
            "doble(numero)",
            "print(numero)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "5",
                "choices": [
                    "5",
                    "10",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "5\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "losing_return_value"
    },
    {
        "page": "Devolviendo valores desde las funciones",
        "program": [
            "def cuadruple(x):",
            "    return x * 4"
        ],
        "response": {
            "message": "<p>No puedes usar <code>*</code>, <code>+</code> ni ning\u00fan n\u00famero dentro de <code>cuadruple</code>. Debes llamar <code>doble</code> para resolver el problema.</p>",
            "passed": false,
            "result": []
        },
        "step": "quadruple_exercise"
    },
    {
        "get_solution": [
            "def cuadruple(x):",
            "    return doble(doble(x))"
        ],
        "page": "Devolviendo valores desde las funciones",
        "program": [
            "def doble(x):",
            "    return x * 2",
            "",
            "def cuadruple(x):",
            "    return doble(doble(x))"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "quadruple_exercise"
    },
    {
        "get_solution": "program",
        "page": "Probando Funciones",
        "program": [
            "def doble(x):",
            "    return x * 2",
            "",
            "assert_equal(doble(2), 4)",
            "assert_equal(doble(5), 10)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "OK\nOK",
                "choices": [
                    "Error! 4 != 4\nError! 10 != 10",
                    "Error! 2 != 4\nError! 5 != 10",
                    "Error! 2 != 4",
                    "OK\nOK",
                    "OK",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "OK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_assert_equal"
    },
    {
        "get_solution": "program",
        "page": "Probando Funciones",
        "program": [
            "def doble(x):",
            "    return x * 3",
            "",
            "assert_equal(doble(2), 4)",
            "assert_equal(doble(5), 10)"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Error! 6 != 4\nError! 15 != 10",
                "choices": [
                    "Error! 4 != 4\nError! 10 != 10",
                    "Error! 6 != 4\nError! 15 != 10",
                    "Error! 4 != 6\nError! 10 != 15",
                    "OK\nOK",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Error! 6 != 4\nError! 15 != 10\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_tests_fail"
    },
    {
        "get_solution": "program",
        "page": "Probando Funciones",
        "program": [
            "def doble(x):",
            "    return x * 2",
            "",
            "def cuadruple(x):",
            "    return doble(doble(x))",
            "",
            "assert_equal(cuadruple(2), 8)",
            "assert_equal(cuadruple(5), 20)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "complete_quadruple_tests"
    },
    {
        "get_solution": "program",
        "page": "Probando Funciones",
        "program": [
            "def rodear(cadena, lados):",
            "    return lados + cadena + lados"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "surround_exercise"
    },
    {
        "page": "Probando Funciones",
        "program": [
            "def rodear(cadena, lados):",
            "    return lados + cadena + lados",
            "",
            "def alerta(cadena, nivel):",
            "    cadena = rodear(cadena, ' ')",
            "    for _ in range(nivel):",
            "        cadena = rodear(cadena, '!')",
            "        return cadena"
        ],
        "response": {
            "message": "<p>En la funci\u00f3n <code>alerta</code>, \u00a1colocaste tu instrucci\u00f3n <code>return</code> en el lugar equivocado!\nPresta atenci\u00f3n a las sangr\u00edas en <code>alerta</code> Podr\u00edas estar finalizando demasiado pronto un bucle con el <code>return</code>.</p>",
            "passed": false,
            "result": []
        },
        "step": "alert_exercise"
    },
    {
        "page": "Probando Funciones",
        "program": [
            "def alerta(cadena, nivel):",
            "    marks = '!' * nivel",
            "    return marks + ' ' + cadena + ' ' + marks"
        ],
        "response": {
            "message": "<p>No puedes usar concatenation/formatting/interpolation/multiplication o f-strings en <code>alerta</code>.\nDebes llamar <code>rodear</code> para resolver el problema.</p>",
            "passed": false,
            "result": []
        },
        "step": "alert_exercise"
    },
    {
        "get_solution": [
            "def alerta(cadena, nivel):",
            "    cadena = rodear(cadena, ' ')",
            "    for _ in range(nivel):",
            "        cadena = rodear(cadena, '!')",
            "    return cadena"
        ],
        "page": "Probando Funciones",
        "program": [
            "def rodear(cadena, lados):",
            "    return lados + cadena + lados",
            "",
            "def alerta(cadena, nivel):",
            "    cadena = rodear(cadena, ' ')",
            "    for _ in range(nivel):",
            "        cadena = rodear(cadena, '!')",
            "    return cadena"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "alert_exercise"
    },
    {
        "get_solution": "program",
        "page": "<code>return</code> finaliza la llamada a la funci\u00f3n",
        "program": [
            "def foo():",
            "    return 1",
            "    return 2",
            "",
            "print(foo())"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "1",
                "choices": [
                    "1",
                    "2",
                    "[1, 2]",
                    "1\n2",
                    "1 2",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_return_in_one_function"
    },
    {
        "get_solution": "program",
        "page": "<code>return</code> finaliza la llamada a la funci\u00f3n",
        "program": [
            "def numeros_double(numeros):",
            "    for x in numeros:",
            "        return x * 2",
            "",
            "assert_equal(numeros_double([1, 2, 3]), [2, 4, 6])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Error! 2 != [2, 4, 6]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "cannot_return_multiple_values"
    },
    {
        "get_solution": "program",
        "page": "<code>return</code> finaliza la llamada a la funci\u00f3n",
        "program": [
            "def foo():",
            "    for letra in 'abc':",
            "        for numero in range(3):",
            "            print(f\"{letra} {numero}\")",
            "            if letra == 'b':",
            "                return letra",
            "",
            "foo()"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "a 0\na 1\na 2\nb 0",
                "choices": [
                    "a 0\na 1\na 2",
                    "a 0\na 1\na 2\nb 0",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2",
                    "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2\nc 0\nc 1\nc 2",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "a 0\na 1\na 2\nb 0\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "return_ends_whole_function"
    },
    {
        "get_solution": "program",
        "page": "<code>return</code> finaliza la llamada a la funci\u00f3n",
        "program": [
            "def foo():",
            "    for letra in 'abc':",
            "        for numero in range(3):",
            "            print(f\"{letra} {numero}\")",
            "            if letra == 'b':",
            "                break",
            "",
            "foo()"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2",
                "choices": [
                    "a 0\na 1\na 2",
                    "a 0\na 1\na 2\nb 0",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2",
                    "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2\nc 0\nc 1\nc 2",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "break_vs_return"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>or</code>",
        "program": [
            "def es_amigo(nombre):",
            "    if nombre == \"Alicia\":",
            "        return True",
            "    elif nombre == \"Bob\":",
            "        return True",
            "    else:",
            "        return False",
            "",
            "assert_equal(es_amigo(\"Alicia\"), True)",
            "assert_equal(es_amigo(\"Bob\"), True)",
            "assert_equal(es_amigo(\"Carlos\"), False)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "InputAliceBob"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>or</code>",
        "program": [
            "True or True"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueOrTrue"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>or</code>",
        "program": [
            "True or False"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueOrFalse"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>or</code>",
        "program": [
            "False or False"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "FalseOrFalse"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>or</code>",
        "program": [
            "def es_amigo(nombre):",
            "    if nombre == \"Alicia\" or nombre == \"Bob\":",
            "        return True",
            "    else:",
            "        return False",
            "",
            "assert_equal(es_amigo(\"Alicia\"), True)",
            "assert_equal(es_amigo(\"Bob\"), True)",
            "assert_equal(es_amigo(\"Carlos\"), False)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "ImprovingWithOr"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>or</code>",
        "program": [
            "def es_amigo(nombre):",
            "    return nombre == \"Alicia\" or nombre == \"Bob\"",
            "",
            "assert_equal(es_amigo(\"Alicia\"), True)",
            "assert_equal(es_amigo(\"Bob\"), True)",
            "assert_equal(es_amigo(\"Carlos\"), False)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "FurtherImprovement"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>or</code>",
        "program": [
            "def es_amigo(nombre):",
            "    return nombre == \"Alicia\" or \"Bob\"",
            "",
            "assert_equal(es_amigo(\"Alicia\"), True)",
            "assert_equal(es_amigo(\"Bob\"), True)",
            "assert_equal(es_amigo(\"Carlos\"), False)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "OK\nError! 'Bob' != True\nError! 'Bob' != False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "ACommonMistake"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>or</code>",
        "program": [
            "def es_amigo(nombre):",
            "    return nombre == \"Alicia\" or \"Bob\"",
            "",
            "assert_equal(es_amigo(\"Alicia\"), True)",
            "assert_equal(es_amigo(\"Bob\"), True)",
            "assert_equal(es_amigo(\"Carlos\"), False)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "OK\nError! 'Bob' != True\nError! 'Bob' != False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "InspectWithBirdseye"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>or</code>",
        "program": [
            "def es_porcentaje_valido(x):",
            "    if x < 0 or x > 100:",
            "        return False",
            "    else:",
            "        return True"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "AnExercise"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>and</code>",
        "program": [
            "True and True"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueAndTrue"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>and</code>",
        "program": [
            "True and False"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueAndFalse"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>and</code>",
        "program": [
            "False and False"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "FalseAndFalse"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>and</code>",
        "program": [
            "def es_porcentaje_valido(x):",
            "    if 0 <= x and x <= 100:",
            "        return True",
            "    else:",
            "        return False"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "AndExercise"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n al operador l\u00f3gico <code>and</code>",
        "program": [
            "def todo_igual(fila):",
            "    return fila[0] == fila[1] and fila[0] == fila[2]"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "TicTacToeWinningRow"
    },
    {
        "get_solution": "program",
        "page": "Declaraciones de varias l\u00edneas",
        "program": [
            "es_amigo = nombre == \"Alicia\" or",
            "         nombre == \"Bob\""
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Un <code>SyntaxError</code> ocurre cuando Python no puede entender tu c\u00f3digo.</p>\n<p>La palabra clave de Python <code>or</code> s\u00f3lo puede utilizarse para expresiones booleanas.\nQuiz\u00e1s haya querido escribir</p>\n<p><code>es_amigo = nombre == \"Alicia\" ,</code></p>",
                    "text": "    es_amigo = nombre == \"Alicia\" or\n                                    ^\nSyntaxError: invalid syntax\nen la l\u00ednea 1\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "invalid_multiline"
    },
    {
        "get_solution": "program",
        "page": "Declaraciones de varias l\u00edneas",
        "program": [
            "nombre = \"Bob\"",
            "",
            "es_amigo = nombre == \"Alicia\" or \\",
            "            nombre == \"Bob\"",
            "print(es_amigo)",
            "",
            "es_amigo = (nombre == \"Alicia\" or",
            "             nombre == \"Bob\")",
            "print(es_amigo)",
            "",
            "es_amigo = [nombre == \"Alicia\",",
            "             nombre == \"Bob\"]",
            "print(es_amigo)",
            "",
            "print(nombre == \"Alicia\" or",
            "      nombre == \"Bob\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\nTrue\n[False, True]\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "valid_multiline"
    },
    {
        "get_solution": "program",
        "page": "Combinando los operadores l\u00f3gicos <code>and</code> y <code>or</code>",
        "program": [
            "True or False and False"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "CombiningAndOr"
    },
    {
        "get_solution": "program",
        "page": "Combinando los operadores l\u00f3gicos <code>and</code> y <code>or</code>",
        "program": [
            "def diagonal_ganadora(tablero):",
            "    medio = tablero[1][1]",
            "    return (",
            "            (medio == tablero[0][0] and medio == tablero[2][2]) or",
            "            (medio == tablero[0][2] and medio == tablero[2][0])",
            "    )"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "AndHasHigherPriority"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a la negaci\u00f3n l\u00f3gica <code>not</code>",
        "program": [
            "not True"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "IntroducingNot"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a la negaci\u00f3n l\u00f3gica <code>not</code>",
        "program": [
            "not False"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "NotFalse"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a la negaci\u00f3n l\u00f3gica <code>not</code>",
        "program": [
            "b = True",
            "print(not b or b)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "NotTrueOrTrue"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a la negaci\u00f3n l\u00f3gica <code>not</code>",
        "program": [
            "def imagen_no_valida(nombrearchivo):",
            "    return not (nombrearchivo.endswith(\".png\") or nombrearchivo.endswith(\".jpg\"))"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "NotPriority"
    },
    {
        "page": "Comprobando el tablero por el ganador",
        "program": [
            "def fila_ganadora(tablero):",
            "    for fila in tablero:",
            "        todo_igual = True",
            "        pieza = fila[0]",
            "        for entrada in fila:",
            "            if pieza != entrada:",
            "                todo_igual = False",
            "                break",
            "        if todo_igual:",
            "            return True",
            "    return False"
        ],
        "response": {
            "message": "<p>Ten en mente que algunas entradas podr\u00edan ser <code>' '</code>. Una fila vac\u00eda no es una fila ganadora.</p>",
            "passed": false,
            "result": []
        },
        "step": "intro_row_winner"
    },
    {
        "get_solution": "program",
        "page": "Comprobando el tablero por el ganador",
        "program": [
            "def fila_ganadora(tablero):",
            "    for fila in tablero:",
            "        todo_igual = True",
            "        pieza = fila[0]",
            "        for entrada in fila:",
            "            if entrada == ' ' or pieza != entrada:",
            "                todo_igual = False",
            "                break",
            "        if todo_igual:",
            "            return True",
            "    return False"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "intro_row_winner"
    },
    {
        "get_solution": "program",
        "page": "Comprobando el tablero por el ganador",
        "program": [
            "def columna_ganadora(tablero):",
            "    for col in range(len(tablero[0])):",
            "        todo_igual = True",
            "        pieza = tablero[0][col]",
            "        for fila in tablero:",
            "            if fila[col] == ' ' or fila[col] != pieza:",
            "                todo_igual = False",
            "                break",
            "        if todo_igual:",
            "            return True",
            "    return False"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "column_winner"
    },
    {
        "get_solution": "program",
        "page": "Comprobando el tablero por el ganador",
        "program": [
            "def diagonal_ganadora(tablero):",
            "    todo_igual1 = True",
            "    todo_igual2 = True",
            "    topizq = tablero[0][0]",
            "    topdch = tablero[0][-1]",
            "    for i in range(len(tablero)):",
            "        if tablero[i][i] == ' ' or tablero[i][i] != topizq:",
            "            todo_igual1 = False",
            "        if tablero[i][-i - 1] == ' ' or tablero[i][-i - 1] != topdch:",
            "            todo_igual2 = False",
            "    return todo_igual1 or todo_igual2"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "diagonal_winner"
    },
    {
        "get_solution": [
            "def ganador(tablero):",
            "    return fila_ganadora(tablero) or columna_ganadora(tablero) or diagonal_ganadora(tablero)"
        ],
        "page": "Comprobando el tablero por el ganador",
        "program": [
            "def linea_ganadora(cadenas):",
            "    pieza = cadenas[0]",
            "    if pieza == ' ':",
            "        return False",
            "    for entrada in cadenas:",
            "        if pieza != entrada:",
            "            return False",
            "    return True",
            "",
            "def fila_ganadora(tablero):",
            "    for fila in tablero:",
            "        if linea_ganadora(fila):",
            "            return True",
            "    return False",
            "",
            "def columna_ganadora(tablero):",
            "    for col in range(len(tablero[0])):",
            "        columna = []",
            "        for fila in tablero:",
            "            columna.append(fila[col])",
            "        if linea_ganadora(columna):",
            "            return True",
            "    return False",
            "",
            "def diagonal_ganadora(tablero):",
            "    diagonal1 = []",
            "    diagonal2 = []",
            "    for i in range(len(tablero)):",
            "        diagonal1.append(tablero[i][i])",
            "        diagonal2.append(tablero[i][-i - 1])",
            "    return linea_ganadora(diagonal1) or linea_ganadora(diagonal2)",
            "",
            "def ganador(tablero):",
            "    return fila_ganadora(tablero) or columna_ganadora(tablero) or diagonal_ganadora(tablero)"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "winner"
    },
    {
        "get_solution": "program",
        "page": "El car\u00e1cter de nueva l\u00ednea, <code>tablero_formateado</code>.",
        "program": [
            "def imprimir_tablero(tablero):",
            "    for fila in tablero:",
            "        print(\"\".join(fila))",
            "",
            "imprimir_tablero([",
            "    ['X', 'O', 'X'],",
            "    [' ', 'O', 'O'],",
            "    [' ', 'X', ' ']",
            "])"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "XOX\n OO\n X \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "one_way_to_print_board"
    },
    {
        "get_solution": "program",
        "page": "El car\u00e1cter de nueva l\u00ednea, <code>tablero_formateado</code>.",
        "program": [
            "assert_equal(",
            "    tablero_formateado([",
            "        ['X', 'O', 'X'],",
            "        [' ', 'O', 'O'],",
            "        [' ', 'X', ' ']",
            "    ]),",
            "    \"XOX",
            "      OO",
            "      X \"",
            ")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Un <code>SyntaxError</code> ocurre cuando Python no puede entender tu c\u00f3digo.</p>\n<p>Ha empezado a escribir una cadena con una comilla simple o doble\npero nunca termin\u00f3 la cadena con otra comilla en esa l\u00ednea.</p>",
                    "text": "    \"XOX\n    ^\nSyntaxError: unterminated string literal (detected at line 7)\nen la l\u00ednea 7\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "invalid_multi_line_string"
    },
    {
        "get_solution": "program",
        "page": "El car\u00e1cter de nueva l\u00ednea, <code>tablero_formateado</code>.",
        "program": [
            "cadena = \"\"\"Primera l\u00ednea",
            "Segunda l\u00ednea\"\"\"",
            "print(cadena)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Primera l\u00ednea\nSegunda l\u00ednea\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "multi_line_strings_triple_quotes"
    },
    {
        "page": "El car\u00e1cter de nueva l\u00ednea, <code>tablero_formateado</code>.",
        "program": [
            "cadena = 'a'"
        ],
        "response": {
            "message": "<p>Oops, la <code>cadena</code> no tiene el valor correcto. Vuelve a ejecutar el programa del paso anterior.</p>",
            "passed": false,
            "result": []
        },
        "step": "discovering_newline"
    },
    {
        "get_solution": "program",
        "page": "El car\u00e1cter de nueva l\u00ednea, <code>tablero_formateado</code>.",
        "program": [
            "cadena"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'First line\\nSecond line'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "discovering_newline"
    },
    {
        "get_solution": "program",
        "page": "El car\u00e1cter de nueva l\u00ednea, <code>tablero_formateado</code>.",
        "program": [
            "len('\\n')"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "1",
                "choices": [
                    "1",
                    "2",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_newline"
    },
    {
        "get_solution": "program",
        "page": "El car\u00e1cter de nueva l\u00ednea, <code>tablero_formateado</code>.",
        "program": [
            "def tablero_formateado(tablero):",
            "    resultado = ''",
            "    for i in range(len(tablero)):",
            "        for car in tablero[i]:",
            "            resultado += car",
            "        if i != len(tablero) - 1:",
            "            resultado += '\\n'",
            "    return resultado"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "format_board_simple"
    },
    {
        "get_solution": "program",
        "page": "El car\u00e1cter de nueva l\u00ednea, <code>tablero_formateado</code>.",
        "program": [
            "def tablero_formateado(tablero):",
            "    filas_unidas = []",
            "    for fila in tablero:",
            "        filas_unidas.append(\"|\".join(fila))",
            "    lineas = []",
            "    for _ in tablero[0]:",
            "        lineas.append(\"-\")",
            "    linea = f'\\n{\"+\".join(lineas)}\\n'",
            "    return linea.join(filas_unidas)"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "format_board_bonus_challenge"
    },
    {
        "get_solution": "program",
        "page": "Tipos de Dato",
        "program": [
            "print(type('Hola Mundo'))",
            "print(type(23))",
            "print(type(True))",
            "print(type([1, 2, 3]))",
            "print(type(4.56))"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "<class 'str'>\n<class 'int'>\n<class 'bool'>\n<class 'list'>\n<class 'float'>\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "five_different_types"
    },
    {
        "get_solution": "program",
        "page": "Tipos de Dato",
        "program": [
            "type(3) == int"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "check_type_manually"
    },
    {
        "get_solution": "program",
        "page": "Tipos de Dato",
        "program": [
            "print('123')",
            "print(123)",
            "print(123 == '123')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "123\n123\nFalse\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "different_types_look_same"
    },
    {
        "get_solution": "program",
        "page": "Tipos de Dato",
        "program": [
            "print(123 + 456)",
            "print('123' + '456')"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "579\n123456",
                "choices": [
                    "579\n579",
                    "579\n'579'",
                    "123456\n123456",
                    "123456\n'123456'",
                    "579\n123456",
                    "579\n'123456'",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "579\n123456\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "plus_has_two_meanings"
    },
    {
        "get_solution": "program",
        "page": "Tipos de Dato",
        "program": [
            "print(13 < 120)",
            "print('13' < '120')"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "True\nFalse",
                "choices": [
                    "True\nTrue",
                    "True\nFalse",
                    "False\nTrue",
                    "False\nFalse",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\nFalse\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "less_than_has_two_meanings"
    },
    {
        "get_solution": "program",
        "page": "Tipos de Dato",
        "program": [
            "print(sorted([120, 13, 0]))",
            "print(sorted(['120', '13', '0']))"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "[0, 13, 120]\n['0', '120', '13']",
                "choices": [
                    "[0, 13, 120]\n['0', '120', '13']",
                    "[0, 13, 120]\n['13', '120', '0']",
                    "[0, 13, 120]\n['120', '13', '0']",
                    "[120, 13, 0]\n['0', '120', '13']",
                    "[120, 13, 0]\n['13', '120', '0']",
                    "[120, 13, 0]\n['120', '13', '0']",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[0, 13, 120]\n['0', '120', '13']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "less_than_sorting_strings"
    },
    {
        "get_solution": "program",
        "page": "Tipos de Dato",
        "program": [
            "12 + '34'"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "Error",
                "choices": [
                    "46",
                    "'46'",
                    "1234",
                    "'1234'",
                    "Error"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "unsupported operand type(s) for +: 'int' and 'str'",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"mi mi-ExecutingNode\">12</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"s1 s1-ExecutingNode\">&#39;34&#39;</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>Un <code>TypeError</code> suele producirse al intentar\ncombinar dos tipos de objetos incompatibles,\npor llamar a una funci\u00f3n con el tipo de objeto equivocado,\no por intentar realizar una operaci\u00f3n no permitida en un tipo de objeto determinado.</p>\n<p>Has intentado a\u00f1adir dos tipos de objetos incompatibles:\n<code>un n\u00famero entero (</code>int<code>)</code> y <code>un string (</code>str<code>)</code>.\nTal vez haya olvidado convertir la cadena <code>'34'</code> en un n\u00famero entero (<code>int</code>).</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | 12 + '34'",
                        "           ^^^^^^^^^",
                        "",
                        "TypeError: unsupported operand type(s) for +: 'int' and 'str'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "common_type_errors"
    },
    {
        "get_solution": [
            "for i in range(int(numero)):",
            "    print('Comenzando...' + str(i + 1))",
            "print('\u00a1V\u00e9!')"
        ],
        "page": "Tipos de Dato",
        "program": [
            "numero = '1'",
            "for i in range(int(numero)):",
            "    print('Comenzando...' + str(i + 1))",
            "print('\u00a1V\u00e9!')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Comenzando...1\n\u00a1V\u00e9!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "fixing_type_errors_with_conversion"
    },
    {
        "get_solution": "program",
        "page": "Tipos de Dato",
        "program": [
            "def tablero_formateado(tablero):",
            "    primera_fila = ' '",
            "    for i in range(len(tablero)):",
            "        primera_fila += str(i + 1)",
            "    filas_unidas = [primera_fila]",
            "    for i in range(len(tablero)):",
            "        fila_unida = str(i + 1) + ''.join(tablero[i])",
            "        filas_unidas.append(fila_unida)",
            "    return \"\\n\".join(filas_unidas)"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "format_board_with_numbers"
    },
    {
        "get_solution": "program",
        "page": "Programas interactivos con <code>input()</code>",
        "program": [
            "print('Escribe tu nombre y presiona Enter:')",
            "nombre = input()",
            "print(f'Hola {nombre}!')"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Escribe tu nombre y presiona Enter:\n",
                    "type": "stdout"
                },
                {
                    "text": "",
                    "type": "input_prompt"
                },
                {
                    "text": "<input: there>\n",
                    "type": "stdout"
                },
                {
                    "text": "Hola there!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_input"
    },
    {
        "get_solution": [
            "print(\"\u00bfEn qu\u00e9 n\u00famero estoy pensando?\")",
            "intento = input()",
            "if int(intento) == numero_super_secreto:",
            "    print(\"\u00a1Incre\u00edble! \u00bfEres ps\u00edquico?\")",
            "else:",
            "    print(\"\u00a1Nope!\")"
        ],
        "page": "Programas interactivos con <code>input()</code>",
        "program": [
            "numero_super_secreto = 7",
            "print(\"\u00bfEn qu\u00e9 n\u00famero estoy pensando?\")",
            "intento = input()",
            "if int(intento) == numero_super_secreto:",
            "    print(\"\u00a1Incre\u00edble! \u00bfEres ps\u00edquico?\")",
            "else:",
            "    print(\"\u00a1Nope!\")"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "\u00bfEn qu\u00e9 n\u00famero estoy pensando?\n",
                    "type": "stdout"
                },
                {
                    "text": "",
                    "type": "input_prompt"
                },
                {
                    "text": "<input: 7>\n",
                    "type": "stdout"
                },
                {
                    "text": "\u00a1Incre\u00edble! \u00bfEres ps\u00edquico?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "convert_input_to_int"
    },
    {
        "get_solution": "program",
        "page": "Tarea con Listas Anidadas: Jugando en el tablero",
        "program": [
            "def jugar_turno(tablero, jugador):",
            "    tablero[1] = jugador",
            "",
            "def jugar():",
            "    tablero_de_juego = [\" \", \" \", \" \"]",
            "    jugar_turno(tablero_de_juego, \"X\")",
            "    print(tablero_de_juego)",
            "",
            "jugar()"
        ],
        "response": {
            "passed": true,
            "prediction": {
                "answer": "[' ', 'X', ' ']",
                "choices": [
                    "X",
                    "' '",
                    "'X'",
                    "[' ']",
                    "['X']",
                    "[' ', ' ', ' ']",
                    "['X', ' ', ' ']",
                    "[' ', 'X', ' ']",
                    "[' ', ' ', 'X']",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[' ', 'X', ' ']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "modify_list_in_function"
    },
    {
        "get_solution": "program",
        "page": "Tarea con Listas Anidadas: Jugando en el tablero",
        "program": [
            "def jugar_turno(tablero, jugador):",
            "    fila = tablero[1]",
            "    fila[0] = jugador",
            "",
            "def jugar():",
            "    tablero = [",
            "        [\" \", \" \", \" \"],",
            "        [\" \", \" \", \" \"],",
            "        [\" \", \" \", \" \"],",
            "    ]",
            "    jugar_turno(tablero, \"X\")",
            "    print(tablero)",
            "",
            "jugar()"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "[[' ', ' ', ' '], ['X', ' ', ' '], [' ', ' ', ' ']]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_assignment_two_lines"
    },
    {
        "get_solution": "program",
        "page": "Tarea con Listas Anidadas: Jugando en el tablero",
        "program": [
            "def jugar_turno(tablero, jugador):",
            "    fila = int(input()) - 1",
            "    col = int(input()) - 1",
            "    tablero[fila][col] = jugador"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "nested_assignment_input"
    },
    {
        "get_solution": "program",
        "page": "Construyendo el Tablero",
        "program": [
            "def crear_tablero(tamano):",
            "    fila = []",
            "    for _ in range(tamano):",
            "        fila.append(' ')",
            "    tablero = []",
            "    for _ in range(tamano):",
            "        tablero.append(fila)",
            "    return tablero",
            "",
            "def prueba():",
            "    tablero = crear_tablero(3)",
            "    assert_equal(tablero, [",
            "        [' ', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "    ])",
            "    tablero[0][0] = 'X'",
            "    assert_equal(tablero, [",
            "        ['X', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "    ])",
            "",
            "prueba()"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "OK\nError! [['X', ' ', ' '], ['X', ' ', ' '], ['X', ' ', ' ']] != [['X', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "naive_make_board"
    },
    {
        "page": "Construyendo el Tablero",
        "program": [
            "pass",
            "def crear_tablero(tamano): return [[' '] * tamano] * tamano"
        ],
        "response": {
            "message": "<p>Dados los siguientes valores:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">tamano</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n</span></code></pre>\n<p>tu c\u00f3digo muestra:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">[[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">]]</span>\n</span></code></pre>\n<p>\u00a1lo cual es correcto!</p>\n<p>Las sublistas en el resultado no son objetos separados.</p>",
            "passed": false,
            "result": []
        },
        "step": "fix_make_board"
    },
    {
        "get_solution": "program",
        "page": "Construyendo el Tablero",
        "program": [
            "def crear_tablero(tamano):",
            "    tablero = []",
            "    for _ in range(tamano):",
            "        fila = []",
            "        for _ in range(tamano):",
            "            fila.append(' ')",
            "        tablero.append(fila)",
            "    return tablero"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "fix_make_board"
    },
    {
        "get_solution": [
            "def jugar(tamano_tablero, jugador1, jugador2):",
            "    tablero = crear_tablero(tamano_tablero)",
            "    print(tablero_formateado(tablero))",
            "",
            "    jugador = jugador1",
            "    for _ in range(tamano_tablero * tamano_tablero):",
            "        jugar_turno(tablero, jugador)",
            "",
            "        if ganador(tablero):",
            "            imprimir_ganador(jugador)",
            "            return",
            "",
            "        if jugador == jugador1:",
            "            jugador = jugador2",
            "        else:",
            "            jugador = jugador1",
            "",
            "    imprimir_empate()"
        ],
        "page": "El juego de Ta-Te-Ti completo",
        "program": [
            "def linea_ganadora(cadenas):",
            "    cadenas = set(cadenas)",
            "    return len(cadenas) == 1 and ' ' not in cadenas",
            "",
            "def fila_ganadora(tablero):",
            "    return any(linea_ganadora(fila) for fila in tablero)",
            "",
            "def columna_ganadora(tablero):",
            "    return fila_ganadora(zip(*tablero))",
            "",
            "def diagonal_principal_ganadora(tablero):",
            "    return linea_ganadora(fila[i] for i, fila in enumerate(tablero))",
            "",
            "def diagonal_ganadora(tablero):",
            "    return diagonal_principal_ganadora(tablero) or diagonal_principal_ganadora(reversed(tablero))",
            "",
            "def ganador(tablero):",
            "    return fila_ganadora(tablero) or columna_ganadora(tablero) or diagonal_ganadora(tablero)",
            "",
            "def tablero_formateado(tablero):",
            "    tamano = len(tablero)",
            "    linea = f'\\n  {\"+\".join(\"-\" * tamano)}\\n'",
            "    filas = [f'{i + 1} {\"|\".join(fila)}' for i, fila in enumerate(tablero)]",
            "    return f'  {\" \".join(str(i + 1) for i in range(tamano))}\\n{linea.join(filas)}'",
            "",
            "def jugar_turno(tablero, jugador):",
            "    print(f'Juega {jugador}:')",
            "    fila = int(input()) - 1",
            "    col = int(input()) - 1",
            "    tablero[fila][col] = jugador",
            "    print(tablero_formateado(tablero))",
            "",
            "def crear_tablero(tamano):",
            "    return [[' '] * tamano for _ in range(tamano)]",
            "",
            "def imprimir_ganador(jugador):",
            "    print(f'\u00a1gana {jugador}!')",
            "",
            "def imprimir_empate():",
            "    print(\"\u00a1Es un empate!\")",
            "",
            "def jugar(tamano_tablero, jugador1, jugador2):",
            "    tablero = crear_tablero(tamano_tablero)",
            "    print(tablero_formateado(tablero))",
            "",
            "    jugador = jugador1",
            "    for _ in range(tamano_tablero * tamano_tablero):",
            "        jugar_turno(tablero, jugador)",
            "",
            "        if ganador(tablero):",
            "            imprimir_ganador(jugador)",
            "            return",
            "",
            "        if jugador == jugador1:",
            "            jugador = jugador2",
            "        else:",
            "            jugador = jugador1",
            "",
            "    imprimir_empate()"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "the_full_game"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a los diccionarios",
        "program": [
            "frances = {'manzana': 'pomme', 'caja': 'boite'}"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "first_dict"
    },
    {
        "page": "Introducci\u00f3n a los diccionarios",
        "program": [
            "frances = {}"
        ],
        "response": {
            "message": "<p>Oops, necesitas establecer <code>frances = {'manzana': 'pomme', 'caja': 'boite'}</code> antes de poder continuar.</p>",
            "passed": false,
            "result": []
        },
        "step": "dict_access"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a los diccionarios",
        "program": [
            "frances[0]"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "0",
                                "type": "KeyError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"n n-ExecutingNode\">frances</span><span class=\"p p-ExecutingNode\">[</span><span class=\"mi mi-ExecutingNode\">0</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">frances</span>\n",
                                            "value": "<span class=\"p\">{</span><span class=\"s1\">&#39;manzana&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pomme&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;caja&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;boite&#39;</span><span class=\"p\">}</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Se produce un <code>KeyError</code> cuando no se encuentra un valor como llave\nen un dict de Python o en un objeto similar.</p>\n<p>La clave <code>0</code> no se encuentra en el dict <code>frances</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | frances[0]",
                        "           ^^^^^^^^^^",
                        "frances = {'manzana': 'pomme', 'caja': 'boite'}",
                        "",
                        "KeyError: 0"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "dict_access"
    },
    {
        "page": "Introducci\u00f3n a los diccionarios",
        "program": [
            "frances = {}"
        ],
        "response": {
            "message": "<p>Oops, necesitas establecer <code>frances = {'manzana': 'pomme', 'caja': 'boite'}</code> antes de poder continuar.</p>",
            "passed": false,
            "result": []
        },
        "step": "dict_access2"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a los diccionarios",
        "program": [
            "frances['manzana']"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'pomme'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dict_access2"
    },
    {
        "page": "Introducci\u00f3n a los diccionarios",
        "program": [
            "frances = {}"
        ],
        "response": {
            "message": "<p>Oops, necesitas establecer <code>frances = {'manzana': 'pomme', 'caja': 'boite'}</code> antes de poder continuar.</p>",
            "passed": false,
            "result": []
        },
        "step": "dict_access3"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a los diccionarios",
        "program": [
            "frances['caja']"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "'boite'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dict_access3"
    },
    {
        "page": "Introducci\u00f3n a los diccionarios",
        "program": [
            "frances = {}"
        ],
        "response": {
            "message": "<p>Oops, necesitas establecer <code>frances = {'manzana': 'pomme', 'caja': 'boite'}</code> antes de poder continuar.</p>",
            "passed": false,
            "result": []
        },
        "step": "dict_access4"
    },
    {
        "get_solution": "program",
        "page": "Introducci\u00f3n a los diccionarios",
        "program": [
            "frances['pomme']"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "'pomme'",
                                "type": "KeyError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"n n-ExecutingNode\">frances</span><span class=\"p p-ExecutingNode\">[</span><span class=\"s1 s1-ExecutingNode\">&#39;pomme&#39;</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">frances</span>\n",
                                            "value": "<span class=\"p\">{</span><span class=\"s1\">&#39;manzana&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pomme&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;caja&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;boite&#39;</span><span class=\"p\">}</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Se produce un <code>KeyError</code> cuando no se encuentra un valor como llave\nen un dict de Python o en un objeto similar.</p>\n<p>La clave <code>'pomme'</code> no se encuentra en el dict <code>frances</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | frances['pomme']",
                        "           ^^^^^^^^^^^^^^^^",
                        "frances = {'manzana': 'pomme', 'caja': 'boite'}",
                        "",
                        "KeyError: 'pomme'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "dict_access4"
    },
    {
        "get_solution": "program",
        "page": "Uso de diccionarios en la pr\u00e1ctica",
        "program": [
            "def coste_total(carro, precios):",
            "    resultado = 0",
            "    for item in carro:",
            "        precio = precios[item]",
            "        resultado += precio",
            "    return resultado"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "shopping_cart1"
    },
    {
        "get_solution": "program",
        "page": "Uso de diccionarios en la pr\u00e1ctica",
        "program": [
            "def coste_total(carro, cantidades, precios):",
            "    resultado = 0",
            "    for item in carro:",
            "        precio = precios[item]",
            "        cantidad = cantidades[item]",
            "        resultado += precio * cantidad",
            "    return resultado"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "shopping_cart4"
    },
    {
        "get_solution": "program",
        "page": "Uso de diccionarios en la pr\u00e1ctica",
        "program": [
            "def sustituto(cadena):",
            "    resultado = ''",
            "    for car in cadena:",
            "        if car == 'A':",
            "            car = 'T'",
            "        elif car == 'T':",
            "            car = 'A'",
            "        elif car == 'G':",
            "            car = 'C'",
            "        elif car == 'C':",
            "            car = 'G'",
            "        resultado += car",
            "    return resultado",
            "",
            "original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'",
            "expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'",
            "assert_equal(sustituto(original), expected)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "OK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_part1"
    },
    {
        "get_solution": "program",
        "page": "Uso de diccionarios en la pr\u00e1ctica",
        "program": [
            "def sustituto(cadena, d):",
            "    resultado = \"\"",
            "    for letra in cadena:",
            "        resultado += d[letra]",
            "    return resultado"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "dna_part2"
    },
    {
        "get_solution": "program",
        "page": "Iterando sobre las claves del diccionario",
        "program": [
            "cantidades = {'manzana': 1, 'gato': 10}",
            "print(cantidades.keys())"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "dict_keys(['manzana', 'gato'])\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_keys"
    },
    {
        "get_solution": "program",
        "page": "Iterando sobre las claves del diccionario",
        "program": [
            "cantidades = {'manzana': 1, 'gato': 10}",
            "for clave in cantidades.keys():",
            "    print(clave)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "manzana\ngato\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "keys_are_iterable"
    },
    {
        "get_solution": "program",
        "page": "Iterando sobre las claves del diccionario",
        "program": [
            "cantidades = {'manzana': 1, 'gato': 10}",
            "for clave in cantidades:",
            "    print(clave)"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "manzana\ngato\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "keys_are_iterable2"
    },
    {
        "get_solution": "program",
        "page": "Iterando sobre las claves del diccionario",
        "program": [
            "def coste_total(cantidades, precios):",
            "    resultado = 0",
            "    for item in cantidades:",
            "        precio = precios[item]",
            "        cantidad = cantidades[item]",
            "        resultado += precio * cantidad",
            "    return resultado"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "cleanup_shopping_cart"
    },
    {
        "get_solution": "program",
        "page": "Iterando sobre las claves del diccionario",
        "program": [
            "def imprimir_letras(frances):",
            "    for palabra in frances:",
            "        print(\"Espa\u00f1ol: \" + palabra)",
            "        print(\"Franc\u00e9s: \" + frances[palabra])",
            "        print(\"---\")"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "english_to_french"
    },
    {
        "get_solution": "program",
        "page": "Iterando sobre las claves del diccionario",
        "program": [
            "def imprimir_letras(frances, alem\u00e1n):",
            "    for palabra in frances:",
            "        print(\"Espa\u00f1ol: \" + palabra)",
            "        print(\"Franc\u00e9s: \" + frances[palabra])",
            "        print(\"Alem\u00e1n: \" + alem\u00e1n[palabra])",
            "        print(\"---\")"
        ],
        "response": {
            "passed": true,
            "result": []
        },
        "step": "english_to_german"
    },
    {
        "get_solution": "program",
        "page": "Iterando sobre las claves del diccionario",
        "program": [
            "def imprimir_letras(palabras):",
            "    for palabra in palabras:",
            "        traducciones = palabras[palabra]",
            "",
            "        print(f\"Espa\u00f1ol: {palabra}\")",
            "        for idioma in traducciones:",
            "            print(f\"{idioma}: {traducciones[idioma]}\")",
            "        print(f\"---\")",
            "",
            "imprimir_letras({",
            "    'manzana': {",
            "        'Franc\u00e9s': 'pomme',",
            "        'Alem\u00e1n': 'apfel',",
            "    },",
            "    'caja': {",
            "        'Franc\u00e9s': 'boite',",
            "        'Alem\u00e1n': 'kasten',",
            "    },",
            "})"
        ],
        "response": {
            "passed": true,
            "result": [
                {
                    "text": "Espa\u00f1ol: manzana\nFranc\u00e9s: pomme\nAlem\u00e1n: apfel\n---\nEspa\u00f1ol: caja\nFranc\u00e9s: boite\nAlem\u00e1n: kasten\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_dictionaries"
    }
]