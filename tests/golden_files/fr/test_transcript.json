[
    {
        "page": "Pr\u00e9sentation de la console",
        "program": [
            "'literally anything'"
        ],
        "response": {
            "message": "<p>G\u00e9nial, vous fa\u00eetes vos propres exp\u00e9riences !\nC'est un bon signe. Continuez comme \u00e7a.\nJe vous informe juste que vous devez effectivement taper <code>1+2</code> pour que le cours avance.</p>",
            "passed": false,
            "result": [
                {
                    "text": "'literally anything'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_expression"
    },
    {
        "page": "Pr\u00e9sentation de la console",
        "program": [
            "1+2"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "3\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_expression"
    },
    {
        "page": "Pr\u00e9sentation de la console",
        "program": [
            "3 x 4"
        ],
        "response": {
            "message": "<p>Je vois un 'x'. Si vous essayez de multiplier, utilisez un ast\u00e9risque, par ex :</p>\n<pre><code class=\"codehilite\"><span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"mi\">4</span>\n</span></code></pre>",
            "passed": false,
            "result": [
                {
                    "friendly": "<p>Une exception de type <code>SyntaxError</code> se produit lorsque Python ne peut pas comprendre votre code.</p>\n<p>Pr\u00e9sentement, je ne peux pas deviner la cause probable de cette erreur.\nEssayez d\u2019examiner attentivement la ligne indiqu\u00e9e ainsi que celle\nimm\u00e9diatement au dessus pour voir si vous pouvez identifier\nun mot mal orthographi\u00e9, ou des symboles manquants, comme (,), [,],:, etc.</p>\n<p>Si votre code n'utilise pas d'annotations de type,\net que vous pensez que friendly devrait\npouvoir l'analyser correctement, SVP rapporter ce cas au site suivant:\nhttps://github.com/friendly-traceback/friendly-traceback/issues</p>",
                    "text": "    3 x 4\n      ^\nSyntaxError: invalid syntax\nat line 1\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "more_calculation"
    },
    {
        "page": "Pr\u00e9sentation de la console",
        "program": [
            "5 - 6"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "-1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "more_calculation"
    },
    {
        "page": "Pr\u00e9sentation des chaines",
        "program": [
            "'hello'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'hello'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_string"
    },
    {
        "page": "Concat\u00e9nation de chaines",
        "program": [
            "'hello' + 'world'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'helloworld'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_world_concat"
    },
    {
        "page": "Concat\u00e9nation de chaines",
        "program": [
            "'hello world'"
        ],
        "response": {
            "message": "<p>Vous devez encore ajouter deux chaines ensemble, ou plus.</p>",
            "passed": false,
            "result": [
                {
                    "text": "'hello world'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_world_space"
    },
    {
        "get_solution": [
            "'hello ' + 'world'"
        ],
        "page": "Concat\u00e9nation de chaines",
        "program": [
            "'hello ' + 'world'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'hello world'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_world_space"
    },
    {
        "page": "Pr\u00e9sentation des variables",
        "program": [
            "mot = 'Hello'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "word_assign"
    },
    {
        "page": "Pr\u00e9sentation des variables",
        "program": [
            "mot = 2"
        ],
        "response": {
            "message": "<p>D\u00e9sol\u00e9, vous devez placer <code>mot = 'Hello'</code> avant de continuer.</p>",
            "passed": false,
            "result": []
        },
        "step": "word_check"
    },
    {
        "page": "Pr\u00e9sentation des variables",
        "program": [
            "mot"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'Hello'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_check"
    },
    {
        "page": "Pr\u00e9sentation des variables",
        "program": [
            "'mot'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "'mot'",
                "choices": [
                    "mot",
                    "'mot'",
                    "Hello",
                    "'Hello'",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "'mot'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_string_check"
    },
    {
        "page": "Pr\u00e9sentation des variables",
        "program": [
            "soleil"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Erreur",
                "choices": [
                    "soleil",
                    "'soleil'",
                    "Hello",
                    "'Hello'",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "name 'soleil' is not defined",
                                "type": "NameError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"n n-ExecutingNode\">soleil</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>Une exception <code>NameError</code> indique que le nom d'une variable\nou d'une fonction n'est pas connue par Python.\nHabituellement, ceci indique une simple faute d'orthographe.\nCependant, cela peut \u00e9galement indiquer que le nom a \u00e9t\u00e9\nutilis\u00e9 avant qu'on ne lui ait associ\u00e9 une valeur.</p>\n<p>Dans votre programme, aucun objet portant le nom <code>soleil</code> n'existe.\nJe n\u2019ai pas d\u2019informations suppl\u00e9mentaires pour vous.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | soleil",
                        "           ^^^^^^",
                        "",
                        "NameError: name 'soleil' is not defined"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "sunshine_undefined_check"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "foo = 3"
        ],
        "response": {
            "message": "<p>Placez <code>votre_nom</code> avant le signe <code>=</code> pour cr\u00e9er une variable nomm\u00e9e <code>votre_nom</code>.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "votre_nom = ''"
        ],
        "response": {
            "message": "<p>Pour cet exercice, choisissez une chaine non vide.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "votre_nom = 3"
        ],
        "response": {
            "message": "<p>Vous avez bien compris la partie <code>votre_nom =</code>, maintenant mettez une cha\u00eene de caract\u00e8res (utilisez les guillemets) \u00e0 droite du <code>=</code>.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "votre_nom = ' Alex'"
        ],
        "response": {
            "message": "<p>Pour cet exercice, choisissez un nom qui ne commence pas par une espace.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "votre_nom = 'Alex'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "'Hello ' + votre_nom"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'Hello Alex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_plus_name"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "mot = 2"
        ],
        "response": {
            "message": "<p>Mince, vous devez entrer <code>mot = 'Hello'</code> avant de continuer.</p>",
            "passed": false,
            "result": []
        },
        "step": "word_plus_name"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "mot + votre_nom"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'HelloAlex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_plus_name"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "mot = 2"
        ],
        "response": {
            "message": "<p>Mince, vous devez entrer <code>mot = 'Hello'</code> avant de continuer.</p>",
            "passed": false,
            "result": []
        },
        "step": "word_plus_name_with_space"
    },
    {
        "get_solution": [
            "mot + ' ' + votre_nom"
        ],
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "mot + ' ' + votre_nom"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'Hello Alex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_plus_name_with_space"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "mot = 'Goodbye'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "word_assign_goodbye"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "mot + ' ' + votre_nom"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'Goodbye Alex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "goodbye_plus_name"
    },
    {
        "page": "Utilisation de variables et de <code>print()</code>",
        "program": [
            "print(mot + ' ' + votre_nom)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Goodbye Alex\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_print"
    },
    {
        "page": "\u00c9criture de scripts",
        "program": [
            "mot = 'Hello'",
            "nom = 'World'",
            "print(mot + ' ' + nom)",
            "mot = 'Goodbye'",
            "print(mot + ' ' + nom)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello World\nGoodbye World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "editor_hello_world"
    },
    {
        "page": "Stockage de r\u00e9sultats avec des variables",
        "program": [
            "mot = 'Hello'",
            "nom = 'World'",
            "phrase = mot + ' ' + nom",
            "print(phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello World",
                "choices": [
                    "phrase",
                    "mot + ' ' + nom",
                    "Hello + ' ' + World",
                    "'Hello' + ' ' + 'World'",
                    "Hello World",
                    "'Hello World'",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "Hello World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sentence_equals_word_plus_name"
    },
    {
        "page": "Stockage de r\u00e9sultats avec des variables",
        "program": [
            "mot = 'Hello'",
            "nom = 'World'",
            "phrase = mot + ' ' + nom",
            "print(phrase)",
            "mot = 'Goodbye'",
            "print(phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello World\nHello World",
                "choices": [
                    "Hello World\nHello World",
                    "Hello World\nGoodbye World",
                    "Goodbye World\nGoodbye World",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "Hello World\nHello World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sentence_doesnt_change"
    },
    {
        "page": "Pr\u00e9sentation des boucles <code>for</code>",
        "program": [
            "nom = 'World'",
            "for caractere in nom: print(caractere)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\no\nr\nl\nd\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_for_loop"
    },
    {
        "page": "Indentation",
        "program": [
            "for caractere in nom:",
            "print(caractere)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Une exception de type <code>IndentationError</code> se produit lorsqu'une ligne de code\nn'est pas indent\u00e9e (c'est-\u00e0-dire align\u00e9e verticalement avec les autres lignes)\nde la fa\u00e7on attendue.</p>\n<p>La ligne <code>2</code> identifi\u00e9e ci-dessus \u00e9tait cens\u00e9e commencer un nouveau bloc indent\u00e9.</p>",
                    "text": "    print(caractere)\n    ^^^^^\nIndentationError: expected an indented block after 'for' statement on line 1\nat line 2\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "missing_indentation"
    },
    {
        "page": "Indentation",
        "program": [
            "nom = 'World'",
            "",
            "for caractere in nom:",
            "    print(caractere)",
            "    print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\n---\no\n---\nr\n---\nl\n---\nd\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "two_indented_lines"
    },
    {
        "page": "Indentation",
        "program": [
            "nom = 'World'",
            "",
            "for caractere in nom:",
            "    print(caractere)",
            "print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\no\nr\nl\nd\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "one_indented_line"
    },
    {
        "page": "Indentation",
        "program": [
            "for caractere in nom:",
            "    print(caractere)",
            "  print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Une exception de type <code>IndentationError</code> se produit lorsqu'une ligne de code\nn'est pas indent\u00e9e (c'est-\u00e0-dire align\u00e9e verticalement avec les autres lignes)\nde la fa\u00e7on attendue.</p>\n<p>La ligne <code>3</code> identifi\u00e9e ci-dessus est moins indent\u00e9e que pr\u00e9vu.</p>",
                    "text": "    print('---')\n                ^\nIndentationError: unindent does not match any outer indentation level\nat line 3\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "mismatched_indentations"
    },
    {
        "get_solution": [
            "for caractere in nom:",
            "    print('---' + caractere)"
        ],
        "page": "Exercices simples sur les boucles <code>for</code>",
        "program": [
            "nom = 'World'",
            "for caractere in nom:",
            "    print('---' + caractere)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "---W\n---o\n---r\n---l\n---d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "loop_exercise_1"
    },
    {
        "get_solution": [
            "for _ in nom:",
            "    print(nom)"
        ],
        "page": "Exercices simples sur les boucles <code>for</code>",
        "program": [
            "nom = 'World'",
            "for _ in nom:",
            "    print(nom)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "World\nWorld\nWorld\nWorld\nWorld\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "loop_exercise_2"
    },
    {
        "page": "Construction de chaines",
        "program": [
            "hello = 'Hello'",
            "print(hello)",
            "hello = hello + '!'",
            "print(hello)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello\nHello!",
                "choices": [
                    "Hello\nHello",
                    "Hello\nHello!",
                    "Hello!\nHello!",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "Hello\nHello!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_plus_equals"
    },
    {
        "page": "Construction de chaines",
        "program": [
            "nom = 'World'",
            "ligne = '-'",
            "for caractere in nom:",
            "    ligne = ligne + caractere",
            "    print(ligne)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "-W\n-Wo\n-Wor\n-Worl\n-World",
                "choices": [
                    "-\nW\n-\no\n-\nr\n-\nl\n-\nd",
                    "-W\n-o\n-r\n-l\n-d",
                    "-World",
                    "-W-o-r-l-d",
                    "-W\n-Wo\n-Wor\n-Worl\n-World",
                    "-World\n-Worl\n-Wor\n-Wo\n-W",
                    "-World\n-World\n-World\n-World\n-World",
                    "-World\n--World\n---World\n----World\n-----World",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "-W\n-Wo\n-Wor\n-Worl\n-World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle"
    },
    {
        "page": "Construction de chaines",
        "program": [
            "nom = 'World'",
            "ligne = '-'",
            "for caractere in nom:",
            "    print(ligne)",
            "    ligne = ligne + caractere"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "-\n-W\n-Wo\n-Wor\n-Worl",
                "choices": [
                    "-W\n-Wo\n-Wor\n-Worl\n-World",
                    "-Wo\n-Wor\n-Worl\n-World",
                    "-\n-W\n-Wo\n-Wor\n-Worl",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "-\n-W\n-Wo\n-Wor\n-Worl\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_missing_last_line"
    },
    {
        "page": "Construction de chaines",
        "program": [
            "'' + '' + ''"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "''",
                "choices": [
                    "''",
                    "' '",
                    "'  '",
                    "'   '",
                    "'' + '' + ''",
                    "''''''",
                    "'' '' ''",
                    "' '' '' '",
                    "++",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "''\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "empty_string"
    },
    {
        "get_solution": [
            "ligne = ''",
            "for caractere in nom:",
            "    ligne = ligne + caractere",
            "    print(ligne)"
        ],
        "page": "Construction de chaines",
        "program": [
            "nom = 'World'",
            "ligne = ''",
            "for caractere in nom:",
            "    ligne = ligne + caractere",
            "    print(ligne)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\nWo\nWor\nWorl\nWorld\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_empty_string"
    },
    {
        "get_solution": [
            "ligne = ''",
            "for caractere in nom:",
            "    ligne = ligne + caractere + ' '",
            "    print(ligne)"
        ],
        "page": "Exercices de construction de cha\u00eenes",
        "program": [
            "nom = 'World'",
            "ligne = ''",
            "for caractere in nom:",
            "    ligne = ligne + caractere + ' '",
            "    print(ligne)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W \nW o \nW o r \nW o r l \nW o r l d \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_spaced"
    },
    {
        "get_solution": [
            "ligne = ''",
            "for caractere in nom:",
            "    ligne = caractere + ligne",
            "    print(ligne)"
        ],
        "page": "Exercices de construction de cha\u00eenes",
        "program": [
            "nom = 'World'",
            "ligne = ''",
            "for caractere in nom:",
            "    ligne = caractere + ligne",
            "    print(ligne)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\noW\nroW\nlroW\ndlroW\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_backwards"
    },
    {
        "get_solution": [
            "ligne = ''",
            "for _ in nom:",
            "    ligne += '-'",
            "print(nom)",
            "print(ligne)"
        ],
        "page": "Exercices de construction de cha\u00eenes",
        "program": [
            "nom = 'World'",
            "ligne = ''",
            "for _ in nom:",
            "    ligne += '-'",
            "print(nom)",
            "print(ligne)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "World\n-----\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_underlined"
    },
    {
        "get_solution": [
            "ligne = ''",
            "for _ in nom:",
            "    ligne += '-'",
            "ligne = '+' + ligne + '+'",
            "print(ligne)",
            "print('|' + nom + '|')",
            "print(ligne)"
        ],
        "page": "Exercices de construction de cha\u00eenes",
        "program": [
            "nom = 'World'",
            "ligne = ''",
            "for _ in nom:",
            "    ligne += '-'",
            "ligne = '+' + ligne + '+'",
            "print(ligne)",
            "print('|' + nom + '|')",
            "print(ligne)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "+-----+\n|World|\n+-----+\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_box"
    },
    {
        "get_solution": [
            "ligne = '+' + nom + '+'",
            "espaces = ''",
            "for _ in nom:",
            "    espaces += ' '",
            "",
            "print(ligne)",
            "for caractere in nom:",
            "    print(caractere + espaces + caractere)",
            "print(ligne)"
        ],
        "page": "Exercices de construction de cha\u00eenes",
        "program": [
            "nom = 'World'",
            "ligne = '+' + nom + '+'",
            "espaces = ''",
            "for _ in nom:",
            "    espaces += ' '",
            "",
            "print(ligne)",
            "for caractere in nom:",
            "    print(caractere + espaces + caractere)",
            "print(ligne)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "+World+\nW     W\no     o\nr     r\nl     l\nd     d\n+World+\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_box_2"
    },
    {
        "page": "Exercices de construction de cha\u00eenes",
        "program": [
            "nom = 'World'",
            "espaces = ''",
            "for caractere in nom:",
            "    espaces += ' '",
            "    print(espaces + caractere)"
        ],
        "response": {
            "message": "<p>On y est presque ! Vous avez une espace de trop avant chaque lettre.\nAssurez-vous que la premi\u00e8re fois que votre boucle appelle <code>print</code> votre variable qui contiendra les espaces soit une cha\u00eene vide.\nV\u00e9rifiez l'agencement de votre code.</p>",
            "passed": false,
            "result": [
                {
                    "text": " W\n  o\n   r\n    l\n     d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "diagonal_name_bonus_challenge"
    },
    {
        "get_solution": [
            "espaces = ''",
            "for caractere in nom:",
            "    print(espaces + caractere)",
            "    espaces += ' '"
        ],
        "page": "Exercices de construction de cha\u00eenes",
        "program": [
            "nom = 'World'",
            "espaces = ''",
            "for caractere in nom:",
            "    print(espaces + caractere)",
            "    espaces += ' '"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\n o\n  r\n   l\n    d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "diagonal_name_bonus_challenge"
    },
    {
        "page": "Pr\u00e9sentation des structures conditionnelles",
        "program": [
            "condition = True",
            "print(condition)",
            "condition = False",
            "print(condition)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\nFalse\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_booleans"
    },
    {
        "page": "Pr\u00e9sentation des structures conditionnelles",
        "program": [
            "if True:",
            "    print('Ceci sera affich\u00e9')",
            "",
            "if False:",
            "    print('Ceci non')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Ceci sera affich\u00e9\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_if_statements"
    },
    {
        "page": "Pr\u00e9sentation des structures conditionnelles",
        "program": [
            "phrase = 'Hello World'",
            "ravi = True",
            "if ravi:",
            "    phrase += '!'",
            "print(phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello World!",
                "choices": [
                    "Hello World",
                    "Hello World!",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "Hello World!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "excited_example"
    },
    {
        "page": "Pr\u00e9sentation des structures conditionnelles",
        "program": [
            "phrase = 'Hello World'",
            "ravi = False",
            "if ravi:",
            "    phrase += '!'",
            "print(phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello World",
                "choices": [
                    "Hello World",
                    "Hello World!",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "Hello World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "excited_false_example"
    },
    {
        "get_solution": [
            "if ravi:",
            "    phrase += '!'",
            "if confus:",
            "    phrase += '?'",
            "print(phrase)"
        ],
        "page": "Pr\u00e9sentation des structures conditionnelles",
        "program": [
            "phrase = 'Hello'",
            "ravi = True",
            "confus = True",
            "if ravi:",
            "    phrase += '!'",
            "if confus:",
            "    phrase += '?'",
            "print(phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello!?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "excited_confused_exercise"
    },
    {
        "page": "Structures imbriqu\u00e9es",
        "program": [
            "phrase = 'Hello World'",
            "ravi = True",
            "",
            "if ravi:",
            "    nouvelle_phrase = ''",
            "    for caractere in phrase:",
            "        nouvelle_phrase += caractere + '!'",
            "    phrase = nouvelle_phrase",
            "",
            "print(phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "H!e!l!l!o! !W!o!r!l!d!",
                "choices": [
                    "Hello World",
                    "!!!!!!!!!!!",
                    "Hello World!!!!!!!!!!!",
                    "!!!!!!!!!!!Hello World",
                    "Hello World!",
                    "!Hello World",
                    "!Hello World!",
                    "H!e!l!l!o! !W!o!r!l!d!",
                    "!H!e!l!l!o! !W!o!r!l!d",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "H!e!l!l!o! !W!o!r!l!d!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "for_inside_if"
    },
    {
        "page": "Observation des programmes avec <code>snoop</code>",
        "program": [
            "phrase = 'Hello World'",
            "",
            "inclus = False",
            "nouvelle_phrase = ''",
            "for caractere in phrase:",
            "    if inclus:",
            "        nouvelle_phrase += caractere",
            "    inclus = True",
            "",
            "print(nouvelle_phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "ello World",
                "choices": [
                    "Hello World",
                    "ello World",
                    "Hello Worl",
                    "H",
                    "d",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "ello World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_tail"
    },
    {
        "page": "Observation des programmes avec <code>snoop</code>",
        "program": [
            "phrase = 'Hello World'",
            "",
            "inclus = False",
            "nouvelle_phrase = ''",
            "for caractere in phrase:",
            "    if inclus:",
            "        nouvelle_phrase += caractere",
            "    inclus = True",
            "",
            "print(nouvelle_phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   1\u001b[0m | phrase \u001b[38;5;197m=\u001b[39m \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mHello World\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   3\u001b[0m | inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mFalse\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   4\u001b[0m | nouvelle_phrase \u001b[38;5;197m=\u001b[39m \u001b[38;5;186m'\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m...... caractere = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mH\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m...... caractere = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186me\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nouvelle_phrase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m caractere\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. nouvelle_phrase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186me\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m...... caractere = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186ml\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nouvelle_phrase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m caractere\n\u001b[38;5;242m \u001b[0m.............. nouvelle_phrase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mel\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nouvelle_phrase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m caractere\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. nouvelle_phrase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mell\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m...... caractere = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nouvelle_phrase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m caractere\n\u001b[38;5;242m \u001b[0m.............. nouvelle_phrase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m...... caractere = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186m \u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nouvelle_phrase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m caractere\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. nouvelle_phrase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello \u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m...... caractere = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mW\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nouvelle_phrase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m caractere\n\u001b[38;5;242m \u001b[0m.............. nouvelle_phrase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello W\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m...... caractere = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nouvelle_phrase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m caractere\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. nouvelle_phrase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello Wo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m...... caractere = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mr\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nouvelle_phrase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m caractere\n\u001b[38;5;242m \u001b[0m.............. nouvelle_phrase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello Wor\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m...... caractere = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186ml\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nouvelle_phrase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m caractere\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. nouvelle_phrase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello Worl\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m...... caractere = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186md\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m inclus:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         nouvelle_phrase \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m caractere\n\u001b[38;5;242m \u001b[0m.............. nouvelle_phrase = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello World\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     inclus \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m caractere \u001b[38;5;197min\u001b[39m phrase:\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m  10\u001b[0m | print(nouvelle_phrase)\n",
                    "type": "snoop"
                },
                {
                    "text": "ello World",
                    "type": "stdout"
                },
                {
                    "text": "\n",
                    "type": "stdout"
                },
                {
                    "text": "",
                    "type": "snoop"
                }
            ]
        },
        "step": "print_tail_snoop"
    },
    {
        "get_solution": [
            "inclus = True",
            "nouvelle_phrase = ''",
            "for caractere in phrase:",
            "    if inclus:",
            "        nouvelle_phrase += caractere",
            "    inclus = False",
            "",
            "print(nouvelle_phrase)"
        ],
        "page": "Observation des programmes avec <code>snoop</code>",
        "program": [
            "phrase = 'Hello there'",
            "inclus = True",
            "nouvelle_phrase = ''",
            "for caractere in phrase:",
            "    if inclus:",
            "        nouvelle_phrase += caractere",
            "    inclus = False",
            "",
            "print(nouvelle_phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "H\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_first_character"
    },
    {
        "page": "<code>if</code> et <code>else</code>, le bloc sinon",
        "program": [
            "condition = True",
            "if condition:",
            "    print('Oui')",
            "else:",
            "    print('Non')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Oui\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_if_else"
    },
    {
        "page": "<code>if</code> et <code>else</code>, le bloc sinon",
        "program": [
            "condition = False",
            "if condition:",
            "    print('Oui')",
            "else:",
            "    print('Non')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Non\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_if_else_false"
    },
    {
        "page": "<code>if</code> et <code>else</code>, le bloc sinon",
        "program": [
            "phrase = 'Hello World'",
            "ravi = True",
            "if ravi:",
            "    phrase = phrase.upper()",
            "else:",
            "    phrase = phrase.lower()",
            "print(phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "HELLO WORLD\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_upper_else_lower"
    },
    {
        "page": "<code>if</code> et <code>else</code>, le bloc sinon",
        "program": [
            "phrase = 'Hello World'",
            "ravi = False",
            "if ravi:",
            "    phrase = phrase.upper()",
            "else:",
            "    phrase = phrase.lower()",
            "print(phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "hello world\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_upper_else_lower_false"
    },
    {
        "page": "<code>if</code> et <code>else</code>, le bloc sinon",
        "program": [
            "phrase = 'Hello World'",
            "ravi = False",
            "",
            "if ravi:",
            "    caractere = '!'",
            "phrase += caractere",
            "",
            "print(phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Erreur",
                "choices": [
                    "Hello World",
                    "Hello World!",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "name 'caractere' is not defined",
                                "type": "NameError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 6,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 6,
                                            "text": "<span class=\"n\">phrase</span> <span class=\"o\">+=</span> <span class=\"n n-ExecutingNode\">caractere</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">phrase</span>\n",
                                            "value": "<span class=\"s1\">&#39;Hello World&#39;</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">ravi</span>\n",
                                            "value": "<span class=\"kc\">False</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Une exception <code>NameError</code> indique que le nom d'une variable\nou d'une fonction n'est pas connue par Python.\nHabituellement, ceci indique une simple faute d'orthographe.\nCependant, cela peut \u00e9galement indiquer que le nom a \u00e9t\u00e9\nutilis\u00e9 avant qu'on ne lui ait associ\u00e9 une valeur.</p>\n<p>Dans votre programme, aucun objet portant le nom <code>caractere</code> n'existe.\nJe n\u2019ai pas d\u2019informations suppl\u00e9mentaires pour vous.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 6, in <module>",
                        "       5 |     caractere = '!'",
                        "-->    6 | phrase += caractere",
                        "                     ^^^^^^^^^",
                        "phrase = 'Hello World'",
                        "ravi = False",
                        "",
                        "NameError: name 'caractere' is not defined"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "undefined_char"
    },
    {
        "get_solution": [
            "if ravi:",
            "    caractere = '!'",
            "else:",
            "    caractere = '.'",
            "phrase += caractere",
            "",
            "print(phrase)"
        ],
        "page": "<code>if</code> et <code>else</code>, le bloc sinon",
        "program": [
            "phrase = 'Hello there'",
            "ravi = True",
            "if ravi:",
            "    caractere = '!'",
            "else:",
            "    caractere = '.'",
            "phrase += caractere",
            "",
            "print(phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello there!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "else_full_stop"
    },
    {
        "get_solution": [
            "majuscule = True",
            "nouvelle_phrase = ''",
            "for caractere in phrase:",
            "    if majuscule:",
            "        caractere = caractere.upper()",
            "    else:",
            "        caractere = caractere.lower()",
            "    nouvelle_phrase += caractere",
            "    majuscule = False",
            "",
            "print(nouvelle_phrase)"
        ],
        "page": "<code>if</code> et <code>else</code>, le bloc sinon",
        "program": [
            "phrase = 'HELLO THERE'",
            "majuscule = True",
            "nouvelle_phrase = ''",
            "for caractere in phrase:",
            "    if majuscule:",
            "        caractere = caractere.upper()",
            "    else:",
            "        caractere = caractere.lower()",
            "    nouvelle_phrase += caractere",
            "    majuscule = False",
            "",
            "print(nouvelle_phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello there\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "capitalise"
    },
    {
        "get_solution": [
            "majuscule = True",
            "nouvelle_phrase = ''",
            "for caractere in phrase:",
            "    if majuscule:",
            "        caractere = caractere.upper()",
            "        majuscule = False",
            "    else:",
            "        caractere = caractere.lower()",
            "        majuscule = True",
            "    nouvelle_phrase += caractere",
            "",
            "print(nouvelle_phrase)"
        ],
        "page": "<code>if</code> et <code>else</code>, le bloc sinon",
        "program": [
            "phrase = 'One more exercise, and then you can relax.'",
            "majuscule = True",
            "nouvelle_phrase = ''",
            "for caractere in phrase:",
            "    if majuscule:",
            "        caractere = caractere.upper()",
            "        majuscule = False",
            "    else:",
            "        caractere = caractere.lower()",
            "        majuscule = True",
            "    nouvelle_phrase += caractere",
            "",
            "print(nouvelle_phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OnE MoRe eXeRcIsE, aNd tHeN YoU CaN ReLaX.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "spongebob"
    },
    {
        "page": "L'op\u00e9rateur d'\u00e9galit\u00e9",
        "program": [
            "print(1 + 2 == 3)",
            "print(4 + 5 == 6)",
            "print('ab' + 'c' == 'a' + 'bc')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\nFalse\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_equality"
    },
    {
        "page": "L'op\u00e9rateur d'\u00e9galit\u00e9",
        "program": [
            "print(1 + 2 = 3)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Une exception de type <code>SyntaxError</code> se produit lorsque Python ne peut pas comprendre votre code.</p>\n<p>Vous avez probablement appel\u00e9 une fonction avec un argument :</p>\n<pre><code>une_fonction (invalide=quelque_chose)\n</code></pre>\n<p>o\u00f9 <code>invalide</code> n'est pas un nom de variable valide dans Python\nsoit parce qu'il commence par un chiffre, soit qu'il est une cha\u00eene,\nou qu'il contient un point, etc.</p>",
                    "text": "    print(1 + 2 = 3)\n          ^^^^^^^\nSyntaxError: expression cannot contain assignment, perhaps you meant \"==\"?\nat line 1\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "equality_vs_assignment"
    },
    {
        "page": "L'op\u00e9rateur d'\u00e9galit\u00e9",
        "program": [
            "nom = 'Melissa'",
            "nouveau_nom = ''",
            "for c in nom:",
            "    if c == 's':",
            "        c = '$'",
            "    nouveau_nom += c",
            "",
            "print(nouveau_nom)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Meli$$a\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_equals_replacing_characters"
    },
    {
        "get_solution": [
            "nouveau_nom = ''",
            "for c in nom:",
            "    if c == 'e':",
            "        c = '3'",
            "    if c == 's':",
            "        c = '$'",
            "    if c == 'a':",
            "        c = '@'",
            "    nouveau_nom += c",
            "",
            "print(nouveau_nom)"
        ],
        "page": "L'op\u00e9rateur d'\u00e9galit\u00e9",
        "program": [
            "nom = 'kesha'",
            "nouveau_nom = ''",
            "for c in nom:",
            "    if c == 'e':",
            "        c = '3'",
            "    if c == 's':",
            "        c = '$'",
            "    if c == 'a':",
            "        c = '@'",
            "    nouveau_nom += c",
            "",
            "print(nouveau_nom)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "k3$h@\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_equals_replacing_characters_exercise"
    },
    {
        "page": "Pr\u00e9sentation de <code>elif</code>, le bloc sinon si",
        "program": [
            "adn = 'AGTAGCGTC'",
            "adn_inverse = ''",
            "for caractere in adn:",
            "    if caractere == 'A':",
            "        caractere = 'T'",
            "    if caractere == 'T':",
            "        caractere = 'A'",
            "    if caractere == 'G':",
            "        caractere = 'C'",
            "    if caractere == 'C':",
            "        caractere = 'G'",
            "    adn_inverse += caractere",
            "",
            "print(adn_inverse)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "AGAAGGGAG\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_example"
    },
    {
        "get_solution": [
            "adn_inverse = ''",
            "for caractere in adn:",
            "    if caractere == 'A':",
            "        caractere = 'T'",
            "    else:",
            "        if caractere == 'T':",
            "            caractere = 'A'",
            "    if caractere == 'G':",
            "        caractere = 'C'",
            "    else:",
            "        if caractere == 'C':",
            "            caractere = 'G'",
            "    adn_inverse += caractere",
            "",
            "print(adn_inverse)"
        ],
        "page": "Pr\u00e9sentation de <code>elif</code>, le bloc sinon si",
        "program": [
            "adn = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'",
            "adn_inverse = ''",
            "for caractere in adn:",
            "    if caractere == 'A':",
            "        caractere = 'T'",
            "    else:",
            "        if caractere == 'T':",
            "            caractere = 'A'",
            "    if caractere == 'G':",
            "        caractere = 'C'",
            "    else:",
            "        if caractere == 'C':",
            "            caractere = 'G'",
            "    adn_inverse += caractere",
            "",
            "print(adn_inverse)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "TCATCGCAGGAATCAATGTCCTACCGAATA\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_example_with_else"
    },
    {
        "page": "Pr\u00e9sentation de <code>elif</code>, le bloc sinon si",
        "program": [
            "adn = 'AGTAGCGTC'",
            "adn_inverse = ''",
            "for caractere in adn:",
            "    if caractere == 'A':",
            "        caractere = 'T'",
            "    elif caractere == 'T':",
            "        caractere = 'A'",
            "    elif caractere == 'G':",
            "        caractere = 'C'",
            "    elif caractere == 'C':",
            "        caractere = 'G'",
            "    adn_inverse += caractere",
            "",
            "print(adn_inverse)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "TCATCGCAG\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_example_with_elif"
    },
    {
        "page": "Autres op\u00e9rateurs de comparaison",
        "program": [
            "1 != 2"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "try_not_equals"
    },
    {
        "page": "Autres op\u00e9rateurs de comparaison",
        "program": [
            "phrase = 'La touche e de mon clavier est cass\u00e9e'",
            "nouvelle_phrase = ''",
            "for c in phrase:",
            "    if c != 'e':",
            "        nouvelle_phrase += c",
            "print(nouvelle_phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "La touch  d mon clavir st cass\u00e9\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "brokn_kyboard"
    },
    {
        "get_solution": [
            "1 < 2"
        ],
        "page": "Autres op\u00e9rateurs de comparaison",
        "program": [
            "1 < 2"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_less_than"
    },
    {
        "get_solution": [
            "'1' < '2'"
        ],
        "page": "Autres op\u00e9rateurs de comparaison",
        "program": [
            "'1' < '2'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "comparing_strings"
    },
    {
        "page": "Autres op\u00e9rateurs de comparaison",
        "program": [
            "pourcentage = 73",
            "",
            "if pourcentage < 40:",
            "    note = 'F'",
            "elif pourcentage < 60:",
            "    note = 'C'",
            "elif pourcentage < 80:",
            "    note = 'B'",
            "else:",
            "    note = 'A'",
            "",
            "print(note)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "B",
                "choices": [
                    "F",
                    "C",
                    "B",
                    "A",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "B\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "grades_example"
    },
    {
        "get_solution": [
            "if x_1 < x_2:",
            "    if x_1 < x_3:",
            "        premier = x_1",
            "    else:",
            "        premier = x_3",
            "else:",
            "    if x_2 < x_3:",
            "        premier = x_2",
            "    else:",
            "        premier = x_3",
            "print(premier)"
        ],
        "page": "Autres op\u00e9rateurs de comparaison",
        "program": [
            "x_1 = 1",
            "x_2 = 2",
            "x_3 = 3",
            "if x_1 < x_2:",
            "    if x_1 < x_3:",
            "        premier = x_1",
            "    else:",
            "        premier = x_3",
            "else:",
            "    if x_2 < x_3:",
            "        premier = x_2",
            "    else:",
            "        premier = x_3",
            "print(premier)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "min_three_exercise"
    },
    {
        "page": "Pr\u00e9sentation des listes",
        "program": [
            "mots = ['Ceci', 'est', 'une', 'liste']",
            "",
            "for mot in mots:",
            "    print(mot)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Ceci\nest\nune\nliste\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_list"
    },
    {
        "page": "Pr\u00e9sentation des listes",
        "program": [
            "x = 1",
            "choses = ['Hello', x, x + 3]",
            "print(choses)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['Hello', 1, 4]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "can_contain_anything"
    },
    {
        "page": "Pr\u00e9sentation des listes",
        "program": [
            "nombres = [3, 1, 4, 1, 5, 9]",
            "",
            "total = 0",
            "for nombre in nombres:",
            "    total += nombre",
            "",
            "print(total)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "23\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "numbers_sum"
    },
    {
        "get_solution": [
            "total = ''",
            "for mot in mots:",
            "    total += mot",
            "",
            "print(total)"
        ],
        "page": "Pr\u00e9sentation des listes",
        "program": [
            "mots = ['This', 'is', 'a', 'list']",
            "total = ''",
            "for mot in mots:",
            "    total += mot",
            "",
            "print(total)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Thisisalist\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "strings_sum"
    },
    {
        "get_solution": [
            "total = ''",
            "pas_premier = False",
            "",
            "for mot in mots:",
            "    if pas_premier:",
            "        total += separateur",
            "    total += mot",
            "    pas_premier = True",
            "",
            "print(total)"
        ],
        "page": "Pr\u00e9sentation des listes",
        "program": [
            "mots = ['This', 'is', 'a', 'list']",
            "separateur = ' - '",
            "total = ''",
            "pas_premier = False",
            "",
            "for mot in mots:",
            "    if pas_premier:",
            "        total += separateur",
            "    total += mot",
            "    pas_premier = True",
            "",
            "print(total)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "This - is - a - list\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "strings_sum_bonus"
    },
    {
        "get_solution": [
            "double = []",
            "for nombre in nombres:",
            "    double += [nombre * 2]",
            "print(double)"
        ],
        "page": "Construction de nouvelles listes",
        "program": [
            "nombres = [3, 1, 4, 1, 5, 9, 2, 6, 5]",
            "double = []",
            "for nombre in nombres:",
            "    double += [nombre * 2]",
            "print(double)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[6, 2, 8, 2, 10, 18, 4, 12, 10]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_numbers"
    },
    {
        "get_solution": [
            "grands_nombres = []",
            "for nombre in nombres:",
            "    if nombre > 5:",
            "        grands_nombres.append(nombre)",
            "print(grands_nombres)"
        ],
        "page": "Construction de nouvelles listes",
        "program": [
            "nombres = [3, 1, 4, 1, 5, 9, 2, 6, 5]",
            "grands_nombres = []",
            "for nombre in nombres:",
            "    if nombre > 5:",
            "        grands_nombres.append(nombre)",
            "print(grands_nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[9, 6]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "filter_numbers"
    },
    {
        "get_solution": [
            "trouve = False",
            "for chose in choses:",
            "    if chose == cible:",
            "        trouve = True",
            "",
            "print(trouve)"
        ],
        "page": "Utilisation de <code>break</code> pour sortir pr\u00e9matur\u00e9ment d'une boucle",
        "program": [
            "choses = ['This', 'is', 'a', 'list']",
            "cible = 'is'",
            "trouve = False",
            "for chose in choses:",
            "    if chose == cible:",
            "        trouve = True",
            "",
            "print(trouve)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "list_contains_exercise"
    },
    {
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "mots = ['Ceci', 'est', 'une', 'liste']",
            "",
            "print(mots[0])",
            "print(mots[1])",
            "print(mots[2])",
            "print(mots[3])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Ceci\nest\nune\nliste\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_subscripting"
    },
    {
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "mots[4]"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "list index out of range",
                                "type": "IndexError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"n n-ExecutingNode\">mots</span><span class=\"p p-ExecutingNode\">[</span><span class=\"mi mi-ExecutingNode\">4</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">mots</span>\n",
                                            "value": "<span class=\"p\">[</span><span class=\"s1\">&#39;Ceci&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;est&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;une&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;liste&#39;</span><span class=\"p\">]</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Une exception <code>IndexError</code> se produit lorsque vous essayez d\u2019obtenir un \u00e9l\u00e9ment\nd'une liste, d'un tuple, ou d'un objet similaire (s\u00e9quence), \u00e0 l\u2019aide d\u2019un indice qui\nn\u2019existe pas; typiquement, c\u2019est parce que l\u2019indice que vous donnez\nest plus grand que la longueur de la s\u00e9quence.</p>\n<p>Vous avez essay\u00e9 d\u2019obtenir l\u2019\u00e9l\u00e9ment avec l\u2019indice <code>4</code> de <code>mots</code>,\nune liste (<code>list</code>) de longueur <code>4</code>.\nLes indices valides de <code>mots</code> sont les entiers allant de <code>-4</code> \u00e0 <code>3</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | mots[4]",
                        "           ^^^^^^^",
                        "mots = ['Ceci', 'est', 'une', 'liste']",
                        "",
                        "IndexError: list index out of range"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "index_error"
    },
    {
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "mots = ['Ceci', 'est', 'une', 'liste']",
            "indices = [0, 1, 2, 3]",
            "",
            "for i in indices:",
            "    print(i)",
            "    print(mots[i])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "0\nCeci\n1\nest\n2\nune\n3\nliste",
                "choices": [
                    "Ceci\nest\nune\nliste",
                    "0\n1\n2\n3",
                    "0\nCeci\n1\nest\n2\nune\n3\nliste",
                    "Ceci\n0\nest\n1\nune\n2\nliste\n3",
                    "0\n1\n2\n3\nCeci\nest\nune\nliste",
                    "Ceci\nest\nune\nliste\n0\n1\n2\n3",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "0\nCeci\n1\nest\n2\nune\n3\nliste\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_len_and_range"
    },
    {
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "mots = ['Ceci', 'est', 'une', 'liste']",
            "indices = range(4)",
            "",
            "for i in indices:",
            "    print(i)",
            "    print(mots[i])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "0\nCeci\n1\nest\n2\nune\n3\nliste\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "range_len"
    },
    {
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "indices = range(4)",
            "",
            "print(indices[0])",
            "print(indices[1])",
            "print(indices[2])",
            "print(indices[3])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "0\n1\n2\n3",
                "choices": [
                    "0\n1\n2\n3",
                    "1\n2\n3\n4",
                    "[0]\n[1]\n[2]\n[3]",
                    "[1]\n[2]\n[3]\n[4]",
                    "Ceci\nest\nune\nliste",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "0\n1\n2\n3\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "printing_the_range"
    },
    {
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "indices[4]"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Erreur",
                "choices": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "range object index out of range",
                                "type": "IndexError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"n n-ExecutingNode\">indices</span><span class=\"p p-ExecutingNode\">[</span><span class=\"mi mi-ExecutingNode\">4</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">indices</span>\n",
                                            "value": "<span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Une exception <code>IndexError</code> se produit lorsque vous essayez d\u2019obtenir un \u00e9l\u00e9ment\nd'une liste, d'un tuple, ou d'un objet similaire (s\u00e9quence), \u00e0 l\u2019aide d\u2019un indice qui\nn\u2019existe pas; typiquement, c\u2019est parce que l\u2019indice que vous donnez\nest plus grand que la longueur de la s\u00e9quence.</p>\n<p>Vous avez essay\u00e9 d\u2019obtenir l\u2019\u00e9l\u00e9ment avec l\u2019indice <code>4</code> de <code>indices</code>,\n<code>range object</code> de longueur <code>4</code>.\nLes indices valides de <code>indices</code> sont les entiers allant de <code>-4</code> \u00e0 <code>3</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | indices[4]",
                        "           ^^^^^^^^^^",
                        "indices = range(0, 4)",
                        "",
                        "IndexError: range object index out of range"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "indices_out_of_bounds"
    },
    {
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "range(4)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "range(0, 4)\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "range_almost_the_same_as_list"
    },
    {
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "list(range(4))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[0, 1, 2, 3]",
                "choices": [
                    "range(4)",
                    "range(0, 4)",
                    "list(range(4))",
                    "list(range(0, 4))",
                    "range(0, 1, 2, 3)",
                    "(0, 1, 2, 3)",
                    "[0, 1, 2, 3]",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "[0, 1, 2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "range_versus_list"
    },
    {
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "mots = ['Ceci', 'est', 'une', 'liste']",
            "print(len(mots))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "4",
                "choices": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "4\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "using_len_first_time"
    },
    {
        "get_solution": [
            "print(mots[len(mots) - 1])"
        ],
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "mots = ['Python']",
            "print(mots[len(mots) - 1])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Python\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_last_element"
    },
    {
        "get_solution": [
            "for indice in range(len(mots)):",
            "    print(indice)",
            "    print(mots[indice])"
        ],
        "page": "Lecture d'\u00e9l\u00e9ments \u00e0 une position, <code>range()</code> et <code>len()</code>",
        "program": [
            "mots = ['Python']",
            "for indice in range(len(mots)):",
            "    print(indice)",
            "    print(mots[indice])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "0\nPython\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_indices_and_words"
    },
    {
        "page": "Exercices avec <code>range</code> et <code>len</code>",
        "program": [
            "choses = ['on', 'the', 'way', 'to', 'the', 'store']",
            "cible = 'the'",
            "for i in range(len(choses)):",
            "    if cible == choses[i]:",
            "        print(i)"
        ],
        "response": {
            "message": "<p>Vous y \u00eates presque ! Cependant, cela affiche tous les indices, pas seulement le premier.</p>",
            "passed": false,
            "result": [
                {
                    "text": "1\n4\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_exercise"
    },
    {
        "page": "Exercices avec <code>range</code> et <code>len</code>",
        "program": [
            "choses = ['on', 'the', 'way', 'to', 'the', 'store']",
            "cible = 'the'",
            "answer = None",
            "for i in range(len(choses)):",
            "    if cible == choses[i]:",
            "        answer = i",
            "print(answer)"
        ],
        "response": {
            "message": "<p>Vous y \u00eates presque ! Cependant, cela affiche le <em>dernier</em> indice, et non le premier.</p>",
            "passed": false,
            "result": [
                {
                    "text": "4\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(choses)):",
            "    if cible == choses[i]:",
            "        print(i)",
            "        break"
        ],
        "page": "Exercices avec <code>range</code> et <code>len</code>",
        "program": [
            "choses = ['on', 'the', 'way', 'to', 'the', 'store']",
            "cible = 'the'",
            "for i in range(len(choses)):",
            "    if cible == choses[i]:",
            "        print(i)",
            "        break"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(chaine_1)):",
            "    caractere_1 = chaine_1[i]",
            "    caractere_2 = chaine_2[i]",
            "    print(caractere_1 + ' ' + caractere_2)"
        ],
        "page": "Exercices avec <code>range</code> et <code>len</code>",
        "program": [
            "chaine_1 = 'Hello'",
            "chaine_2 = 'World'",
            "for i in range(len(chaine_1)):",
            "    caractere_1 = chaine_1[i]",
            "    caractere_2 = chaine_2[i]",
            "    print(caractere_1 + ' ' + caractere_2)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "H W\ne o\nl r\nl l\no d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_exercise"
    },
    {
        "get_solution": [
            "longueur_1 = len(chaine_1)",
            "longueur_2 = len(chaine_2)",
            "",
            "if longueur_1 > longueur_2:",
            "    longueur = longueur_1",
            "else:",
            "    longueur = longueur_2",
            "",
            "for i in range(longueur):",
            "    if i < len(chaine_1):",
            "        caractere_1 = chaine_1[i]",
            "    else:",
            "        caractere_1 = ' '",
            "",
            "    if i < len(chaine_2):",
            "        caractere_2 = chaine_2[i]",
            "    else:",
            "        caractere_2 = ' '",
            "",
            "    print(caractere_1 + ' ' + caractere_2)"
        ],
        "page": "Exercices avec <code>range</code> et <code>len</code>",
        "program": [
            "chaine_1 = 'Goodbye'",
            "chaine_2 = 'World'",
            "longueur_1 = len(chaine_1)",
            "longueur_2 = len(chaine_2)",
            "",
            "if longueur_1 > longueur_2:",
            "    longueur = longueur_1",
            "else:",
            "    longueur = longueur_2",
            "",
            "for i in range(longueur):",
            "    if i < len(chaine_1):",
            "        caractere_1 = chaine_1[i]",
            "    else:",
            "        caractere_1 = ' '",
            "",
            "    if i < len(chaine_2):",
            "        caractere_2 = chaine_2[i]",
            "    else:",
            "        caractere_2 = ' '",
            "",
            "    print(caractere_1 + ' ' + caractere_2)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "G W\no o\no r\nd l\nb d\ny  \ne  \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_longest_exercise"
    },
    {
        "page": "Vocabulaire sur les appels de fonctions et les m\u00e9thodes",
        "program": [
            "print(len)",
            "print(print)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "<built-in function len>\n<built-in function print>\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_functions"
    },
    {
        "page": "Vocabulaire sur les appels de fonctions et les m\u00e9thodes",
        "program": [
            "print(callable(len))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_callable"
    },
    {
        "page": "Vocabulaire sur les appels de fonctions et les m\u00e9thodes",
        "program": [
            "f = 'une chaine'",
            "print(callable(f))",
            "f()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                },
                {
                    "data": [
                        {
                            "didyoumean": [
                                "'str[value]'"
                            ],
                            "exception": {
                                "message": "'str' object is not callable",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 3,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 3,
                                            "text": "<span class=\"n n-ExecutingNode\">f</span><span class=\"p p-ExecutingNode\">()</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">f</span>\n",
                                            "value": "<span class=\"s1\">&#39;une chaine&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Une exception <code>TypeError</code> est g\u00e9n\u00e9ralement caus\u00e9e par une tentative\nde combiner deux types d\u2019objets incompatibles,\nen invoquant une fonction avec le mauvais type d\u2019objet,\nou en tentant d'effectuer une op\u00e9ration non permise sur un type d'objet donn\u00e9.</p>\n<p>En raison des parenth\u00e8ses, <code>f</code> est interpr\u00e9t\u00e9 par Python\ncomme indiquant une invocation de fonction pour <code>f</code>.\nCelui-ci n'est pas une fonction mais plut\u00f4t un objet de type <code>str</code>\nne pouvant pas \u00eatre invoqu\u00e9.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 3, in <module>",
                        "       2 | print(callable(f))",
                        "-->    3 | f()",
                        "           ^^^",
                        "f = 'une chaine'",
                        "",
                        "TypeError: 'str' object is not callable"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "not_callable"
    },
    {
        "page": "Vocabulaire sur les appels de fonctions et les m\u00e9thodes",
        "program": [
            "choses = [1, 2, 3]",
            "longueur = len(choses)",
            "affichage = print(longueur)",
            "print(affichage)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "3\nNone\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_returns_none"
    },
    {
        "page": "Vocabulaire sur les appels de fonctions et les m\u00e9thodes",
        "program": [
            "choses = print([1, 2, 3])",
            "longueur = len(choses)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n",
                    "type": "stdout"
                },
                {
                    "data": [
                        {
                            "didyoumean": [
                                "implement \"__len__\" on NoneType"
                            ],
                            "exception": {
                                "message": "object of type 'NoneType' has no len()",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 2,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 2,
                                            "text": "<span class=\"n\">longueur</span> <span class=\"o\">=</span> <span class=\"nb nb-ExecutingNode\">len</span><span class=\"p p-ExecutingNode\">(</span><span class=\"n n-ExecutingNode\">choses</span><span class=\"p p-ExecutingNode\">)</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">choses</span>\n",
                                            "value": "<span class=\"kc\">None</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Une exception <code>TypeError</code> est g\u00e9n\u00e9ralement caus\u00e9e par une tentative\nde combiner deux types d\u2019objets incompatibles,\nen invoquant une fonction avec le mauvais type d\u2019objet,\nou en tentant d'effectuer une op\u00e9ration non permise sur un type d'objet donn\u00e9.</p>\n<p>Aucune information n\u2019est disponible au sujet de cette exception.\nVeuillez signaler cet exemple \u00e0\nhttps://github.com/friendly-traceback/friendly-traceback/issues/new\nSi vous utilisez un REPL, utilisez <code>www('bug')</code> pour le faire.</p>\n<p>Si vous utilisez la console Friendly, utilisez <code>www()</code> pour\nfaire une recherche sur Internet pour ce cas particulier.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 2, in <module>",
                        "       1 | choses = print([1, 2, 3])",
                        "-->    2 | longueur = len(choses)",
                        "                      ^^^^^^^^^^^",
                        "choses = None",
                        "",
                        "TypeError: object of type 'NoneType' has no len()"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "len_of_none"
    },
    {
        "page": "Vocabulaire sur les appels de fonctions et les m\u00e9thodes",
        "program": [
            "mot = 'Hello'",
            "print(mot.upper)",
            "print(mot.upper())"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "<built-in method upper of str object at 0xABC>\nHELLO\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "methods_of_str"
    },
    {
        "page": "Vocabulaire sur les appels de fonctions et les m\u00e9thodes",
        "program": [
            "mot = 'Hello'",
            "mot.append('!')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "'str' object has no attribute 'append'",
                                "type": "AttributeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 2,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 2,
                                            "text": "<span class=\"n n-ExecutingNode\">mot</span><span class=\"o o-ExecutingNode\">.</span><span class=\"n n-ExecutingNode\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;!&#39;</span><span class=\"p\">)</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">mot</span>\n",
                                            "value": "<span class=\"s1\">&#39;Hello&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Une exception <code>AttributeError</code> se produit lorsque le code contient quelque chose comme\n    <code>object.x</code>\net <code>x</code> n\u2019est pas une m\u00e9thode ou un attribut (variable) appartenant \u00e0 <code>objet</code>.</p>\n<p>L\u2019objet <code>mot</code> n\u2019a pas d\u2019attribut nomm\u00e9 <code>append</code>.\nVoici quelques-uns de ses attributs connus :\n<code>capitalize, casefold, center, count, encode, endswith, expandtabs, find, format, ...</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 2, in <module>",
                        "       1 | mot = 'Hello'",
                        "-->    2 | mot.append('!')",
                        "           ^^^^^^^^^^",
                        "mot = 'Hello'",
                        "",
                        "AttributeError: 'str' object has no attribute 'append'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "no_append_for_str"
    },
    {
        "page": "Fonctions et m\u00e9thodes sur les listes",
        "program": [
            "nombres = [1, 2, 3]",
            "nouveaux_nombres = nombres + [4, 5]",
            "print(nouveaux_nombres)",
            "print(nombres)",
            "nombres.append(4)",
            "print(nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3, 4, 5]\n[1, 2, 3]\n[1, 2, 3, 4]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "append_vs_concatenate"
    },
    {
        "page": "Fonctions et m\u00e9thodes sur les listes",
        "program": [
            "nombres = [1, 2, 3]",
            "nombres[1] = 9",
            "print(nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[1, 9, 3]",
                "choices": [
                    "[9, 1, 2, 3]",
                    "[1, 9, 2, 3]",
                    "[1, 2, 9, 3]",
                    "[9, 2, 3]",
                    "[1, 9, 3]",
                    "[1, 2, 9]",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "[1, 9, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "subscript_assignment_predict"
    },
    {
        "page": "Fonctions et m\u00e9thodes sur les listes",
        "program": [
            "[7, 8, 9, 8].index(8)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "1",
                "choices": [
                    "[7, 8]",
                    "[7, 8, 9]",
                    "[7, 8, 9, 8]",
                    "1",
                    "2",
                    "3",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_predict_exercise"
    },
    {
        "page": "Fonctions et m\u00e9thodes sur les listes",
        "program": [
            "nombres = [1, 2, 3]",
            "print(nombres.pop(1))",
            "print(nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "2\n[1, 3]",
                "choices": [
                    "1\n[1, 3]",
                    "2\n[1, 3]",
                    "1\n[2, 3]",
                    "2\n[2, 3]",
                    "1\n[2, 1, 3]",
                    "2\n[2, 1, 3]",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "2\n[1, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "pop_predict_exercise"
    },
    {
        "page": "Fonctions et m\u00e9thodes sur les listes",
        "program": [
            "nombres = [1, 2, 3]",
            "nombres.remove(1)",
            "print(nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[2, 3]",
                "choices": [
                    "[1, 2]",
                    "[1, 3]",
                    "[2, 3]",
                    "1",
                    "2",
                    "3",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "[2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "remove_predict_exercise"
    },
    {
        "get_solution": [
            "x = ['a', 'b', 'c']",
            "x.append(x.pop(0))",
            "print(x)"
        ],
        "page": "Fonctions et m\u00e9thodes sur les listes",
        "program": [
            "x = ['a', 'b', 'c']",
            "x.append(x.pop(0))",
            "print(x)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['b', 'c', 'a']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "pop_remove_index_subscript_assignment"
    },
    {
        "get_solution": [
            "x = ['a', 'b', 'c']",
            "x[len(x) - 1] = x[0]",
            "print(x)"
        ],
        "page": "Fonctions et m\u00e9thodes sur les listes",
        "program": [
            "x = ['a', 'b', 'c']",
            "x[len(x) - 1] = x[0]",
            "print(x)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['a', 'b', 'a']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "subscript_assignment_exercise"
    },
    {
        "get_solution": [
            "x = ['a', 'b', 'c']",
            "y = x + [x[0]]",
            "print(y)"
        ],
        "page": "Fonctions et m\u00e9thodes sur les listes",
        "program": [
            "x = ['a', 'b', 'c']",
            "y = x + [x[0]]",
            "print(y)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['a', 'b', 'c', 'a']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "negative_index_concatenation_exercise"
    },
    {
        "get_solution": [
            "x = [1, 2, 0, 3]",
            "x.pop(x.index(0))",
            "print(x)"
        ],
        "page": "Fonctions et m\u00e9thodes sur les listes",
        "program": [
            "x = [1, 2, 0, 3]",
            "x.pop(x.index(0))",
            "print(x)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "remove_exercise"
    },
    {
        "page": "Plus de fonctions et de m\u00e9thodes sur les listes",
        "program": [
            "sorted([2, 9, 1, 8, 5, 6])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[1, 2, 5, 6, 8, 9]",
                "choices": [
                    "[9, 8, 6, 5, 2, 1]",
                    "[1, 8, 6, 2, 5, 9]",
                    "[1, 2, 5, 6, 8, 9]",
                    "[2, 9, 1, 8, 5, 6]",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "[1, 2, 5, 6, 8, 9]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sorted_predict_exercise"
    },
    {
        "page": "Plus de fonctions et de m\u00e9thodes sur les listes",
        "program": [
            "nombres = [2, 9, 1, 8, 5, 64]",
            "print(7 in nombres)",
            "print(2 in nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "False\nTrue",
                "choices": [
                    "True\nFalse",
                    "False\nTrue",
                    "True\nTrue",
                    "False\nFalse",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "False\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "in_predict_exercise"
    },
    {
        "page": "Plus de fonctions et de m\u00e9thodes sur les listes",
        "program": [
            "sum([5, 3, 4])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "12",
                "choices": [
                    "10",
                    "12",
                    "7",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "12\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sum_predict_exercise"
    },
    {
        "page": "Plus de fonctions et de m\u00e9thodes sur les listes",
        "program": [
            "[1, 2, 3, 2, 7, 2, 5].count(2)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "3",
                "choices": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "3\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "count_predict_exercise"
    },
    {
        "get_solution": [
            "x = [1, 2, 0, 3]",
            "y = x.count(1) > 0",
            "print(y)"
        ],
        "page": "Plus de fonctions et de m\u00e9thodes sur les listes",
        "program": [
            "x = [1, 2, 0, 3]",
            "y = x.count(1) > 0",
            "print(y)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "count_in_sorted_sum"
    },
    {
        "get_solution": [
            "x = [15, 12, -6, 3]",
            "y = sum(x) / len(x)",
            "print(y)"
        ],
        "page": "Plus de fonctions et de m\u00e9thodes sur les listes",
        "program": [
            "x = [15, 12, -6, 3]",
            "y = sum(x) / len(x)",
            "print(y)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "6.0\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "average_exercise"
    },
    {
        "get_solution": [
            "x = 100",
            "y = sum(range(x + 1))",
            "print(y)"
        ],
        "page": "Plus de fonctions et de m\u00e9thodes sur les listes",
        "program": [
            "x = 100",
            "y = sum(range(x + 1))",
            "print(y)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "5050\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sum_range_exercise"
    },
    {
        "get_solution": [
            "x = [12, -6, 2, -1, 3]",
            "y = sorted(x)[1]",
            "print(y)"
        ],
        "page": "Plus de fonctions et de m\u00e9thodes sur les listes",
        "program": [
            "x = [12, -6, 2, -1, 3]",
            "y = sorted(x)[1]",
            "print(y)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "-1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "second_smallest_in_list_exercise"
    },
    {
        "page": "M\u00e9thodes sur les chaines et immuabilit\u00e9",
        "program": [
            "print('tes' in 'fait tes devoirs et apprend tes le\u00e7ons')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_in_step"
    },
    {
        "page": "M\u00e9thodes sur les chaines et immuabilit\u00e9",
        "program": [
            "chaine = 'fait tes devoirs et apprend tes le\u00e7ons'",
            "print(chaine.count('tes'))",
            "print(chaine.index('tes'))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "2\n5\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_count_index"
    },
    {
        "page": "M\u00e9thodes sur les chaines et immuabilit\u00e9",
        "program": [
            "'Python'.append(' est sympa !')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "'str' object has no attribute 'append'",
                                "type": "AttributeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"s1 s1-ExecutingNode\">&#39;Python&#39;</span><span class=\"o o-ExecutingNode\">.</span><span class=\"n n-ExecutingNode\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39; est sympa !&#39;</span><span class=\"p\">)</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>Une exception <code>AttributeError</code> se produit lorsque le code contient quelque chose comme\n    <code>object.x</code>\net <code>x</code> n\u2019est pas une m\u00e9thode ou un attribut (variable) appartenant \u00e0 <code>objet</code>.</p>\n<p>L\u2019objet <code>'Python'</code> n\u2019a pas d\u2019attribut nomm\u00e9 <code>append</code>.\nVoici quelques-uns de ses attributs connus :\n<code>capitalize, casefold, center, count, encode, endswith, expandtabs, find, format, ...</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | 'Python'.append(' est sympa !')",
                        "           ^^^^^^^^^^^^^^^",
                        "",
                        "AttributeError: 'str' object has no attribute 'append'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "mutation_string_append"
    },
    {
        "page": "M\u00e9thodes sur les chaines et immuabilit\u00e9",
        "program": [
            "phrase = \"Python brille !\"",
            "nouvelle_phrase = phrase.upper()",
            "print(phrase)",
            "print(nouvelle_phrase)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Python brille !\nPYTHON BRILLE !\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_lower_upper"
    },
    {
        "get_solution": [
            "max([21, 55, 4, 91, 62, 49])"
        ],
        "page": "Recherche d'informations sur le web",
        "program": [
            "max([21, 55, 4, 91, 62, 49])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "91\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sum_list"
    },
    {
        "get_solution": [
            "nombres = [1, 2, 3, 4, 5]",
            "nombres.insert(2, 9)",
            "print(nombres)"
        ],
        "page": "Recherche d'informations sur le web",
        "program": [
            "nombres = [1, 2, 3, 4, 5]",
            "nombres.insert(2, 9)",
            "print(nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 9, 3, 4, 5]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "list_insert"
    },
    {
        "page": "Recherche d'informations sur le web",
        "program": [
            "dir([])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dir_list"
    },
    {
        "page": "Observation des programmes avec Python Tutor",
        "program": [
            "des_nombres = [2, 4, 8, 1, 9, 7]",
            "",
            "petits_nombres = []",
            "grands_nombres = []",
            "",
            "for nombre in des_nombres:",
            "    if nombre <= 5:",
            "        petits_nombres.append(nombre)",
            "    else:",
            "        grands_nombres.append(nombre)",
            "",
            "print(petits_nombres)",
            "print(grands_nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[2, 4, 1]\n[8, 9, 7]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "run_with_python_tutor"
    },
    {
        "page": "<code>==</code> ou <code>is</code>, test d'\u00e9galit\u00e9 ou d'identit\u00e9",
        "program": [
            "liste_1 = [1, 2, 3]",
            "liste_2 = [1, 2, 3]",
            "",
            "print(liste_1)",
            "print(liste_2)",
            "print(liste_1 == liste_2)",
            "",
            "print(liste_1 is liste_2)",
            "",
            "liste_1.append(4)",
            "",
            "print(liste_1)",
            "print(liste_2)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n[1, 2, 3]\nTrue\nFalse\n[1, 2, 3, 4]\n[1, 2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "two_separate_lists"
    },
    {
        "page": "<code>==</code> ou <code>is</code>, test d'\u00e9galit\u00e9 ou d'identit\u00e9",
        "program": [
            "liste_1 = [1, 2, 3]",
            "liste_2 = liste_1",
            "",
            "print(liste_1)",
            "print(liste_2)",
            "print(liste_1 == liste_2)",
            "",
            "print(liste_1 is liste_2)",
            "",
            "liste_1.append(4)",
            "",
            "print(liste_1)",
            "print(liste_2)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n[1, 2, 3]\nTrue\nTrue\n[1, 2, 3, 4]\n[1, 2, 3, 4]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "same_list"
    },
    {
        "page": "Modifications pendant l'it\u00e9ration",
        "program": [
            "nombres = [10, 7, 8, 3, 12, 15]",
            "for i in range(len(nombres)):",
            "    nombre = nombres[i]",
            "    if nombre <= 10:",
            "        nombres.pop(i)",
            "print(nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "list index out of range",
                                "type": "IndexError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 3,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 3,
                                            "text": "<span class=\"n\">nombre</span> <span class=\"o\">=</span> <span class=\"n n-ExecutingNode\">nombres</span><span class=\"p p-ExecutingNode\">[</span><span class=\"n n-ExecutingNode\">i</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">i</span>\n",
                                            "value": "<span class=\"mi\">4</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nombres</span><span class=\"p\">)</span>\n",
                                            "value": "<span class=\"mi\">4</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">nombre</span>\n",
                                            "value": "<span class=\"mi\">15</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">nombre</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span>\n",
                                            "value": "<span class=\"kc\">False</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">nombres</span>\n",
                                            "value": "<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nombres</span><span class=\"p\">))</span>\n",
                                            "value": "<span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Une exception <code>IndexError</code> se produit lorsque vous essayez d\u2019obtenir un \u00e9l\u00e9ment\nd'une liste, d'un tuple, ou d'un objet similaire (s\u00e9quence), \u00e0 l\u2019aide d\u2019un indice qui\nn\u2019existe pas; typiquement, c\u2019est parce que l\u2019indice que vous donnez\nest plus grand que la longueur de la s\u00e9quence.</p>\n<p>Vous avez essay\u00e9 d\u2019obtenir l\u2019\u00e9l\u00e9ment avec l\u2019indice <code>4</code> de <code>nombres</code>,\nune liste (<code>list</code>) de longueur <code>4</code>.\nLes indices valides de <code>nombres</code> sont les entiers allant de <code>-4</code> \u00e0 <code>3</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 3, in <module>",
                        "       2 | for i in range(len(nombres)):",
                        "-->    3 |     nombre = nombres[i]",
                        "                        ^^^^^^^^^^",
                        "i = 4",
                        "len(nombres) = 4",
                        "nombre = 15",
                        "nombre <= 10 = False",
                        "nombres = [7, 3, 12, 15]",
                        "range(len(nombres)) = range(0, 4)",
                        "",
                        "IndexError: list index out of range"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "run_broken_with_python_tutor"
    },
    {
        "page": "Modifications pendant l'it\u00e9ration",
        "program": [
            "nombres = [10, 7, 8, 3, 12, 15]",
            "for nombre in nombres:",
            "    if nombre <= 10:",
            "        nombres.remove(nombre)",
            "print(nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[7, 3, 12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "remove_instead_of_pop"
    },
    {
        "page": "Modifications pendant l'it\u00e9ration",
        "program": [
            "nombres = [10, 7, 8, 3, 12, 15]",
            "for nombre in nombres.copy():",
            "    if nombre <= 10:",
            "        nombres.remove(nombre)",
            "print(nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_copy"
    },
    {
        "page": "Modifications pendant l'it\u00e9ration",
        "program": [
            "nombres = [10, 7, 8, 3, 12, 15]",
            "grands_nombres = nombres.copy()",
            "",
            "for nombre in nombres:",
            "    if nombre <= 10:",
            "        grands_nombres.remove(nombre)",
            "print(grands_nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_copy2"
    },
    {
        "page": "Modifications pendant l'it\u00e9ration",
        "program": [
            "nombres = [10, 7, 8, 3, 12, 15]",
            "grands_nombres = []",
            "",
            "for nombre in nombres:",
            "    if nombre > 10:",
            "        grands_nombres.append(nombre)",
            "print(grands_nombres)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_new_list"
    },
    {
        "page": "Guillemets simples et doubles dans les chaines",
        "program": [
            "print('Alice s'en va diner')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Une exception de type <code>SyntaxError</code> se produit lorsque Python ne peut pas comprendre votre code.</p>\n<p>Pr\u00e9sentement, je ne peux pas deviner la cause probable de cette erreur.\nEssayez d\u2019examiner attentivement la ligne indiqu\u00e9e ainsi que celle\nimm\u00e9diatement au dessus pour voir si vous pouvez identifier\nun mot mal orthographi\u00e9, ou des symboles manquants, comme (,), [,],:, etc.</p>\n<p>Si votre code n'utilise pas d'annotations de type,\net que vous pensez que friendly devrait\npouvoir l'analyser correctement, SVP rapporter ce cas au site suivant:\nhttps://github.com/friendly-traceback/friendly-traceback/issues</p>",
                    "text": "    print('Alice s'en va diner')\n          ^^^^^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\nat line 1\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "single_quotes_apostrophe"
    },
    {
        "page": "Guillemets simples et doubles dans les chaines",
        "program": [
            "print(\"Alice s'en va diner\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Alice s'en va diner\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_quotes"
    },
    {
        "page": "Guillemets simples et doubles dans les chaines",
        "program": [
            "'Alice' == \"Alice\""
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "single_double_quotes_equal"
    },
    {
        "get_solution": [
            "print(\"Un cas n\u2019est jamais assez particulier pour autoriser de briser une r\u00e8gle.\")"
        ],
        "page": "Guillemets simples et doubles dans les chaines",
        "program": [
            "print(\"Un cas n\u2019est jamais assez particulier pour autoriser de briser une r\u00e8gle.\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Un cas n\u2019est jamais assez particulier pour autoriser de briser une r\u00e8gle.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_quote_exercise"
    },
    {
        "get_solution": [
            "print('\"Parler est facile. Montre-moi le code.\" - Linus Torvalds')"
        ],
        "page": "Guillemets simples et doubles dans les chaines",
        "program": [
            "print('\"Parler est facile. Montre-moi le code.\" - Linus Torvalds')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "\"Parler est facile. Montre-moi le code.\" - Linus Torvalds\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "single_quote_exercise"
    },
    {
        "page": "Les f-string",
        "program": [
            "nom = \"Alice\"",
            "ami = 'Bob'",
            "repas = \"d\u00e9jeuner\"",
            "print(f\"{nom} est all\u00e9(e) {repas} avec {ami}.\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Alice est all\u00e9(e) d\u00e9jeuner avec Bob.",
                "choices": [
                    "f\"{nom} est all\u00e9(e) {repas} avec {ami}.\"",
                    "\"{nom} est all\u00e9(e) {repas} avec {ami}.\"",
                    "{nom} est all\u00e9(e) {repas} avec {ami}.",
                    "'nom' est all\u00e9(e) 'repas' avec 'ami'.",
                    "nom est all\u00e9(e) repas avec ami.",
                    "\"Alice\" est all\u00e9(e) \"d\u00e9jeuner\" avec 'Bob'.",
                    "'Alice' est all\u00e9(e) 'd\u00e9jeuner' avec 'Bob'.",
                    "\"Alice est all\u00e9(e) d\u00e9jeuner avec Bob.\"",
                    "Alice est all\u00e9(e) d\u00e9jeuner avec Bob.",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "Alice est all\u00e9(e) d\u00e9jeuner avec Bob.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introduce_f_strings"
    },
    {
        "page": "Les f-string",
        "program": [
            "nom = \"Alice\"",
            "age = 20",
            "print(\"Bonjour \" + nom + \". Vous avez \" + age + \" ans.\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Erreur",
                "choices": [
                    "\"Bonjour \" + nom + \". Vous avez\" + age +\" ans.\"",
                    "Bonjour nom. Vous avez age ans.",
                    "Bonjour Alice. Vous avez 20 ans.",
                    "Bonjour 'Alice'. Vous avez 20 ans.",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "can only concatenate str (not \"int\") to str",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 3,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 3,
                                            "text": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2 s2-ExecutingNode\">&quot;Bonjour &quot;</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"n n-ExecutingNode\">nom</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"s2 s2-ExecutingNode\">&quot;. Vous avez &quot;</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"n n-ExecutingNode\">age</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; ans.&quot;</span><span class=\"p\">)</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"s2\">&quot;Bonjour &quot;</span> <span class=\"o\">+</span> <span class=\"n\">nom</span>\n",
                                            "value": "<span class=\"s1\">&#39;Bonjour Alice&#39;</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"s2\">&quot;Bonjour &quot;</span> <span class=\"o\">+</span> <span class=\"n\">nom</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;. Vous avez &quot;</span>\n",
                                            "value": "<span class=\"s1\">&#39;Bonjour Alice. Vous avez &#39;</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">age</span>\n",
                                            "value": "<span class=\"mi\">20</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">nom</span>\n",
                                            "value": "<span class=\"s1\">&#39;Alice&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Une exception <code>TypeError</code> est g\u00e9n\u00e9ralement caus\u00e9e par une tentative\nde combiner deux types d\u2019objets incompatibles,\nen invoquant une fonction avec le mauvais type d\u2019objet,\nou en tentant d'effectuer une op\u00e9ration non permise sur un type d'objet donn\u00e9.</p>\n<p>Vous avez essay\u00e9 de concat\u00e9ner (additionner) deux types d\u2019objets diff\u00e9rents:\nune cha\u00eene de caract\u00e8res (<code>str</code>) et un entier (<code>int</code>).</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 3, in <module>",
                        "       2 | age = 20",
                        "-->    3 | print(\"Bonjour \" + nom + \". Vous avez \" + age + \" ans.\")",
                        "                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
                        "\"Bonjour \" + nom = 'Bonjour Alice'",
                        "\"Bonjour \" + nom + \". Vous avez \" = 'Bonjour Alice. Vous avez '",
                        "age = 20",
                        "nom = 'Alice'",
                        "",
                        "TypeError: can only concatenate str (not \"int\") to str"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "concatenate_string_number"
    },
    {
        "get_solution": [
            "nom = \"Alice\"",
            "age = 20",
            "print(f'Bonjour {nom}. Vous avez {age} ans.')"
        ],
        "page": "Les f-string",
        "program": [
            "nom = \"Alice\"",
            "age = 20",
            "print(f'Bonjour {nom}. Vous avez {age} ans.')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Bonjour Alice. Vous avez 20 ans.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "basic_f_string_exercise"
    },
    {
        "page": "Les f-string",
        "program": [
            "f\"2 * 3 + 4 est \u00e9gal \u00e0 {2 * 3 + 4}\""
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'2 * 3 + 4 est \u00e9gal \u00e0 10'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "eval_expr_inside_f_string"
    },
    {
        "get_solution": [
            "print(f\"Il y a {len(personnes)} personnes qui attendent, la premi\u00e8re personne s'appelle {personnes[0]}.\")"
        ],
        "page": "Les f-string",
        "program": [
            "personnes = ['eODoUwNzS', 'ofHBEzZxs', 'zwTrQA', 'LDaOKmpHU', 'HCMLTt', 'NbRmEjaoyD']",
            "print(f\"Il y a {len(personnes)} personnes qui attendent, la premi\u00e8re personne s'appelle {personnes[0]}.\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Il y a 6 personnes qui attendent, la premi\u00e8re personne s'appelle eODoUwNzS.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "fix_broken_program"
    },
    {
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "for lettre in \"ABC\":",
            "    print(lettre)",
            "    for nombre in range(4):",
            "        print(f'{lettre} {nombre}')",
            "    print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---",
                "choices": [
                    "A 0\nA 1\nA 2\nA 3\n---\nB 0\nB 1\nB 2\nB 3\n---\nC 0\nC 1\nC 2\nC 3\n---",
                    "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---",
                    "A 1\nA 2\nA 3\nA 4\n---\nB 1\nB 2\nB 3\nB 4\n---\nC 1\nC 2\nC 3\nC 4\n---",
                    "A\nB\nC\n---\nA 0\nB 0\nC 0\n---\nA 1\nB 1\nC 1\n---\nA 2\nB 2\nC 2\n---\nA 3\nB 3\nC 3",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_nested_loop"
    },
    {
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "print(1 + \"x\")"
        ],
        "response": {
            "message": "<p>Vous ne pouvez pas additionner des cha\u00eenes et des chiffres. Utilisez une f-string.</p>",
            "passed": false,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "unsupported operand type(s) for +: 'int' and 'str'",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi mi-ExecutingNode\">1</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"s2 s2-ExecutingNode\">&quot;x&quot;</span><span class=\"p\">)</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>Une exception <code>TypeError</code> est g\u00e9n\u00e9ralement caus\u00e9e par une tentative\nde combiner deux types d\u2019objets incompatibles,\nen invoquant une fonction avec le mauvais type d\u2019objet,\nou en tentant d'effectuer une op\u00e9ration non permise sur un type d'objet donn\u00e9.</p>\n<p>Vous avez essay\u00e9 d\u2019additionner deux types d\u2019objets incompatibles:\nun entier (<code>int</code>) et une cha\u00eene de caract\u00e8res (<code>str</code>).</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | print(1 + \"x\")",
                        "                 ^^^^^^^",
                        "",
                        "TypeError: unsupported operand type(s) for +: 'int' and 'str'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "for gauche in range(12):",
            "    for droite in range(12):",
            "        gauche += 1",
            "        droite += 1",
            "        print(f'{gauche} x {droite} = {gauche * droite}')",
            "    print('---')"
        ],
        "response": {
            "message": "<p>Vous avez ajout\u00e9 1 \u00e0 la variable de la boucle externe au mauvais endroit !\nO\u00f9 devriez-vous le faire \u00e0 la place pour corriger le probl\u00e8me ?</p>",
            "passed": false,
            "result": [
                {
                    "text": "1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n4 x 4 = 16\n5 x 5 = 25\n6 x 6 = 36\n7 x 7 = 49\n8 x 8 = 64\n9 x 9 = 81\n10 x 10 = 100\n11 x 11 = 121\n12 x 12 = 144\n---\n2 x 1 = 2\n3 x 2 = 6\n4 x 3 = 12\n5 x 4 = 20\n6 x 5 = 30\n7 x 6 = 42\n8 x 7 = 56\n9 x 8 = 72\n10 x 9 = 90\n11 x 10 = 110\n12 x 11 = 132\n13 x 12 = 156\n---\n3 x 1 = 3\n4 x 2 = 8\n5 x 3 = 15\n6 x 4 = 24\n7 x 5 = 35\n8 x 6 = 48\n9 x 7 = 63\n10 x 8 = 80\n11 x 9 = 99\n12 x 10 = 120\n13 x 11 = 143\n14 x 12 = 168\n---\n4 x 1 = 4\n5 x 2 = 10\n6 x 3 = 18\n7 x 4 = 28\n8 x 5 = 40\n9 x 6 = 54\n10 x 7 = 70\n11 x 8 = 88\n12 x 9 = 108\n13 x 10 = 130\n14 x 11 = 154\n15 x 12 = 180\n---\n5 x 1 = 5\n6 x 2 = 12\n7 x 3 = 21\n8 x 4 = 32\n9 x 5 = 45\n10 x 6 = 60\n11 x 7 = 77\n12 x 8 = 96\n13 x 9 = 117\n14 x 10 = 140\n15 x 11 = 165\n16 x 12 = 192\n---\n6 x 1 = 6\n7 x 2 = 14\n8 x 3 = 24\n9 x 4 = 36\n10 x 5 = 50\n11 x 6 = 66\n12 x 7 = 84\n13 x 8 = 104\n14 x 9 = 126\n15 x 10 = 150\n16 x 11 = 176\n17 x 12 = 204\n---\n7 x 1 = 7\n8 x 2 = 16\n9 x 3 = 27\n10 x 4 = 40\n11 x 5 = 55\n12 x 6 = 72\n13 x 7 = 91\n14 x 8 = 112\n15 x 9 = 135\n16 x 10 = 160\n17 x 11 = 187",
                    "type": "stdout"
                },
                {
                    "text": "\n18 x 12 = 216\n---\n8 x 1 = 8\n9 x 2 = 18\n10 x 3 = 30\n11 x 4 = 44\n12 x 5 = 60\n13 x 6 = 78\n14 x 7 = 98\n15 x 8 = 120\n16 x 9 = 144\n17 x 10 = 170\n18 x 11 = 198\n19 x 12 = 228\n---\n9 x 1 = 9\n10 x 2 = 20\n11 x 3 = 33\n12 x 4 = 48\n13 x 5 = 65\n14 x 6 = 84\n15 x 7 = 105\n16 x 8 = 128\n17 x 9 = 153\n18 x 10 = 180\n19 x 11 = 209\n20 x 12 = 240\n---\n10 x 1 = 10\n11 x 2 = 22\n12 x 3 = 36\n13 x 4 = 52\n14 x 5 = 70\n15 x 6 = 90\n16 x 7 = 112\n17 x 8 = 136\n18 x 9 = 162\n19 x 10 = 190\n20 x 11 = 220\n21 x 12 = 252\n---\n11 x 1 = 11\n12 x 2 = 24\n13 x 3 = 39\n14 x 4 = 56\n15 x 5 = 75\n16 x 6 = 96\n17 x 7 = 119\n18 x 8 = 144\n19 x 9 = 171\n20 x 10 = 200\n21 x 11 = 231\n22 x 12 = 264\n---\n12 x 1 = 12\n13 x 2 = 26\n14 x 3 = 42\n15 x 4 = 60\n16 x 5 = 80\n17 x 6 = 102\n18 x 7 = 126\n19 x 8 = 152\n20 x 9 = 180\n21 x 10 = 210\n22 x 11 = 242\n23 x 12 = 276\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "for gauche in range(12):",
            "    gauche += 1",
            "    print(gauche, 'x 1 =', gauche * 1)",
            "    print(gauche, 'x 2 =', gauche * 2)",
            "    print(gauche, 'x 3 =', gauche * 3)",
            "    print(gauche, 'x 4 =', gauche * 4)",
            "    print(gauche, 'x 5 =', gauche * 5)",
            "    print(gauche, 'x 6 =', gauche * 6)",
            "    print(gauche, 'x 7 =', gauche * 7)",
            "    print(gauche, 'x 8 =', gauche * 8)",
            "    print(gauche, 'x 9 =', gauche * 9)",
            "    print(gauche, 'x 10 =', gauche * 10)",
            "    print(gauche, 'x 11 =', gauche * 11)",
            "    print(gauche, 'x 12 =', gauche * 12)",
            "    print('---')"
        ],
        "response": {
            "message": "<p>Votre solution est trop longue. Vous n'avez besoin que de quelques lignes de code pour ce probl\u00e8me.\nUtilisez une boucle imbriqu\u00e9e pour ne pas avoir \u00e0 vous r\u00e9p\u00e9ter.\nL'ordinateur se chargera de la r\u00e9p\u00e9tition pour vous !</p>",
            "passed": false,
            "result": [
                {
                    "text": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\n1 x 11 = 11\n1 x 12 = 12\n---\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20\n2 x 11 = 22\n2 x 12 = 24\n---\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n3 x 11 = 33\n3 x 12 = 36\n---\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n4 x 10 = 40\n4 x 11 = 44\n4 x 12 = 48\n---\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50\n5 x 11 = 55\n5 x 12 = 60\n---\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n6 x 10 = 60\n6 x 11 = 66\n6 x 12 = 72\n---\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n7 x 11 = 77\n7 x 12 = 84\n---\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 =",
                    "type": "stdout"
                },
                {
                    "text": " 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n8 x 10 = 80\n8 x 11 = 88\n8 x 12 = 96\n---\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n9 x 10 = 90\n9 x 11 = 99\n9 x 12 = 108\n---\n10 x 1 = 10\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100\n10 x 11 = 110\n10 x 12 = 120\n---\n11 x 1 = 11\n11 x 2 = 22\n11 x 3 = 33\n11 x 4 = 44\n11 x 5 = 55\n11 x 6 = 66\n11 x 7 = 77\n11 x 8 = 88\n11 x 9 = 99\n11 x 10 = 110\n11 x 11 = 121\n11 x 12 = 132\n---\n12 x 1 = 12\n12 x 2 = 24\n12 x 3 = 36\n12 x 4 = 48\n12 x 5 = 60\n12 x 6 = 72\n12 x 7 = 84\n12 x 8 = 96\n12 x 9 = 108\n12 x 10 = 120\n12 x 11 = 132\n12 x 12 = 144\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "for gauche in range(12):",
            "    gauche += 1",
            "    for droite in range(12):",
            "        droite += 1",
            "        # for the sake of translation",
            "        print(f'{gauche} x {droite} = {gauche * droite}'.replace('x', '*'))",
            "    print('---')"
        ],
        "response": {
            "message": "<p>C'est presque correct ! Assurez-vous d'afficher le bon caract\u00e8re <code>x</code> dans votre tableau.\nPar exemple, votre solution devrait afficher <code>3 x 4 = 12</code> et non <code>3 * 4 = 12</code>.</p>",
            "passed": false,
            "result": [
                {
                    "text": "1 * 1 = 1\n1 * 2 = 2\n1 * 3 = 3\n1 * 4 = 4\n1 * 5 = 5\n1 * 6 = 6\n1 * 7 = 7\n1 * 8 = 8\n1 * 9 = 9\n1 * 10 = 10\n1 * 11 = 11\n1 * 12 = 12\n---\n2 * 1 = 2\n2 * 2 = 4\n2 * 3 = 6\n2 * 4 = 8\n2 * 5 = 10\n2 * 6 = 12\n2 * 7 = 14\n2 * 8 = 16\n2 * 9 = 18\n2 * 10 = 20\n2 * 11 = 22\n2 * 12 = 24\n---\n3 * 1 = 3\n3 * 2 = 6\n3 * 3 = 9\n3 * 4 = 12\n3 * 5 = 15\n3 * 6 = 18\n3 * 7 = 21\n3 * 8 = 24\n3 * 9 = 27\n3 * 10 = 30\n3 * 11 = 33\n3 * 12 = 36\n---\n4 * 1 = 4\n4 * 2 = 8\n4 * 3 = 12\n4 * 4 = 16\n4 * 5 = 20\n4 * 6 = 24\n4 * 7 = 28\n4 * 8 = 32\n4 * 9 = 36\n4 * 10 = 40\n4 * 11 = 44\n4 * 12 = 48\n---\n5 * 1 = 5\n5 * 2 = 10\n5 * 3 = 15\n5 * 4 = 20\n5 * 5 = 25\n5 * 6 = 30\n5 * 7 = 35\n5 * 8 = 40\n5 * 9 = 45\n5 * 10 = 50\n5 * 11 = 55\n5 * 12 = 60\n---\n6 * 1 = 6\n6 * 2 = 12\n6 * 3 = 18\n6 * 4 = 24\n6 * 5 = 30\n6 * 6 = 36\n6 * 7 = 42\n6 * 8 = 48\n6 * 9 = 54\n6 * 10 = 60\n6 * 11 = 66\n6 * 12 = 72\n---\n7 * 1 = 7\n7 * 2 = 14\n7 * 3 = 21\n7 * 4 = 28\n7 * 5 = 35\n7 * 6 = 42\n7 * 7 = 49\n7 * 8 = 56\n7 * 9 = 63\n7 * 10 = 70\n7 * 11 = 77\n7 * 12 = 84\n---\n8 * 1 = 8\n8 * 2 = 16\n8 * 3 = 24\n8 * 4 = 32\n8 * 5 = 40",
                    "type": "stdout"
                },
                {
                    "text": "\n8 * 6 = 48\n8 * 7 = 56\n8 * 8 = 64\n8 * 9 = 72\n8 * 10 = 80\n8 * 11 = 88\n8 * 12 = 96\n---\n9 * 1 = 9\n9 * 2 = 18\n9 * 3 = 27\n9 * 4 = 36\n9 * 5 = 45\n9 * 6 = 54\n9 * 7 = 63\n9 * 8 = 72\n9 * 9 = 81\n9 * 10 = 90\n9 * 11 = 99\n9 * 12 = 108\n---\n10 * 1 = 10\n10 * 2 = 20\n10 * 3 = 30\n10 * 4 = 40\n10 * 5 = 50\n10 * 6 = 60\n10 * 7 = 70\n10 * 8 = 80\n10 * 9 = 90\n10 * 10 = 100\n10 * 11 = 110\n10 * 12 = 120\n---\n11 * 1 = 11\n11 * 2 = 22\n11 * 3 = 33\n11 * 4 = 44\n11 * 5 = 55\n11 * 6 = 66\n11 * 7 = 77\n11 * 8 = 88\n11 * 9 = 99\n11 * 10 = 110\n11 * 11 = 121\n11 * 12 = 132\n---\n12 * 1 = 12\n12 * 2 = 24\n12 * 3 = 36\n12 * 4 = 48\n12 * 5 = 60\n12 * 6 = 72\n12 * 7 = 84\n12 * 8 = 96\n12 * 9 = 108\n12 * 10 = 120\n12 * 11 = 132\n12 * 12 = 144\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "pass",
            "3 x 4"
        ],
        "response": {
            "message": "<p>Pour multiplier les nombres, utilisez <code>*</code></p>",
            "passed": false,
            "result": [
                {
                    "friendly": "<p>Une exception de type <code>SyntaxError</code> se produit lorsque Python ne peut pas comprendre votre code.</p>\n<p>Pr\u00e9sentement, je ne peux pas deviner la cause probable de cette erreur.\nEssayez d\u2019examiner attentivement la ligne indiqu\u00e9e ainsi que celle\nimm\u00e9diatement au dessus pour voir si vous pouvez identifier\nun mot mal orthographi\u00e9, ou des symboles manquants, comme (,), [,],:, etc.</p>\n<p>Si votre code n'utilise pas d'annotations de type,\net que vous pensez que friendly devrait\npouvoir l'analyser correctement, SVP rapporter ce cas au site suivant:\nhttps://github.com/friendly-traceback/friendly-traceback/issues</p>",
                    "text": "    3 x 4\n      ^\nSyntaxError: invalid syntax\nat line 2\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "get_solution": [
            "for gauche in range(12):",
            "    gauche += 1",
            "    for droite in range(12):",
            "        droite += 1",
            "        print(f'{gauche} x {droite} = {gauche * droite}')",
            "    print('---')"
        ],
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "for gauche in range(12):",
            "    gauche += 1",
            "    for droite in range(12):",
            "        droite += 1",
            "        print(f'{gauche} x {droite} = {gauche * droite}')",
            "    print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\n1 x 11 = 11\n1 x 12 = 12\n---\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20\n2 x 11 = 22\n2 x 12 = 24\n---\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n3 x 11 = 33\n3 x 12 = 36\n---\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n4 x 10 = 40\n4 x 11 = 44\n4 x 12 = 48\n---\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50\n5 x 11 = 55\n5 x 12 = 60\n---\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n6 x 10 = 60\n6 x 11 = 66\n6 x 12 = 72\n---\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n7 x 11 = 77\n7 x 12 = 84\n---\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40",
                    "type": "stdout"
                },
                {
                    "text": "\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n8 x 10 = 80\n8 x 11 = 88\n8 x 12 = 96\n---\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n9 x 10 = 90\n9 x 11 = 99\n9 x 12 = 108\n---\n10 x 1 = 10\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100\n10 x 11 = 110\n10 x 12 = 120\n---\n11 x 1 = 11\n11 x 2 = 22\n11 x 3 = 33\n11 x 4 = 44\n11 x 5 = 55\n11 x 6 = 66\n11 x 7 = 77\n11 x 8 = 88\n11 x 9 = 99\n11 x 10 = 110\n11 x 11 = 121\n11 x 12 = 132\n---\n12 x 1 = 12\n12 x 2 = 24\n12 x 3 = 36\n12 x 4 = 48\n12 x 5 = 60\n12 x 6 = 72\n12 x 7 = 84\n12 x 8 = 96\n12 x 9 = 108\n12 x 10 = 120\n12 x 11 = 132\n12 x 12 = 144\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "get_solution": [
            "for joueur_1 in joueurs:",
            "    for joueur_2 in joueurs:",
            "        if joueur_1 != joueur_2:",
            "            print(f'{joueur_1} contre {joueur_2}')"
        ],
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "joueurs = ['OUumHyG', 'ocUyWBh', 'DbNQe', 'XjItgGJ', 'iOuKYyzZt', 'iySpdUX', 'EZkLNo']",
            "for joueur_1 in joueurs:",
            "    for joueur_2 in joueurs:",
            "        if joueur_1 != joueur_2:",
            "            print(f'{joueur_1} contre {joueur_2}')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OUumHyG contre ocUyWBh\nOUumHyG contre DbNQe\nOUumHyG contre XjItgGJ\nOUumHyG contre iOuKYyzZt\nOUumHyG contre iySpdUX\nOUumHyG contre EZkLNo\nocUyWBh contre OUumHyG\nocUyWBh contre DbNQe\nocUyWBh contre XjItgGJ\nocUyWBh contre iOuKYyzZt\nocUyWBh contre iySpdUX\nocUyWBh contre EZkLNo\nDbNQe contre OUumHyG\nDbNQe contre ocUyWBh\nDbNQe contre XjItgGJ\nDbNQe contre iOuKYyzZt\nDbNQe contre iySpdUX\nDbNQe contre EZkLNo\nXjItgGJ contre OUumHyG\nXjItgGJ contre ocUyWBh\nXjItgGJ contre DbNQe\nXjItgGJ contre iOuKYyzZt\nXjItgGJ contre iySpdUX\nXjItgGJ contre EZkLNo\niOuKYyzZt contre OUumHyG\niOuKYyzZt contre ocUyWBh\niOuKYyzZt contre DbNQe\niOuKYyzZt contre XjItgGJ\niOuKYyzZt contre iySpdUX\niOuKYyzZt contre EZkLNo\niySpdUX contre OUumHyG\niySpdUX contre ocUyWBh\niySpdUX contre DbNQe\niySpdUX contre XjItgGJ\niySpdUX contre iOuKYyzZt\niySpdUX contre EZkLNo\nEZkLNo contre OUumHyG\nEZkLNo contre ocUyWBh\nEZkLNo contre DbNQe\nEZkLNo contre XjItgGJ\nEZkLNo contre iOuKYyzZt\nEZkLNo contre iySpdUX\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "player_vs_player_exercise"
    },
    {
        "get_solution": [
            "for c_1 in lettres:",
            "    for c_2 in lettres:",
            "        for c_3 in lettres:",
            "            for c_4 in lettres:",
            "                print(c_1 + c_2 + c_3 + c_4)"
        ],
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "lettres = 'AB'",
            "for c_1 in lettres:",
            "    for c_2 in lettres:",
            "        for c_3 in lettres:",
            "            for c_4 in lettres:",
            "                print(c_1 + c_2 + c_3 + c_4)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "AAAA\nAAAB\nAABA\nAABB\nABAA\nABAB\nABBA\nABBB\nBAAA\nBAAB\nBABA\nBABB\nBBAA\nBBAB\nBBBA\nBBBB\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "crack_password_exercise"
    },
    {
        "get_solution": [
            "for i in range(taille):",
            "    longueur = taille - i",
            "    ligne = ''",
            "    for _ in range(longueur):",
            "        ligne += '+'",
            "    print(ligne)"
        ],
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "taille = 3",
            "for i in range(taille):",
            "    longueur = taille - i",
            "    ligne = ''",
            "    for _ in range(longueur):",
            "        ligne += '+'",
            "    print(ligne)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "+++\n++\n+\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "upside_down_triangle_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(joueurs)):",
            "    for j in range(len(joueurs)):",
            "        if i < j:",
            "            print(f'{joueurs[i]} contre {joueurs[j]}')"
        ],
        "page": "Pr\u00e9sentation des boucles imbriqu\u00e9es",
        "program": [
            "joueurs = ['JwsUZyHWXS', 'UepKEbOB', 'uTRiPVo', 'VWkbqMa', 'BwdsYFWHh', 'XmgDJ', 'WRoYNxvLF']",
            "for i in range(len(joueurs)):",
            "    for j in range(len(joueurs)):",
            "        if i < j:",
            "            print(f'{joueurs[i]} contre {joueurs[j]}')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "JwsUZyHWXS contre UepKEbOB\nJwsUZyHWXS contre uTRiPVo\nJwsUZyHWXS contre VWkbqMa\nJwsUZyHWXS contre BwdsYFWHh\nJwsUZyHWXS contre XmgDJ\nJwsUZyHWXS contre WRoYNxvLF\nUepKEbOB contre uTRiPVo\nUepKEbOB contre VWkbqMa\nUepKEbOB contre BwdsYFWHh\nUepKEbOB contre XmgDJ\nUepKEbOB contre WRoYNxvLF\nuTRiPVo contre VWkbqMa\nuTRiPVo contre BwdsYFWHh\nuTRiPVo contre XmgDJ\nuTRiPVo contre WRoYNxvLF\nVWkbqMa contre BwdsYFWHh\nVWkbqMa contre XmgDJ\nVWkbqMa contre WRoYNxvLF\nBwdsYFWHh contre XmgDJ\nBwdsYFWHh contre WRoYNxvLF\nXmgDJ contre WRoYNxvLF\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "player_vs_player_bonus"
    },
    {
        "page": "Observation des programmes avec <code>birdseye</code>",
        "program": [
            "a = 2",
            "b = 3",
            "c = 4",
            "d = 5",
            "print(a * b + c * d)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "26\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_birdseye_example"
    },
    {
        "page": "Observation des programmes avec <code>birdseye</code>",
        "program": [
            "mot = 'Fabuleux'",
            "voyelles = []",
            "consonnes = []",
            "for lettre in mot:",
            "    if lettre.lower() in 'aeiouy':",
            "        voyelles.append(lettre)",
            "    else:",
            "        consonnes.append(lettre)",
            "print(voyelles)",
            "print(consonnes)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['a', 'u', 'e', 'u']\n['F', 'b', 'l', 'x']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "birdseye_loop_example"
    },
    {
        "get_solution": [
            "chaine = chaines[1]",
            "print(chaine[0])"
        ],
        "page": "Pr\u00e9sentation des listes imbriqu\u00e9es",
        "program": [
            "chaines = ['abc', 'def', 'ghi']",
            "chaine = chaines[1]",
            "print(chaine[0])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_list_exercise"
    },
    {
        "page": "Pr\u00e9sentation des listes imbriqu\u00e9es",
        "program": [
            "chaines = [\"abc\", \"def\", \"ghi\"]",
            "print(chaines[1][0])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_subscripting"
    },
    {
        "get_solution": [
            "print(chaines[-2][-1])"
        ],
        "page": "Pr\u00e9sentation des listes imbriqu\u00e9es",
        "program": [
            "chaines = ['abc', 'de', 'fghi', 'jklmn', 'o']",
            "print(chaines[-2][-1])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "n\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_subscripting_exercise"
    },
    {
        "page": "Pr\u00e9sentation des listes imbriqu\u00e9es",
        "program": [
            "chaines = [['hello', 'there'], ['comment', 'allez', 'vous']]",
            "print(chaines[1][0])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "comment",
                "choices": [
                    "hello",
                    "there",
                    "comment",
                    "allez",
                    "vous",
                    "['hello', 'there']",
                    "['comment', 'allez', 'vous']",
                    "h",
                    "t",
                    "e",
                    "a",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "comment\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_nested_list_example"
    },
    {
        "get_solution": [
            "print(chaines[1][2][0])"
        ],
        "page": "Pr\u00e9sentation des listes imbriqu\u00e9es",
        "program": [
            "chaines = [['hello', 'there'], ['how', 'are', 'you']]",
            "print(chaines[1][2][0])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "y\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "triple_subscripting"
    },
    {
        "page": "Faire des boucles avec des listes imbriqu\u00e9es",
        "program": [
            "nombres = [[1, 2, 3], [4, 5], [6], []]",
            "for sous_liste in nombres:",
            "    for nombre in sous_liste:",
            "        print(nombre)",
            "    print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "1\n2\n3\n---\n4\n5\n---\n6\n---\n---",
                "choices": [
                    "1\n---\n2\n---\n3\n---\n4\n---\n5\n---\n6\n---",
                    "1\n2\n3\n---\n4\n5\n---\n6\n---\n---",
                    "1\n2\n3\n---\n4\n5\n---\n6\n---",
                    "1 2 3\n---\n4 5\n---\n6\n---\n---",
                    "1 2 3\n---\n4 5\n---\n6\n---",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "1\n2\n3\n---\n4\n5\n---\n6\n---\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_list_nested_loop_example"
    },
    {
        "page": "Faire des boucles avec des listes imbriqu\u00e9es",
        "program": [
            "nombres = [[1, 2, 3], [4, 5], [6], []]",
            "for sous_liste in nombres:",
            "    for nombre in sous_liste:",
            "        print(nombre)",
            "    print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "1\n2\n3\n---\n4\n5\n---\n6\n---\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_list_loop_python_tutor"
    },
    {
        "get_solution": [
            "for sous_liste in chaines:",
            "    for chaine in sous_liste:",
            "        if mot in chaine:",
            "            print(chaine)"
        ],
        "page": "Faire des boucles avec des listes imbriqu\u00e9es",
        "program": [
            "chaines = [['hello there', 'how are you'], ['goodbye world', 'hello world']]",
            "mot = 'hello'",
            "for sous_liste in chaines:",
            "    for chaine in sous_liste:",
            "        if mot in chaine:",
            "            print(chaine)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "hello there\nhello world\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_contains_word_exercise"
    },
    {
        "get_solution": [
            "for sous_liste in chaines:",
            "    cadeau = False",
            "    for chaine in sous_liste:",
            "        if mot in chaine:",
            "            cadeau = True",
            "    print(cadeau)"
        ],
        "page": "Faire des boucles avec des listes imbriqu\u00e9es",
        "program": [
            "chaines = [['hello there', 'how are you'], ['goodbye world', 'hello world']]",
            "mot = 'goodbye'",
            "for sous_liste in chaines:",
            "    cadeau = False",
            "    for chaine in sous_liste:",
            "        if mot in chaine:",
            "            cadeau = True",
            "    print(cadeau)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "False\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sublist_contains_word_exercise"
    },
    {
        "get_solution": [
            "cadeau = False",
            "for sous_liste in chaines:",
            "    for chaine in sous_liste:",
            "        if mot in chaine:",
            "            cadeau = True",
            "print(cadeau)"
        ],
        "page": "Faire des boucles avec des listes imbriqu\u00e9es",
        "program": [
            "chaines = [['hello there', 'how are you'], ['goodbye world', 'hello world']]",
            "mot = 'are'",
            "cadeau = False",
            "for sous_liste in chaines:",
            "    for chaine in sous_liste:",
            "        if mot in chaine:",
            "            cadeau = True",
            "print(cadeau)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "list_contains_word_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(chaines[0])):",
            "    ligne = \"\"",
            "    for chaine in chaines:",
            "        ligne += chaine[i]",
            "    print(ligne)"
        ],
        "page": "Faire des boucles avec des listes imbriqu\u00e9es",
        "program": [
            "chaines = ['abc', 'def', 'ghi']",
            "for i in range(len(chaines[0])):",
            "    ligne = \"\"",
            "    for chaine in chaines:",
            "        ligne += chaine[i]",
            "    print(ligne)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "adg\nbeh\ncfi\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_strings_list_exercise"
    },
    {
        "get_solution": [
            "longueurs = []",
            "for chaine in chaines:",
            "    longueurs.append(len(chaine))",
            "longueur = max(longueurs)",
            "",
            "for i in range(longueur):",
            "    ligne = \"\"",
            "    for chaine in chaines:",
            "        if i >= len(chaine):",
            "            ligne += \" \"",
            "        else:",
            "            ligne += chaine[i]",
            "    print(ligne)"
        ],
        "page": "Faire des boucles avec des listes imbriqu\u00e9es",
        "program": [
            "chaines = ['abcqwe', 'def', 'ghiq']",
            "longueurs = []",
            "for chaine in chaines:",
            "    longueurs.append(len(chaine))",
            "longueur = max(longueurs)",
            "",
            "for i in range(longueur):",
            "    ligne = \"\"",
            "    for chaine in chaines:",
            "        if i >= len(chaine):",
            "            ligne += \" \"",
            "        else:",
            "            ligne += chaine[i]",
            "    print(ligne)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "adg\nbeh\ncfi\nq q\nw  \ne  \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_longest_strings_exercise"
    },
    {
        "page": "D\u00e9finitions de fonctions",
        "program": [
            "def salutation(nom):",
            "    print(f\"Bonjour {nom} !\")",
            "",
            "salutation(\"Alice\")",
            "salutation(\"Bob\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Bonjour Alice !\nBonjour Bob !\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "define_greet"
    },
    {
        "page": "D\u00e9finitions de fonctions",
        "program": [
            "def salutation(nom):",
            "    print(f\"Bonjour {nom} !\")",
            "    print(\"Comment allez-vous ?\")",
            "",
            "salutation(\"Alice\")",
            "salutation(\"Bob\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Bonjour Alice !\nComment allez-vous ?\nBonjour Bob !\nComment allez-vous ?",
                "choices": [
                    "Bonjour Alice !\nComment allez-vous ?\nBonjour Bob !\nComment allez-vous ?",
                    "Bonjour Alice !\nBonjour Bob !\nComment allez-vous ?",
                    "Bonjour Alice !\nComment allez-vous ?\nBonjour Bob !",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "Bonjour Alice !\nComment allez-vous ?\nBonjour Bob !\nComment allez-vous ?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "how_are_you"
    },
    {
        "get_solution": [
            "def dit_bonjour(nom):",
            "    print(f\"Bonjour {nom} !\")",
            "    print(\"Comment allez-vous ?\")",
            "",
            "dit_bonjour(\"Alice\")",
            "dit_bonjour(\"Bob\")"
        ],
        "page": "D\u00e9finitions de fonctions",
        "program": [
            "def dit_bonjour(nom):",
            "    print(f\"Bonjour {nom} !\")",
            "    print(\"Comment allez-vous ?\")",
            "",
            "dit_bonjour(\"Alice\")",
            "dit_bonjour(\"Bob\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Bonjour Alice !\nComment allez-vous ?\nBonjour Bob !\nComment allez-vous ?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "change_function_name"
    },
    {
        "get_solution": [
            "def dit_bonjour(nom_personne):",
            "    print(f\"Bonjour {nom_personne} !\")",
            "    print(\"Comment allez-vous ?\")",
            "",
            "dit_bonjour(\"Alice\")",
            "dit_bonjour(\"Bob\")"
        ],
        "page": "D\u00e9finitions de fonctions",
        "program": [
            "def dit_bonjour(nom_personne):",
            "    print(f\"Bonjour {nom_personne} !\")",
            "    print(\"Comment allez-vous ?\")",
            "",
            "dit_bonjour(\"Alice\")",
            "dit_bonjour(\"Bob\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Bonjour Alice !\nComment allez-vous ?\nBonjour Bob !\nComment allez-vous ?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "change_parameter_name"
    },
    {
        "get_solution": [
            "def affiche_deux_fois(x):",
            "    print(x)",
            "    print(x)"
        ],
        "page": "D\u00e9finitions de fonctions",
        "program": [
            "def affiche_deux_fois(x):",
            "    print(x)",
            "    print(x)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "print_twice_exercise"
    },
    {
        "page": "D\u00e9finitions de fonctions",
        "program": [
            "def affiche_plusieurs(chose, n):",
            "    for _ in range(n):",
            "        print(chose)",
            "",
            "affiche_plusieurs(\"Hello\", 3)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello\nHello\nHello",
                "choices": [
                    "3\n3\n3",
                    "3",
                    "Hello\nHello\nHello",
                    "Hello",
                    "H\ne\nl\nl\no",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "Hello\nHello\nHello\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_many"
    },
    {
        "get_solution": [
            "def affiche_plusieurs(n, chose):",
            "    for _ in range(n):",
            "        print(chose)",
            "",
            "affiche_plusieurs(3, \"Hello\")"
        ],
        "page": "D\u00e9finitions de fonctions",
        "program": [
            "def affiche_plusieurs(n, chose):",
            "    for _ in range(n):",
            "        print(chose)",
            "",
            "affiche_plusieurs(3, \"Hello\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello\nHello\nHello\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "swap_parameters"
    },
    {
        "page": "Appels de fonctions dans des fonctions",
        "program": [
            "def affiche_plusieurs(n, chose):",
            "    for _ in range(n):",
            "        print(chose)",
            "",
            "def affiche_deux_fois(x):",
            "    affiche_plusieurs(2, x)",
            "",
            "affiche_deux_fois(\"Hello\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello\nHello\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_twice_call_print_many"
    },
    {
        "page": "Appels de fonctions dans des fonctions",
        "program": [
            "def affiche_plusieurs(n, chose):",
            "    for _ in range(n):",
            "        print(chose)",
            "",
            "def affiche_deux_fois(x):",
            "    affiche_plusieurs(2, x)",
            "",
            "affiche_deux_fois(\"Hello\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   1\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148maffiche_plusieurs\u001b[39m(n, chose):\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148maffiche_deux_fois\u001b[39m(x):\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m | affiche_deux_fois(\u001b[38;5;186m\"\u001b[39m\u001b[38;5;186mHello\u001b[39m\u001b[38;5;186m\"\u001b[39m)\n\u001b[38;5;242m     \u001b[0m\u001b[36m\u001b[1m>>> Call to affiche_deux_fois in File \"/my_program.py\", line 5\u001b[0m\n\u001b[38;5;242m     \u001b[0m...... x = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mHello\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m     \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148maffiche_deux_fois\u001b[39m(x):\n\u001b[38;5;242m     \u001b[0m\u001b[38;5;242m   6\u001b[0m |     affiche_plusieurs(\u001b[38;5;141m2\u001b[39m, x)\n\u001b[38;5;242m         \u001b[0m\u001b[36m\u001b[1m>>> Call to affiche_plusieurs in File \"/my_program.py\", line 1\u001b[0m\n\u001b[38;5;242m         \u001b[0m...... n = \u001b[38;5;141m2\u001b[39m\n\u001b[38;5;242m         \u001b[0m...... chose = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mHello\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   1\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148maffiche_plusieurs\u001b[39m(n, chose):\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   2\u001b[0m |     \u001b[38;5;81mfor\u001b[39m _ \u001b[38;5;197min\u001b[39m range(n):\n\u001b[38;5;242m         \u001b[0m.......... _ = \u001b[38;5;141m0\u001b[39m\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   3\u001b[0m |         print(chose)\n",
                    "type": "snoop"
                },
                {
                    "text": "Hello",
                    "type": "stdout"
                },
                {
                    "text": "\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   2\u001b[0m |     \u001b[38;5;81mfor\u001b[39m _ \u001b[38;5;197min\u001b[39m range(n):\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m.......... _ = \u001b[38;5;141m1\u001b[39m\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   3\u001b[0m |         print(chose)\n",
                    "type": "snoop"
                },
                {
                    "text": "Hello",
                    "type": "stdout"
                },
                {
                    "text": "\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   2\u001b[0m |     \u001b[38;5;81mfor\u001b[39m _ \u001b[38;5;197min\u001b[39m range(n):\n",
                    "type": "snoop"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[32m\u001b[1m<<< Return value from affiche_plusieurs: \u001b[0m\u001b[38;5;81mNone\u001b[39m\n\u001b[38;5;242m     \u001b[0m\u001b[38;5;242m   6\u001b[0m |     affiche_plusieurs(\u001b[38;5;141m2\u001b[39m, x)\n\u001b[38;5;242m     \u001b[0m\u001b[32m\u001b[1m<<< Return value from affiche_deux_fois: \u001b[0m\u001b[38;5;81mNone\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m | affiche_deux_fois(\u001b[38;5;186m\"\u001b[39m\u001b[38;5;186mHello\u001b[39m\u001b[38;5;186m\"\u001b[39m)\n",
                    "type": "snoop"
                }
            ]
        },
        "step": "see_stack_in_snoop"
    },
    {
        "page": "Appels de fonctions dans des fonctions",
        "program": [
            "def affiche_plusieurs(n, chose):",
            "    for _ in range(n):",
            "        print(chose)",
            "",
            "def affiche_deux_fois(x):",
            "    affiche_plusieurs(2, x)",
            "",
            "affiche_deux_fois(\"Hello\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello\nHello\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "see_stack_in_pythontutor"
    },
    {
        "page": "Appels de fonctions dans des fonctions",
        "program": [
            "def affiche_plusieurs(n, chose):",
            "    for _ in range(n):",
            "        print(chose)",
            "",
            "def affiche_deux_fois(x):",
            "    affiche_plusieurs(2, x)",
            "",
            "affiche_deux_fois(\"Hello\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello\nHello\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "see_stack_in_birdseye"
    },
    {
        "page": "Renvoi de valeurs par des fonctions",
        "program": [
            "def double(x):",
            "    return x * 2",
            "",
            "nombre = 5",
            "deux_fois = double(nombre)",
            "print(nombre)",
            "print(deux_fois)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "5\n10",
                "choices": [
                    "5\n5",
                    "5\n10",
                    "10\n10",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "5\n10\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_return"
    },
    {
        "page": "Renvoi de valeurs par des fonctions",
        "program": [
            "def double(x):",
            "    return x * 2",
            "",
            "nombre = 5",
            "double(nombre)",
            "print(nombre)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "5",
                "choices": [
                    "5",
                    "10",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "5\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "losing_return_value"
    },
    {
        "page": "Renvoi de valeurs par des fonctions",
        "program": [
            "def quadruple(x):",
            "    return x * 4"
        ],
        "response": {
            "message": "<p>Vous ne pouvez pas utiliser <code>*</code>, <code>+</code>, ni m\u00eame des chiffres \u00e0 l'int\u00e9rieur de <code>quadruple</code>.\nVous devez utiliser <code>double</code> pour r\u00e9soudre le probl\u00e8me.</p>",
            "passed": false,
            "result": []
        },
        "step": "quadruple_exercise"
    },
    {
        "get_solution": [
            "def quadruple(x):",
            "    return double(double(x))"
        ],
        "page": "Renvoi de valeurs par des fonctions",
        "program": [
            "def double(x):",
            "    return x * 2",
            "",
            "def quadruple(x):",
            "    return double(double(x))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "quadruple_exercise"
    },
    {
        "page": "Fonctions de tests",
        "program": [
            "def double(x):",
            "    return x * 2",
            "",
            "assert_equal(double(2), 4)",
            "assert_equal(double(5), 10)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "OK\nOK",
                "choices": [
                    "Error! 4 != 4\nError! 10 != 10",
                    "Error! 2 != 4\nError! 5 != 10",
                    "Error! 2 != 4",
                    "OK\nOK",
                    "OK",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "OK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_assert_equal"
    },
    {
        "page": "Fonctions de tests",
        "program": [
            "def double(x):",
            "    return x * 3",
            "",
            "assert_equal(double(2), 4)",
            "assert_equal(double(5), 10)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Error! 6 != 4\nError! 15 != 10",
                "choices": [
                    "Error! 4 != 4\nError! 10 != 10",
                    "Error! 6 != 4\nError! 15 != 10",
                    "Error! 4 != 6\nError! 10 != 15",
                    "OK\nOK",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "Error! 6 != 4\nError! 15 != 10\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_tests_fail"
    },
    {
        "page": "Fonctions de tests",
        "program": [
            "def double(x):",
            "    return x * 2",
            "",
            "def quadruple(x):",
            "    return double(double(x))",
            "",
            "assert_equal(quadruple(2), 8)",
            "assert_equal(quadruple(5), 20)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "complete_quadruple_tests"
    },
    {
        "get_solution": [
            "def entoure(chaine, balise):",
            "    return balise + chaine + balise"
        ],
        "page": "Fonctions de tests",
        "program": [
            "def entoure(chaine, balise):",
            "    return balise + chaine + balise"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "surround_exercise"
    },
    {
        "page": "Fonctions de tests",
        "program": [
            "def entoure(chaine, balise):",
            "    return balise + chaine + balise",
            "",
            "def alerte(chaine, nb_points):",
            "    chaine = entoure(chaine, ' ')",
            "    for _ in range(nb_points):",
            "        chaine = entoure(chaine, '!')",
            "        return chaine"
        ],
        "response": {
            "message": "<p>Dans la fonction <code>alerte</code>, vous avez plac\u00e9 votre instruction <code>return</code> au mauvais endroit !\nFaites attention \u00e0 vos indentations dans <code>alerte</code>. Vous pourriez terminer une boucle trop t\u00f4t avec <code>return</code>.</p>",
            "passed": false,
            "result": []
        },
        "step": "alert_exercise"
    },
    {
        "page": "Fonctions de tests",
        "program": [
            "def alerte(chaine, nb_points):",
            "    marks = '!' * nb_points",
            "    return marks + ' ' + chaine + ' ' + marks"
        ],
        "response": {
            "message": "<p>Vous ne pouvez pas utiliser la concat\u00e9nation ni le formatage ni la multiplication ni de f-string dans <code>alerte</code>.\nVous devez appeler <code>entoure</code> pour r\u00e9soudre ce probl\u00e8me.</p>",
            "passed": false,
            "result": []
        },
        "step": "alert_exercise"
    },
    {
        "get_solution": [
            "def alerte(chaine, nb_points):",
            "    chaine = entoure(chaine, ' ')",
            "    for _ in range(nb_points):",
            "        chaine = entoure(chaine, '!')",
            "    return chaine"
        ],
        "page": "Fonctions de tests",
        "program": [
            "def entoure(chaine, balise):",
            "    return balise + chaine + balise",
            "",
            "def alerte(chaine, nb_points):",
            "    chaine = entoure(chaine, ' ')",
            "    for _ in range(nb_points):",
            "        chaine = entoure(chaine, '!')",
            "    return chaine"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "alert_exercise"
    },
    {
        "page": "<code>return</code> termine l'appel de la fonction",
        "program": [
            "def foo():",
            "    return 1",
            "    return 2",
            "",
            "print(foo())"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "1",
                "choices": [
                    "1",
                    "2",
                    "[1, 2]",
                    "1\n2",
                    "1 2",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_return_in_one_function"
    },
    {
        "page": "<code>return</code> termine l'appel de la fonction",
        "program": [
            "def nombres_doubles(nombres):",
            "    for x in nombres:",
            "        return x * 2",
            "",
            "assert_equal(nombres_doubles([1, 2, 3]), [2, 4, 6])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Error! 2 != [2, 4, 6]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "cannot_return_multiple_values"
    },
    {
        "page": "<code>return</code> termine l'appel de la fonction",
        "program": [
            "def foo():",
            "    for lettre in 'abc':",
            "        for nombre in range(3):",
            "            print(f\"{lettre} {nombre}\")",
            "            if lettre == 'b':",
            "                return lettre",
            "",
            "foo()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "a 0\na 1\na 2\nb 0",
                "choices": [
                    "a 0\na 1\na 2",
                    "a 0\na 1\na 2\nb 0",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2",
                    "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2\nc 0\nc 1\nc 2",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "a 0\na 1\na 2\nb 0\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "return_ends_whole_function"
    },
    {
        "page": "<code>return</code> termine l'appel de la fonction",
        "program": [
            "def foo():",
            "    for lettre in 'abc':",
            "        for nombre in range(3):",
            "            print(f\"{lettre} {nombre}\")",
            "            if lettre == 'b':",
            "                break",
            "",
            "foo()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2",
                "choices": [
                    "a 0\na 1\na 2",
                    "a 0\na 1\na 2\nb 0",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2",
                    "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2\nc 0\nc 1\nc 2",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "break_vs_return"
    },
    {
        "page": "Pr\u00e9sentation de <code>or</code>",
        "program": [
            "def est_ami(nom):",
            "    if nom == \"Alice\":",
            "        return True",
            "    elif nom == \"Bob\":",
            "        return True",
            "    else:",
            "        return False",
            "",
            "assert_equal(est_ami(\"Alice\"), True)",
            "assert_equal(est_ami(\"Bob\"), True)",
            "assert_equal(est_ami(\"Carole\"), False)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "InputAliceBob"
    },
    {
        "page": "Pr\u00e9sentation de <code>or</code>",
        "program": [
            "True or True"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueOrTrue"
    },
    {
        "page": "Pr\u00e9sentation de <code>or</code>",
        "program": [
            "True or False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueOrFalse"
    },
    {
        "page": "Pr\u00e9sentation de <code>or</code>",
        "program": [
            "False or False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "FalseOrFalse"
    },
    {
        "page": "Pr\u00e9sentation de <code>or</code>",
        "program": [
            "def est_ami(nom):",
            "    if nom == \"Alice\" or nom == \"Bob\":",
            "        return True",
            "    else:",
            "        return False",
            "",
            "assert_equal(est_ami(\"Alice\"), True)",
            "assert_equal(est_ami(\"Bob\"), True)",
            "assert_equal(est_ami(\"Carole\"), False)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "ImprovingWithOr"
    },
    {
        "page": "Pr\u00e9sentation de <code>or</code>",
        "program": [
            "def est_ami(nom):",
            "    return nom == \"Alice\" or nom == \"Bob\"",
            "",
            "assert_equal(est_ami(\"Alice\"), True)",
            "assert_equal(est_ami(\"Bob\"), True)",
            "assert_equal(est_ami(\"Carole\"), False)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "FurtherImprovement"
    },
    {
        "page": "Pr\u00e9sentation de <code>or</code>",
        "program": [
            "def est_ami(nom):",
            "    return nom == \"Alice\" or \"Bob\"",
            "",
            "assert_equal(est_ami(\"Alice\"), True)",
            "assert_equal(est_ami(\"Bob\"), True)",
            "assert_equal(est_ami(\"Carole\"), False)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nError! 'Bob' != True\nError! 'Bob' != False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "ACommonMistake"
    },
    {
        "page": "Pr\u00e9sentation de <code>or</code>",
        "program": [
            "def est_ami(nom):",
            "    return nom == \"Alice\" or \"Bob\"",
            "",
            "assert_equal(est_ami(\"Alice\"), True)",
            "assert_equal(est_ami(\"Bob\"), True)",
            "assert_equal(est_ami(\"Carole\"), False)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nError! 'Bob' != True\nError! 'Bob' != False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "InspectWithBirdseye"
    },
    {
        "get_solution": [
            "def est_pourcentage_valide(x):",
            "    if x < 0 or x > 100:",
            "        return False",
            "    else:",
            "        return True"
        ],
        "page": "Pr\u00e9sentation de <code>or</code>",
        "program": [
            "def est_pourcentage_valide(x):",
            "    if x < 0 or x > 100:",
            "        return False",
            "    else:",
            "        return True"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "AnExercise"
    },
    {
        "page": "Pr\u00e9sentation de <code>and</code>",
        "program": [
            "True and True"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueAndTrue"
    },
    {
        "page": "Pr\u00e9sentation de <code>and</code>",
        "program": [
            "True and False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueAndFalse"
    },
    {
        "page": "Pr\u00e9sentation de <code>and</code>",
        "program": [
            "False and False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "FalseAndFalse"
    },
    {
        "get_solution": [
            "def est_pourcentage_valide(x):",
            "    if 0 <= x and x <= 100:",
            "        return True",
            "    else:",
            "        return False"
        ],
        "page": "Pr\u00e9sentation de <code>and</code>",
        "program": [
            "def est_pourcentage_valide(x):",
            "    if 0 <= x and x <= 100:",
            "        return True",
            "    else:",
            "        return False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "AndExercise"
    },
    {
        "get_solution": [
            "def tous_egaux(ligne):",
            "    return ligne[0] == ligne[1] and ligne[0] == ligne[2]"
        ],
        "page": "Pr\u00e9sentation de <code>and</code>",
        "program": [
            "def tous_egaux(ligne):",
            "    return ligne[0] == ligne[1] and ligne[0] == ligne[2]"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "TicTacToeWinningRow"
    },
    {
        "page": "Instructions sur plusieurs lignes",
        "program": [
            "est_ami = nom == \"Alice\" or",
            "                 nom == \"Bob\""
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Une exception de type <code>SyntaxError</code> se produit lorsque Python ne peut pas comprendre votre code.</p>\n<p>Le mot-cl\u00e9 Python <code>or</code> ne peut \u00eatre utilis\u00e9 que pour les expressions bool\u00e9ennes.\nVous vouliez peut-\u00eatre \u00e9crire</p>\n<p><code>est_ami = nom == \"Alice\" ,</code></p>",
                    "text": "    est_ami = nom == \"Alice\" or\n                               ^\nSyntaxError: invalid syntax\nat line 1\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "invalid_multiline"
    },
    {
        "page": "Instructions sur plusieurs lignes",
        "program": [
            "nom = \"Bob\"",
            "",
            "est_ami = nom == \"Alice\" or \\",
            "            nom == \"Bob\"",
            "print(est_ami)",
            "",
            "est_ami = (nom == \"Alice\" or",
            "             nom == \"Bob\")",
            "print(est_ami)",
            "",
            "est_ami = [nom == \"Alice\",",
            "             nom == \"Bob\"]",
            "print(est_ami)",
            "",
            "print(nom == \"Alice\" or",
            "      nom == \"Bob\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\nTrue\n[False, True]\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "valid_multiline"
    },
    {
        "page": "M\u00e9langes de <code>and</code> et <code>or</code>",
        "program": [
            "True or False and False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "CombiningAndOr"
    },
    {
        "get_solution": [
            "def victoire_en_diagonale(plateau):",
            "    milieu = plateau[1][1]",
            "    return (",
            "            (milieu == plateau[0][0] and milieu == plateau[2][2]) or",
            "            (milieu == plateau[0][2] and milieu == plateau[2][0])",
            "    )"
        ],
        "page": "M\u00e9langes de <code>and</code> et <code>or</code>",
        "program": [
            "def victoire_en_diagonale(plateau):",
            "    milieu = plateau[1][1]",
            "    return (",
            "            (milieu == plateau[0][0] and milieu == plateau[2][2]) or",
            "            (milieu == plateau[0][2] and milieu == plateau[2][0])",
            "    )"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "AndHasHigherPriority"
    },
    {
        "page": "Pr\u00e9sentation de <code>not</code>",
        "program": [
            "not True"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "IntroducingNot"
    },
    {
        "page": "Pr\u00e9sentation de <code>not</code>",
        "program": [
            "not False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "NotFalse"
    },
    {
        "page": "Pr\u00e9sentation de <code>not</code>",
        "program": [
            "b = True",
            "print(not b or b)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "NotTrueOrTrue"
    },
    {
        "get_solution": [
            "def est_image_invalide(nom_fichier):",
            "    return not (nom_fichier.endswith(\".png\") or nom_fichier.endswith(\".jpg\"))"
        ],
        "page": "Pr\u00e9sentation de <code>not</code>",
        "program": [
            "def est_image_invalide(nom_fichier):",
            "    return not (nom_fichier.endswith(\".png\") or nom_fichier.endswith(\".jpg\"))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "NotPriority"
    },
    {
        "page": "V\u00e9rification du plateau pour un gagnant",
        "program": [
            "def victoire_en_ligne(plateau):",
            "    for ligne in plateau:",
            "        tous_egaux = True",
            "        marque = ligne[0]",
            "        for valeur in ligne:",
            "            if marque != valeur:",
            "                tous_egaux = False",
            "                break",
            "        if tous_egaux:",
            "            return True",
            "    return False"
        ],
        "response": {
            "message": "<p>N'oubliez pas que certaines valeurs peuvent \u00eatre <code>' '</code>. Une ligne vide n'est pas une ligne gagnante.</p>",
            "passed": false,
            "result": []
        },
        "step": "intro_row_winner"
    },
    {
        "get_solution": [
            "def victoire_en_ligne(plateau):",
            "    for ligne in plateau:",
            "        tous_egaux = True",
            "        marque = ligne[0]",
            "        for valeur in ligne:",
            "            if valeur == ' ' or marque != valeur:",
            "                tous_egaux = False",
            "                break",
            "        if tous_egaux:",
            "            return True",
            "    return False"
        ],
        "page": "V\u00e9rification du plateau pour un gagnant",
        "program": [
            "def victoire_en_ligne(plateau):",
            "    for ligne in plateau:",
            "        tous_egaux = True",
            "        marque = ligne[0]",
            "        for valeur in ligne:",
            "            if valeur == ' ' or marque != valeur:",
            "                tous_egaux = False",
            "                break",
            "        if tous_egaux:",
            "            return True",
            "    return False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "intro_row_winner"
    },
    {
        "get_solution": [
            "def victoire_en_colonne(plateau):",
            "    for i_colonne in range(len(plateau[0])):",
            "        tous_egaux = True",
            "        marque = plateau[0][i_colonne]",
            "        for ligne in plateau:",
            "            if ligne[i_colonne] == ' ' or ligne[i_colonne] != marque:",
            "                tous_egaux = False",
            "                break",
            "        if tous_egaux:",
            "            return True",
            "    return False"
        ],
        "page": "V\u00e9rification du plateau pour un gagnant",
        "program": [
            "def victoire_en_colonne(plateau):",
            "    for i_colonne in range(len(plateau[0])):",
            "        tous_egaux = True",
            "        marque = plateau[0][i_colonne]",
            "        for ligne in plateau:",
            "            if ligne[i_colonne] == ' ' or ligne[i_colonne] != marque:",
            "                tous_egaux = False",
            "                break",
            "        if tous_egaux:",
            "            return True",
            "    return False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "column_winner"
    },
    {
        "get_solution": [
            "def victoire_en_diagonale(plateau):",
            "    tous_egaux_1 = True",
            "    tous_egaux_2 = True",
            "    haut_gauche = plateau[0][0]",
            "    haut_droite = plateau[0][-1]",
            "    for i in range(len(plateau)):",
            "        if plateau[i][i] == ' ' or plateau[i][i] != haut_gauche:",
            "            tous_egaux_1 = False",
            "        if plateau[i][-i - 1] == ' ' or plateau[i][-i - 1] != haut_droite:",
            "            tous_egaux_2 = False",
            "    return tous_egaux_1 or tous_egaux_2"
        ],
        "page": "V\u00e9rification du plateau pour un gagnant",
        "program": [
            "def victoire_en_diagonale(plateau):",
            "    tous_egaux_1 = True",
            "    tous_egaux_2 = True",
            "    haut_gauche = plateau[0][0]",
            "    haut_droite = plateau[0][-1]",
            "    for i in range(len(plateau)):",
            "        if plateau[i][i] == ' ' or plateau[i][i] != haut_gauche:",
            "            tous_egaux_1 = False",
            "        if plateau[i][-i - 1] == ' ' or plateau[i][-i - 1] != haut_droite:",
            "            tous_egaux_2 = False",
            "    return tous_egaux_1 or tous_egaux_2"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "diagonal_winner"
    },
    {
        "get_solution": [
            "def victoire(plateau):",
            "    return victoire_en_ligne(plateau) or victoire_en_colonne(plateau) or victoire_en_diagonale(plateau)"
        ],
        "page": "V\u00e9rification du plateau pour un gagnant",
        "program": [
            "def ligne_gagnante(chaines):",
            "    marque = chaines[0]",
            "    if marque == ' ':",
            "        return False",
            "    for valeur in chaines:",
            "        if marque != valeur:",
            "            return False",
            "    return True",
            "",
            "def victoire_en_ligne(plateau):",
            "    for ligne in plateau:",
            "        if ligne_gagnante(ligne):",
            "            return True",
            "    return False",
            "",
            "def victoire_en_colonne(plateau):",
            "    for i_colonne in range(len(plateau[0])):",
            "        colonne = []",
            "        for ligne in plateau:",
            "            colonne.append(ligne[i_colonne])",
            "        if ligne_gagnante(colonne):",
            "            return True",
            "    return False",
            "",
            "def victoire_en_diagonale(plateau):",
            "    diagonale_1 = []",
            "    diagonale_2 = []",
            "    for i in range(len(plateau)):",
            "        diagonale_1.append(plateau[i][i])",
            "        diagonale_2.append(plateau[i][-i - 1])",
            "    return ligne_gagnante(diagonale_1) or ligne_gagnante(diagonale_2)",
            "",
            "def victoire(plateau):",
            "    return victoire_en_ligne(plateau) or victoire_en_colonne(plateau) or victoire_en_diagonale(plateau)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "winner"
    },
    {
        "page": "Le caract\u00e8re saut de ligne, <code>representation</code>",
        "program": [
            "def affiche_plateau(plateau):",
            "    for ligne in plateau:",
            "        print(\"\".join(ligne))",
            "",
            "affiche_plateau([",
            "    ['X', 'O', 'X'],",
            "    [' ', 'O', 'O'],",
            "    [' ', 'X', ' ']",
            "])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "XOX\n OO\n X \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "one_way_to_print_board"
    },
    {
        "page": "Le caract\u00e8re saut de ligne, <code>representation</code>",
        "program": [
            "assert_equal(",
            "    representation([",
            "        ['X', 'O', 'X'],",
            "        [' ', 'O', 'O'],",
            "        [' ', 'X', ' ']",
            "    ]),",
            "    \"XOX",
            "      OO",
            "      X \"",
            ")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "friendly": "<p>Une exception de type <code>SyntaxError</code> se produit lorsque Python ne peut pas comprendre votre code.</p>\n<p>Vous aviez commenc\u00e9 \u00e0 \u00e9crire une cha\u00eene de caract\u00e8res\navec un guillemet simple ou double, mais n'avez jamais\ntermin\u00e9 la cha\u00eene avec un autre guillemet sur cette ligne.</p>",
                    "text": "    \"XOX\n    ^\nSyntaxError: unterminated string literal (detected at line 7)\nat line 7\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "invalid_multi_line_string"
    },
    {
        "page": "Le caract\u00e8re saut de ligne, <code>representation</code>",
        "program": [
            "chaine = \"\"\"Premi\u00e8re ligne",
            "Deuxi\u00e8me ligne \"\"\"",
            "print(chaine)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Premi\u00e8re ligne\nDeuxi\u00e8me ligne \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "multi_line_strings_triple_quotes"
    },
    {
        "page": "Le caract\u00e8re saut de ligne, <code>representation</code>",
        "program": [
            "chaine = 'a'"
        ],
        "response": {
            "message": "<p>Mince, <code>chaine</code> n'a pas la bonne valeur. Ex\u00e9cutez \u00e0 nouveau le programme \u00e0 partir de l'\u00e9tape pr\u00e9c\u00e9dente.</p>",
            "passed": false,
            "result": []
        },
        "step": "discovering_newline"
    },
    {
        "page": "Le caract\u00e8re saut de ligne, <code>representation</code>",
        "program": [
            "chaine"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'First line\\nSecond line'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "discovering_newline"
    },
    {
        "page": "Le caract\u00e8re saut de ligne, <code>representation</code>",
        "program": [
            "len('\\n')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "1",
                "choices": [
                    "1",
                    "2",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_newline"
    },
    {
        "get_solution": [
            "def representation(plateau):",
            "    resultat = ''",
            "    for i in range(len(plateau)):",
            "        for caractere in plateau[i]:",
            "            resultat += caractere",
            "        if i != len(plateau) - 1:",
            "            resultat += '\\n'",
            "    return resultat"
        ],
        "page": "Le caract\u00e8re saut de ligne, <code>representation</code>",
        "program": [
            "def representation(plateau):",
            "    resultat = ''",
            "    for i in range(len(plateau)):",
            "        for caractere in plateau[i]:",
            "            resultat += caractere",
            "        if i != len(plateau) - 1:",
            "            resultat += '\\n'",
            "    return resultat"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "format_board_simple"
    },
    {
        "get_solution": [
            "def representation(plateau):",
            "    liste_de_lignes = []",
            "    for ligne in plateau:",
            "        liste_de_lignes.append(\"|\".join(ligne))",
            "    lignes = []",
            "    for _ in plateau[0]:",
            "        lignes.append(\"-\")",
            "    ligne = f'\\n{\"+\".join(lignes)}\\n'",
            "    return ligne.join(liste_de_lignes)"
        ],
        "page": "Le caract\u00e8re saut de ligne, <code>representation</code>",
        "program": [
            "def representation(plateau):",
            "    liste_de_lignes = []",
            "    for ligne in plateau:",
            "        liste_de_lignes.append(\"|\".join(ligne))",
            "    lignes = []",
            "    for _ in plateau[0]:",
            "        lignes.append(\"-\")",
            "    ligne = f'\\n{\"+\".join(lignes)}\\n'",
            "    return ligne.join(liste_de_lignes)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "format_board_bonus_challenge"
    },
    {
        "page": "Les types",
        "program": [
            "print(type('Hello World'))",
            "print(type(23))",
            "print(type(True))",
            "print(type([1, 2, 3]))",
            "print(type(4.56))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "<class 'str'>\n<class 'int'>\n<class 'bool'>\n<class 'list'>\n<class 'float'>\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "five_different_types"
    },
    {
        "page": "Les types",
        "program": [
            "type(3) == int"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "check_type_manually"
    },
    {
        "page": "Les types",
        "program": [
            "print('123')",
            "print(123)",
            "print(123 == '123')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "123\n123\nFalse\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "different_types_look_same"
    },
    {
        "page": "Les types",
        "program": [
            "print(123 + 456)",
            "print('123' + '456')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "579\n123456",
                "choices": [
                    "579\n579",
                    "579\n'579'",
                    "123456\n123456",
                    "123456\n'123456'",
                    "579\n123456",
                    "579\n'123456'",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "579\n123456\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "plus_has_two_meanings"
    },
    {
        "page": "Les types",
        "program": [
            "print(13 < 120)",
            "print('13' < '120')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True\nFalse",
                "choices": [
                    "True\nTrue",
                    "True\nFalse",
                    "False\nTrue",
                    "False\nFalse",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "True\nFalse\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "less_than_has_two_meanings"
    },
    {
        "page": "Les types",
        "program": [
            "print(sorted([120, 13, 0]))",
            "print(sorted(['120', '13', '0']))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[0, 13, 120]\n['0', '120', '13']",
                "choices": [
                    "[0, 13, 120]\n['0', '120', '13']",
                    "[0, 13, 120]\n['13', '120', '0']",
                    "[0, 13, 120]\n['120', '13', '0']",
                    "[120, 13, 0]\n['0', '120', '13']",
                    "[120, 13, 0]\n['13', '120', '0']",
                    "[120, 13, 0]\n['120', '13', '0']",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "[0, 13, 120]\n['0', '120', '13']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "less_than_sorting_strings"
    },
    {
        "page": "Les types",
        "program": [
            "12 + '34'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Erreur",
                "choices": [
                    "46",
                    "'46'",
                    "1234",
                    "'1234'",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "unsupported operand type(s) for +: 'int' and 'str'",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"mi mi-ExecutingNode\">12</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"s1 s1-ExecutingNode\">&#39;34&#39;</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>Une exception <code>TypeError</code> est g\u00e9n\u00e9ralement caus\u00e9e par une tentative\nde combiner deux types d\u2019objets incompatibles,\nen invoquant une fonction avec le mauvais type d\u2019objet,\nou en tentant d'effectuer une op\u00e9ration non permise sur un type d'objet donn\u00e9.</p>\n<p>Vous avez essay\u00e9 d\u2019additionner deux types d\u2019objets incompatibles:\nun entier (<code>int</code>) et une cha\u00eene de caract\u00e8res (<code>str</code>).\nPeut-\u00eatre avez-vous oubli\u00e9 de convertir <code>'34'</code> en un entier (<code>int</code>).</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | 12 + '34'",
                        "           ^^^^^^^^^",
                        "",
                        "TypeError: unsupported operand type(s) for +: 'int' and 'str'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "common_type_errors"
    },
    {
        "get_solution": [
            "for i in range(int(nombre)):",
            "    print('\u00c0 la... ' + str(i + 1))",
            "print('Et hop !')"
        ],
        "page": "Les types",
        "program": [
            "nombre = '2'",
            "for i in range(int(nombre)):",
            "    print('\u00c0 la... ' + str(i + 1))",
            "print('Et hop !')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "\u00c0 la... 1\n\u00c0 la... 2\nEt hop !\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "fixing_type_errors_with_conversion"
    },
    {
        "get_solution": [
            "def representation(plateau):",
            "    premiere_ligne = ' '",
            "    for i in range(len(plateau)):",
            "        premiere_ligne += str(i + 1)",
            "    liste_de_lignes = [premiere_ligne]",
            "    for i in range(len(plateau)):",
            "        ligne = str(i + 1) + ''.join(plateau[i])",
            "        liste_de_lignes.append(ligne)",
            "    return \"\\n\".join(liste_de_lignes)"
        ],
        "page": "Les types",
        "program": [
            "def representation(plateau):",
            "    premiere_ligne = ' '",
            "    for i in range(len(plateau)):",
            "        premiere_ligne += str(i + 1)",
            "    liste_de_lignes = [premiere_ligne]",
            "    for i in range(len(plateau)):",
            "        ligne = str(i + 1) + ''.join(plateau[i])",
            "        liste_de_lignes.append(ligne)",
            "    return \"\\n\".join(liste_de_lignes)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "format_board_with_numbers"
    },
    {
        "page": "Programmes interactifs avec <code>input()</code>",
        "program": [
            "print('Tapez votre nom, puis appuyez sur \"Entr\u00e9e\" :')",
            "nom = input()",
            "print(f'Bonjour {nom} !')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Tapez votre nom, puis appuyez sur \"Entr\u00e9e\" :\n",
                    "type": "stdout"
                },
                {
                    "text": "",
                    "type": "input_prompt"
                },
                {
                    "text": "<input: there>\n",
                    "type": "stdout"
                },
                {
                    "text": "Bonjour there !\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_input"
    },
    {
        "get_solution": [
            "nombre_super_secret = 7",
            "print(\"Quel est le nombre auquel je pense ?\")",
            "reponse = input()",
            "if int(reponse) == nombre_super_secret:",
            "    print(\"Incroyable ! \u00cates-vous devin ?\")",
            "else:",
            "    print(\"Perdu !\")"
        ],
        "page": "Programmes interactifs avec <code>input()</code>",
        "program": [
            "nombre_super_secret = 7",
            "print(\"Quel est le nombre auquel je pense ?\")",
            "reponse = input()",
            "if int(reponse) == nombre_super_secret:",
            "    print(\"Incroyable ! \u00cates-vous devin ?\")",
            "else:",
            "    print(\"Perdu !\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Quel est le nombre auquel je pense ?\n",
                    "type": "stdout"
                },
                {
                    "text": "",
                    "type": "input_prompt"
                },
                {
                    "text": "<input: 1>\n",
                    "type": "stdout"
                },
                {
                    "text": "Perdu !\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "convert_input_to_int"
    },
    {
        "page": "Affectation avec liste imbriqu\u00e9e : Jouer un coup sur un plateau",
        "program": [
            "def joue_un_coup(plateau, joueur):",
            "    plateau[1] = joueur",
            "",
            "def lance_jeu():",
            "    plateau_jeu = [\" \", \" \", \" \"]",
            "    joue_un_coup(plateau_jeu, \"X\")",
            "    print(plateau_jeu)",
            "",
            "lance_jeu()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[' ', 'X', ' ']",
                "choices": [
                    "X",
                    "' '",
                    "'X'",
                    "[' ']",
                    "['X']",
                    "[' ', ' ', ' ']",
                    "['X', ' ', ' ']",
                    "[' ', 'X', ' ']",
                    "[' ', ' ', 'X']",
                    "Erreur"
                ]
            },
            "result": [
                {
                    "text": "[' ', 'X', ' ']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "modify_list_in_function"
    },
    {
        "page": "Affectation avec liste imbriqu\u00e9e : Jouer un coup sur un plateau",
        "program": [
            "def joue_un_coup(plateau, joueur):",
            "    ligne = plateau[1]",
            "    ligne[0] = joueur",
            "",
            "def lance_jeu():",
            "    plateau = [",
            "        [\" \", \" \", \" \"],",
            "        [\" \", \" \", \" \"],",
            "        [\" \", \" \", \" \"],",
            "    ]",
            "    joue_un_coup(plateau, \"X\")",
            "    print(plateau)",
            "",
            "lance_jeu()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[[' ', ' ', ' '], ['X', ' ', ' '], [' ', ' ', ' ']]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_assignment_two_lines"
    },
    {
        "get_solution": [
            "def joue_un_coup(plateau, joueur):",
            "    ligne = int(input()) - 1",
            "    i_colonne = int(input()) - 1",
            "    plateau[ligne][i_colonne] = joueur"
        ],
        "page": "Affectation avec liste imbriqu\u00e9e : Jouer un coup sur un plateau",
        "program": [
            "def joue_un_coup(plateau, joueur):",
            "    ligne = int(input()) - 1",
            "    i_colonne = int(input()) - 1",
            "    plateau[ligne][i_colonne] = joueur"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "nested_assignment_input"
    },
    {
        "page": "Fabrication du plateau",
        "program": [
            "def fabrique_plateau(taille):",
            "    ligne = []",
            "    for _ in range(taille):",
            "        ligne.append(' ')",
            "    plateau = []",
            "    for _ in range(taille):",
            "        plateau.append(ligne)",
            "    return plateau",
            "",
            "def test():",
            "    plateau = fabrique_plateau(3)",
            "    assert_equal(plateau, [",
            "        [' ', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "    ])",
            "    plateau[0][0] = 'X'",
            "    assert_equal(plateau, [",
            "        ['X', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "    ])",
            "",
            "test()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nError! [['X', ' ', ' '], ['X', ' ', ' '], ['X', ' ', ' ']] != [['X', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "naive_make_board"
    },
    {
        "page": "Fabrication du plateau",
        "program": [
            "pass",
            "def fabrique_plateau(taille): return [[' '] * taille] * taille"
        ],
        "response": {
            "message": "<p>Les sous-listes dans le r\u00e9sultat sont des objets identiques.</p>",
            "passed": false,
            "result": []
        },
        "step": "fix_make_board"
    },
    {
        "get_solution": [
            "def fabrique_plateau(taille):",
            "    plateau = []",
            "    for _ in range(taille):",
            "        ligne = []",
            "        for _ in range(taille):",
            "            ligne.append(' ')",
            "        plateau.append(ligne)",
            "    return plateau"
        ],
        "page": "Fabrication du plateau",
        "program": [
            "def fabrique_plateau(taille):",
            "    plateau = []",
            "    for _ in range(taille):",
            "        ligne = []",
            "        for _ in range(taille):",
            "            ligne.append(' ')",
            "        plateau.append(ligne)",
            "    return plateau"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "fix_make_board"
    },
    {
        "get_solution": [
            "def lance_jeu(taille_plateau, joueur_1, joueur_2):",
            "    plateau = fabrique_plateau(taille_plateau)",
            "    print(representation(plateau))",
            "",
            "    joueur = joueur_1",
            "    for _ in range(taille_plateau * taille_plateau):",
            "        joue_un_coup(plateau, joueur)",
            "",
            "        if victoire(plateau):",
            "            affiche_victoire(joueur)",
            "            return",
            "",
            "        if joueur == joueur_1:",
            "            joueur = joueur_2",
            "        else:",
            "            joueur = joueur_1",
            "",
            "    affiche_egalite()"
        ],
        "page": "Le jeu complet du Morpion",
        "program": [
            "def ligne_gagnante(chaines):",
            "    chaines = set(chaines)",
            "    return len(chaines) == 1 and ' ' not in chaines",
            "",
            "def victoire_en_ligne(plateau):",
            "    return any(ligne_gagnante(ligne) for ligne in plateau)",
            "",
            "def victoire_en_colonne(plateau):",
            "    return victoire_en_ligne(zip(*plateau))",
            "",
            "def victoire_diagonale_principale(plateau):",
            "    return ligne_gagnante(ligne[i] for i, ligne in enumerate(plateau))",
            "",
            "def victoire_en_diagonale(plateau):",
            "    return victoire_diagonale_principale(plateau) or victoire_diagonale_principale(reversed(plateau))",
            "",
            "def victoire(plateau):",
            "    return victoire_en_ligne(plateau) or victoire_en_colonne(plateau) or victoire_en_diagonale(plateau)",
            "",
            "def representation(plateau):",
            "    taille = len(plateau)",
            "    ligne = f'\\n  {\"+\".join(\"-\" * taille)}\\n'",
            "    lignes = [f'{i + 1} {\"|\".join(ligne)}' for i, ligne in enumerate(plateau)]",
            "    return f'  {\" \".join(str(i + 1) for i in range(taille))}\\n{ligne.join(lignes)}'",
            "",
            "def joue_un_coup(plateau, joueur):",
            "    print(f'Coup de {joueur} :')",
            "    ligne = int(input()) - 1",
            "    i_colonne = int(input()) - 1",
            "    plateau[ligne][i_colonne] = joueur",
            "    print(representation(plateau))",
            "",
            "def fabrique_plateau(taille):",
            "    return [[' '] * taille for _ in range(taille)]",
            "",
            "def affiche_victoire(joueur):",
            "    print(f'{joueur} gagne !')",
            "",
            "def affiche_egalite():",
            "    print(\"Match nul !\")",
            "",
            "def lance_jeu(taille_plateau, joueur_1, joueur_2):",
            "    plateau = fabrique_plateau(taille_plateau)",
            "    print(representation(plateau))",
            "",
            "    joueur = joueur_1",
            "    for _ in range(taille_plateau * taille_plateau):",
            "        joue_un_coup(plateau, joueur)",
            "",
            "        if victoire(plateau):",
            "            affiche_victoire(joueur)",
            "            return",
            "",
            "        if joueur == joueur_1:",
            "            joueur = joueur_2",
            "        else:",
            "            joueur = joueur_1",
            "",
            "    affiche_egalite()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "the_full_game"
    },
    {
        "page": "Introduction aux Dictionnaires",
        "program": [
            "anglais = {'pomme': 'apple', 'boite': 'box'}"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "first_dict"
    },
    {
        "page": "Introduction aux Dictionnaires",
        "program": [
            "anglais = {}"
        ],
        "response": {
            "message": "<p>Oups, on a besoin d'assigner <code>anglais = {'pomme': 'apple', 'boite': 'box'}</code> avant de continuer.</p>",
            "passed": false,
            "result": []
        },
        "step": "dict_access"
    },
    {
        "page": "Introduction aux Dictionnaires",
        "program": [
            "anglais[0]"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "0",
                                "type": "KeyError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"n n-ExecutingNode\">anglais</span><span class=\"p p-ExecutingNode\">[</span><span class=\"mi mi-ExecutingNode\">0</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">anglais</span>\n",
                                            "value": "<span class=\"p\">{</span><span class=\"s1\">&#39;pomme&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;apple&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;boite&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;box&#39;</span><span class=\"p\">}</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Une <code>KeyError</code> est lev\u00e9e lorsqu'une valeur n'est pas trouv\u00e9e en tant que\ncl\u00e9 dans un dict Python ou dans un objet similaire.</p>\n<p>La cl\u00e9 <code>0</code> est introuvable dans le dict <code>anglais</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | anglais[0]",
                        "           ^^^^^^^^^^",
                        "anglais = {'pomme': 'apple', 'boite': 'box'}",
                        "",
                        "KeyError: 0"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "dict_access"
    },
    {
        "page": "Introduction aux Dictionnaires",
        "program": [
            "anglais = {}"
        ],
        "response": {
            "message": "<p>Oups, on a besoin d'assigner <code>anglais = {'pomme': 'apple', 'boite': 'box'}</code> avant de continuer.</p>",
            "passed": false,
            "result": []
        },
        "step": "dict_access2"
    },
    {
        "page": "Introduction aux Dictionnaires",
        "program": [
            "anglais['pomme']"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'apple'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dict_access2"
    },
    {
        "page": "Introduction aux Dictionnaires",
        "program": [
            "anglais = {}"
        ],
        "response": {
            "message": "<p>Oups, vous devez d\u00e9finir <code>anglais = {'pomme': 'apple', 'boite': 'box'}</code> avant de continuer.</p>",
            "passed": false,
            "result": []
        },
        "step": "dict_access3"
    },
    {
        "page": "Introduction aux Dictionnaires",
        "program": [
            "anglais['boite']"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'box'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dict_access3"
    },
    {
        "page": "Introduction aux Dictionnaires",
        "program": [
            "anglais = {}"
        ],
        "response": {
            "message": "<p>Oups, vous devez d\u00e9finir <code>anglais = {'pomme': 'apple', 'boite': 'box'}</code> avant de continuer.</p>",
            "passed": false,
            "result": []
        },
        "step": "dict_access4"
    },
    {
        "page": "Introduction aux Dictionnaires",
        "program": [
            "anglais['apple']"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "'apple'",
                                "type": "KeyError"
                            },
                            "frames": [
                                {
                                    "filename": "/my_program.py",
                                    "lineno": 1,
                                    "lines": [
                                        {
                                            "is_current": true,
                                            "lineno": 1,
                                            "text": "<span class=\"n n-ExecutingNode\">anglais</span><span class=\"p p-ExecutingNode\">[</span><span class=\"s1 s1-ExecutingNode\">&#39;apple&#39;</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">anglais</span>\n",
                                            "value": "<span class=\"p\">{</span><span class=\"s1\">&#39;pomme&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;apple&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;boite&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;box&#39;</span><span class=\"p\">}</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>Une <code>KeyError</code> est lev\u00e9e lorsqu'une valeur n'est pas trouv\u00e9e en tant que\ncl\u00e9 dans un dict Python ou dans un objet similaire.</p>\n<p>La cl\u00e9 <code>'apple'</code> est introuvable dans le dict <code>anglais</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"/my_program.py\", line 1, in <module>",
                        "-->    1 | anglais['apple']",
                        "           ^^^^^^^^^^^^^^^^",
                        "anglais = {'pomme': 'apple', 'boite': 'box'}",
                        "",
                        "KeyError: 'apple'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "dict_access4"
    },
    {
        "get_solution": [
            "def cout_total(panier, prix):",
            "    resultat = 0",
            "    for element in panier:",
            "        tarif = prix[element]",
            "        resultat += tarif",
            "    return resultat"
        ],
        "page": "Utiliser les Dictionnaires sur un exemple pratique",
        "program": [
            "def cout_total(panier, prix):",
            "    resultat = 0",
            "    for element in panier:",
            "        tarif = prix[element]",
            "        resultat += tarif",
            "    return resultat"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "shopping_cart1"
    },
    {
        "get_solution": [
            "def cout_total(panier, quantites, prix):",
            "    resultat = 0",
            "    for element in panier:",
            "        tarif = prix[element]",
            "        quantite = quantites[element]",
            "        resultat += tarif * quantite",
            "    return resultat"
        ],
        "page": "Utiliser les Dictionnaires sur un exemple pratique",
        "program": [
            "def cout_total(panier, quantites, prix):",
            "    resultat = 0",
            "    for element in panier:",
            "        tarif = prix[element]",
            "        quantite = quantites[element]",
            "        resultat += tarif * quantite",
            "    return resultat"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "shopping_cart4"
    },
    {
        "page": "Utiliser les Dictionnaires sur un exemple pratique",
        "program": [
            "def substitution(chaine):",
            "    resultat = ''",
            "    for caractere in chaine:",
            "        if caractere == 'A':",
            "            caractere = 'T'",
            "        elif caractere == 'T':",
            "            caractere = 'A'",
            "        elif caractere == 'G':",
            "            caractere = 'C'",
            "        elif caractere == 'C':",
            "            caractere = 'G'",
            "        resultat += caractere",
            "    return resultat",
            "",
            "original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'",
            "attendu = 'TCATCGCAGGAATCAATGTCCTACCGAATA'",
            "assert_equal(substitution(original), attendu)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_part1"
    },
    {
        "get_solution": [
            "def substitution(chaine, d):",
            "    resultat = \"\"",
            "    for lettre in chaine:",
            "        resultat += d[lettre]",
            "    return resultat"
        ],
        "page": "Utiliser les Dictionnaires sur un exemple pratique",
        "program": [
            "def substitution(chaine, d):",
            "    resultat = \"\"",
            "    for lettre in chaine:",
            "        resultat += d[lettre]",
            "    return resultat"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "dna_part2"
    },
    {
        "page": "It\u00e9rer sur les clefs d'un dictionnaire",
        "program": [
            "quantites = {'pomme': 1, 'chat': 10}",
            "print(quantites.keys())"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "dict_keys(['pomme', 'chat'])\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_keys"
    },
    {
        "page": "It\u00e9rer sur les clefs d'un dictionnaire",
        "program": [
            "quantites = {'pomme': 1, 'chat': 10}",
            "for clef in quantites.keys():",
            "    print(clef)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "pomme\nchat\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "keys_are_iterable"
    },
    {
        "page": "It\u00e9rer sur les clefs d'un dictionnaire",
        "program": [
            "quantites = {'pomme': 1, 'chat': 10}",
            "for clef in quantites:",
            "    print(clef)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "pomme\nchat\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "keys_are_iterable2"
    },
    {
        "get_solution": [
            "def cout_total(quantites, prix):",
            "    resultat = 0",
            "    for element in quantites:",
            "        tarif = prix[element]",
            "        quantite = quantites[element]",
            "        resultat += tarif * quantite",
            "    return resultat"
        ],
        "page": "It\u00e9rer sur les clefs d'un dictionnaire",
        "program": [
            "def cout_total(quantites, prix):",
            "    resultat = 0",
            "    for element in quantites:",
            "        tarif = prix[element]",
            "        quantite = quantites[element]",
            "        resultat += tarif * quantite",
            "    return resultat"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "cleanup_shopping_cart"
    },
    {
        "get_solution": [
            "def affiche_mots(anglais):",
            "    for mot in anglais:",
            "        print(\"Francais: \" + mot)",
            "        print(\"Anglais: \" + anglais[mot])",
            "        print(\"---\")"
        ],
        "page": "It\u00e9rer sur les clefs d'un dictionnaire",
        "program": [
            "def affiche_mots(anglais):",
            "    for mot in anglais:",
            "        print(\"Francais: \" + mot)",
            "        print(\"Anglais: \" + anglais[mot])",
            "        print(\"---\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "english_to_french"
    },
    {
        "get_solution": [
            "def affiche_mots(anglais, allemand):",
            "    for mot in anglais:",
            "        print(\"Francais: \" + mot)",
            "        print(\"Anglais: \" + anglais[mot])",
            "        print(\"Allemand: \" + allemand[mot])",
            "        print(\"---\")"
        ],
        "page": "It\u00e9rer sur les clefs d'un dictionnaire",
        "program": [
            "def affiche_mots(anglais, allemand):",
            "    for mot in anglais:",
            "        print(\"Francais: \" + mot)",
            "        print(\"Anglais: \" + anglais[mot])",
            "        print(\"Allemand: \" + allemand[mot])",
            "        print(\"---\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "english_to_german"
    },
    {
        "page": "It\u00e9rer sur les clefs d'un dictionnaire",
        "program": [
            "def affiche_mots(mots):",
            "    for mot in mots:",
            "        traductions = mots[mot]",
            "",
            "        print(f\"Francais: {mot}\")",
            "        for langue in traductions:",
            "            print(f\"{langue}: {traductions[langue]}\")",
            "        print(f\"---\")",
            "",
            "affiche_mots({",
            "    'pomme': {",
            "        'Anglais': 'apple',",
            "        'Allemand': 'Apfel',",
            "    },",
            "    'boite': {",
            "        'Anglais': 'box',",
            "        'Allemand': 'Kasten',",
            "    },",
            "})"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Francais: pomme\nAnglais: apple\nAllemand: Apfel\n---\nFrancais: boite\nAnglais: box\nAllemand: Kasten\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_dictionaries"
    }
]